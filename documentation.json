{
    "pipes": [],
    "interfaces": [
        {
            "name": "Task",
            "id": "interface-Task-d4d37e919bf153b85cd73cf76b3d81234228b20ae5a9a500ccf0118c584fdae333a8448d8becdbaa20c0fdaf47fd111516c76691ee76980e2a62f442b656bd75",
            "file": "src/app/models/task.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Task {\r\n  id: string;\r\n  title: string;\r\n  state: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TaskStateModel",
            "id": "interface-TaskStateModel-0e8c385cc1879b5e35e8f068e526f3bbf78284297784a3aea23516d05ee274c12db1d1d63734bf0eae8f6d61f81099a8bf9abe015a0076f6741f207621f0ec77",
            "file": "src/app/state/task.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { State, Selector, Action, StateContext } from '@ngxs/store';\r\nimport { patch, updateItem } from '@ngxs/store/operators';\r\nimport { Task } from '../models/task.model';\r\n\r\n// Defines the actions available to the app\r\nexport const actions = {\r\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\r\n  PIN_TASK: 'PIN_TASK',\r\n  ERROR: 'APP_ERROR',\r\n};\r\n\r\nexport class ArchiveTask {\r\n  static readonly type = actions.ARCHIVE_TASK;\r\n\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class PinTask {\r\n  static readonly type = actions.PIN_TASK;\r\n\r\n  constructor(public payload: string) {}\r\n}\r\n// The class definition for our error field\r\nexport class AppError {\r\n  static readonly type = actions.ERROR;\r\n  constructor(public payload: boolean) {}\r\n}\r\n\r\n// The initial state of our store when the app loads.\r\n// Usually you would fetch this from a server\r\nconst defaultTasks = [\r\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\r\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\r\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\r\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\r\n];\r\n\r\nexport interface TaskStateModel {\r\n  tasks: Task[];\r\n  status: 'idle' | 'loading' | 'success' | 'error';\r\n  error: boolean;\r\n}\r\n\r\n// Sets the default state\r\n@State<TaskStateModel>({\r\n  name: 'taskbox',\r\n  defaults: {\r\n    tasks: defaultTasks,\r\n    status: 'idle',\r\n    error: false,\r\n  },\r\n})\r\n@Injectable()\r\nexport class TasksState {\r\n  // Defines a new selector for the error field\r\n  @Selector()\r\n  static getError(state: TaskStateModel): boolean {\r\n    return state.error;\r\n  }\r\n\r\n  @Selector()\r\n  static getAllTasks(state: TaskStateModel): Task[] {\r\n    return state.tasks;\r\n  }\r\n\r\n  // Triggers the PinTask action, similar to redux\r\n  @Action(PinTask)\r\n  pinTask(\r\n    { getState, setState }: StateContext<TaskStateModel>,\r\n    { payload }: PinTask\r\n  ) {\r\n    const task = getState().tasks.find((task) => task.id === payload);\r\n\r\n    if (task) {\r\n      const updatedTask: Task = {\r\n        ...task,\r\n        state: 'TASK_PINNED',\r\n      };\r\n      setState(\r\n        patch({\r\n          tasks: updateItem<Task>(\r\n            (pinnedTask) => pinnedTask?.id === payload,\r\n            updatedTask\r\n          ),\r\n        })\r\n      );\r\n    }\r\n  }\r\n  // Triggers the archiveTask action, similar to redux\r\n  @Action(ArchiveTask)\r\n  archiveTask(\r\n    { getState, setState }: StateContext<TaskStateModel>,\r\n    { payload }: ArchiveTask\r\n  ) {\r\n    const task = getState().tasks.find((task) => task.id === payload);\r\n    if (task) {\r\n      const updatedTask: Task = {\r\n        ...task,\r\n        state: 'TASK_ARCHIVED',\r\n      };\r\n      setState(\r\n        patch({\r\n          tasks: updateItem<Task>(\r\n            (archivedTask) => archivedTask?.id === payload,\r\n            updatedTask\r\n          ),\r\n        })\r\n      );\r\n    }\r\n  }\r\n  // Function to handle how the state should be updated when the action is triggered\r\n  @Action(AppError)\r\n  setAppError(\r\n    { patchState, getState }: StateContext<TaskStateModel>,\r\n    { payload }: AppError\r\n  ) {\r\n    const state = getState();\r\n    patchState({\r\n      error: !state.error,\r\n    });\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"idle\" | \"loading\" | \"success\" | \"error\"",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "tasks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Task[]",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "TasksState",
            "id": "injectable-TasksState-0e8c385cc1879b5e35e8f068e526f3bbf78284297784a3aea23516d05ee274c12db1d1d63734bf0eae8f6d61f81099a8bf9abe015a0076f6741f207621f0ec77",
            "file": "src/app/state/task.state.ts",
            "properties": [],
            "methods": [
                {
                    "name": "archiveTask",
                    "args": [
                        {
                            "type": "StateContext<TaskStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "ArchiveTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "ArchiveTask"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<TaskStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "ArchiveTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllTasks",
                    "args": [
                        {
                            "name": "state",
                            "type": "TaskStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Task[]",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "TaskStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getError",
                    "args": [
                        {
                            "name": "state",
                            "type": "TaskStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "TaskStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pinTask",
                    "args": [
                        {
                            "type": "StateContext<TaskStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "PinTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "PinTask"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<TaskStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "PinTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setAppError",
                    "args": [
                        {
                            "type": "StateContext<TaskStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "AppError",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "AppError"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<TaskStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "AppError",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { State, Selector, Action, StateContext } from '@ngxs/store';\r\nimport { patch, updateItem } from '@ngxs/store/operators';\r\nimport { Task } from '../models/task.model';\r\n\r\n// Defines the actions available to the app\r\nexport const actions = {\r\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\r\n  PIN_TASK: 'PIN_TASK',\r\n  ERROR: 'APP_ERROR',\r\n};\r\n\r\nexport class ArchiveTask {\r\n  static readonly type = actions.ARCHIVE_TASK;\r\n\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class PinTask {\r\n  static readonly type = actions.PIN_TASK;\r\n\r\n  constructor(public payload: string) {}\r\n}\r\n// The class definition for our error field\r\nexport class AppError {\r\n  static readonly type = actions.ERROR;\r\n  constructor(public payload: boolean) {}\r\n}\r\n\r\n// The initial state of our store when the app loads.\r\n// Usually you would fetch this from a server\r\nconst defaultTasks = [\r\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\r\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\r\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\r\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\r\n];\r\n\r\nexport interface TaskStateModel {\r\n  tasks: Task[];\r\n  status: 'idle' | 'loading' | 'success' | 'error';\r\n  error: boolean;\r\n}\r\n\r\n// Sets the default state\r\n@State<TaskStateModel>({\r\n  name: 'taskbox',\r\n  defaults: {\r\n    tasks: defaultTasks,\r\n    status: 'idle',\r\n    error: false,\r\n  },\r\n})\r\n@Injectable()\r\nexport class TasksState {\r\n  // Defines a new selector for the error field\r\n  @Selector()\r\n  static getError(state: TaskStateModel): boolean {\r\n    return state.error;\r\n  }\r\n\r\n  @Selector()\r\n  static getAllTasks(state: TaskStateModel): Task[] {\r\n    return state.tasks;\r\n  }\r\n\r\n  // Triggers the PinTask action, similar to redux\r\n  @Action(PinTask)\r\n  pinTask(\r\n    { getState, setState }: StateContext<TaskStateModel>,\r\n    { payload }: PinTask\r\n  ) {\r\n    const task = getState().tasks.find((task) => task.id === payload);\r\n\r\n    if (task) {\r\n      const updatedTask: Task = {\r\n        ...task,\r\n        state: 'TASK_PINNED',\r\n      };\r\n      setState(\r\n        patch({\r\n          tasks: updateItem<Task>(\r\n            (pinnedTask) => pinnedTask?.id === payload,\r\n            updatedTask\r\n          ),\r\n        })\r\n      );\r\n    }\r\n  }\r\n  // Triggers the archiveTask action, similar to redux\r\n  @Action(ArchiveTask)\r\n  archiveTask(\r\n    { getState, setState }: StateContext<TaskStateModel>,\r\n    { payload }: ArchiveTask\r\n  ) {\r\n    const task = getState().tasks.find((task) => task.id === payload);\r\n    if (task) {\r\n      const updatedTask: Task = {\r\n        ...task,\r\n        state: 'TASK_ARCHIVED',\r\n      };\r\n      setState(\r\n        patch({\r\n          tasks: updateItem<Task>(\r\n            (archivedTask) => archivedTask?.id === payload,\r\n            updatedTask\r\n          ),\r\n        })\r\n      );\r\n    }\r\n  }\r\n  // Function to handle how the state should be updated when the action is triggered\r\n  @Action(AppError)\r\n  setAppError(\r\n    { patchState, getState }: StateContext<TaskStateModel>,\r\n    { payload }: AppError\r\n  ) {\r\n    const state = getState();\r\n    patchState({\r\n      error: !state.error,\r\n    });\r\n  }\r\n}\r\n",
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "AppError",
            "id": "class-AppError-0e8c385cc1879b5e35e8f068e526f3bbf78284297784a3aea23516d05ee274c12db1d1d63734bf0eae8f6d61f81099a8bf9abe015a0076f6741f207621f0ec77",
            "file": "src/app/state/task.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { State, Selector, Action, StateContext } from '@ngxs/store';\r\nimport { patch, updateItem } from '@ngxs/store/operators';\r\nimport { Task } from '../models/task.model';\r\n\r\n// Defines the actions available to the app\r\nexport const actions = {\r\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\r\n  PIN_TASK: 'PIN_TASK',\r\n  ERROR: 'APP_ERROR',\r\n};\r\n\r\nexport class ArchiveTask {\r\n  static readonly type = actions.ARCHIVE_TASK;\r\n\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class PinTask {\r\n  static readonly type = actions.PIN_TASK;\r\n\r\n  constructor(public payload: string) {}\r\n}\r\n// The class definition for our error field\r\nexport class AppError {\r\n  static readonly type = actions.ERROR;\r\n  constructor(public payload: boolean) {}\r\n}\r\n\r\n// The initial state of our store when the app loads.\r\n// Usually you would fetch this from a server\r\nconst defaultTasks = [\r\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\r\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\r\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\r\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\r\n];\r\n\r\nexport interface TaskStateModel {\r\n  tasks: Task[];\r\n  status: 'idle' | 'loading' | 'success' | 'error';\r\n  error: boolean;\r\n}\r\n\r\n// Sets the default state\r\n@State<TaskStateModel>({\r\n  name: 'taskbox',\r\n  defaults: {\r\n    tasks: defaultTasks,\r\n    status: 'idle',\r\n    error: false,\r\n  },\r\n})\r\n@Injectable()\r\nexport class TasksState {\r\n  // Defines a new selector for the error field\r\n  @Selector()\r\n  static getError(state: TaskStateModel): boolean {\r\n    return state.error;\r\n  }\r\n\r\n  @Selector()\r\n  static getAllTasks(state: TaskStateModel): Task[] {\r\n    return state.tasks;\r\n  }\r\n\r\n  // Triggers the PinTask action, similar to redux\r\n  @Action(PinTask)\r\n  pinTask(\r\n    { getState, setState }: StateContext<TaskStateModel>,\r\n    { payload }: PinTask\r\n  ) {\r\n    const task = getState().tasks.find((task) => task.id === payload);\r\n\r\n    if (task) {\r\n      const updatedTask: Task = {\r\n        ...task,\r\n        state: 'TASK_PINNED',\r\n      };\r\n      setState(\r\n        patch({\r\n          tasks: updateItem<Task>(\r\n            (pinnedTask) => pinnedTask?.id === payload,\r\n            updatedTask\r\n          ),\r\n        })\r\n      );\r\n    }\r\n  }\r\n  // Triggers the archiveTask action, similar to redux\r\n  @Action(ArchiveTask)\r\n  archiveTask(\r\n    { getState, setState }: StateContext<TaskStateModel>,\r\n    { payload }: ArchiveTask\r\n  ) {\r\n    const task = getState().tasks.find((task) => task.id === payload);\r\n    if (task) {\r\n      const updatedTask: Task = {\r\n        ...task,\r\n        state: 'TASK_ARCHIVED',\r\n      };\r\n      setState(\r\n        patch({\r\n          tasks: updateItem<Task>(\r\n            (archivedTask) => archivedTask?.id === payload,\r\n            updatedTask\r\n          ),\r\n        })\r\n      );\r\n    }\r\n  }\r\n  // Function to handle how the state should be updated when the action is triggered\r\n  @Action(AppError)\r\n  setAppError(\r\n    { patchState, getState }: StateContext<TaskStateModel>,\r\n    { payload }: AppError\r\n  ) {\r\n    const state = getState();\r\n    patchState({\r\n      error: !state.error,\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "actions.ERROR",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ArchiveTask",
            "id": "class-ArchiveTask-0e8c385cc1879b5e35e8f068e526f3bbf78284297784a3aea23516d05ee274c12db1d1d63734bf0eae8f6d61f81099a8bf9abe015a0076f6741f207621f0ec77",
            "file": "src/app/state/task.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { State, Selector, Action, StateContext } from '@ngxs/store';\r\nimport { patch, updateItem } from '@ngxs/store/operators';\r\nimport { Task } from '../models/task.model';\r\n\r\n// Defines the actions available to the app\r\nexport const actions = {\r\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\r\n  PIN_TASK: 'PIN_TASK',\r\n  ERROR: 'APP_ERROR',\r\n};\r\n\r\nexport class ArchiveTask {\r\n  static readonly type = actions.ARCHIVE_TASK;\r\n\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class PinTask {\r\n  static readonly type = actions.PIN_TASK;\r\n\r\n  constructor(public payload: string) {}\r\n}\r\n// The class definition for our error field\r\nexport class AppError {\r\n  static readonly type = actions.ERROR;\r\n  constructor(public payload: boolean) {}\r\n}\r\n\r\n// The initial state of our store when the app loads.\r\n// Usually you would fetch this from a server\r\nconst defaultTasks = [\r\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\r\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\r\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\r\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\r\n];\r\n\r\nexport interface TaskStateModel {\r\n  tasks: Task[];\r\n  status: 'idle' | 'loading' | 'success' | 'error';\r\n  error: boolean;\r\n}\r\n\r\n// Sets the default state\r\n@State<TaskStateModel>({\r\n  name: 'taskbox',\r\n  defaults: {\r\n    tasks: defaultTasks,\r\n    status: 'idle',\r\n    error: false,\r\n  },\r\n})\r\n@Injectable()\r\nexport class TasksState {\r\n  // Defines a new selector for the error field\r\n  @Selector()\r\n  static getError(state: TaskStateModel): boolean {\r\n    return state.error;\r\n  }\r\n\r\n  @Selector()\r\n  static getAllTasks(state: TaskStateModel): Task[] {\r\n    return state.tasks;\r\n  }\r\n\r\n  // Triggers the PinTask action, similar to redux\r\n  @Action(PinTask)\r\n  pinTask(\r\n    { getState, setState }: StateContext<TaskStateModel>,\r\n    { payload }: PinTask\r\n  ) {\r\n    const task = getState().tasks.find((task) => task.id === payload);\r\n\r\n    if (task) {\r\n      const updatedTask: Task = {\r\n        ...task,\r\n        state: 'TASK_PINNED',\r\n      };\r\n      setState(\r\n        patch({\r\n          tasks: updateItem<Task>(\r\n            (pinnedTask) => pinnedTask?.id === payload,\r\n            updatedTask\r\n          ),\r\n        })\r\n      );\r\n    }\r\n  }\r\n  // Triggers the archiveTask action, similar to redux\r\n  @Action(ArchiveTask)\r\n  archiveTask(\r\n    { getState, setState }: StateContext<TaskStateModel>,\r\n    { payload }: ArchiveTask\r\n  ) {\r\n    const task = getState().tasks.find((task) => task.id === payload);\r\n    if (task) {\r\n      const updatedTask: Task = {\r\n        ...task,\r\n        state: 'TASK_ARCHIVED',\r\n      };\r\n      setState(\r\n        patch({\r\n          tasks: updateItem<Task>(\r\n            (archivedTask) => archivedTask?.id === payload,\r\n            updatedTask\r\n          ),\r\n        })\r\n      );\r\n    }\r\n  }\r\n  // Function to handle how the state should be updated when the action is triggered\r\n  @Action(AppError)\r\n  setAppError(\r\n    { patchState, getState }: StateContext<TaskStateModel>,\r\n    { payload }: AppError\r\n  ) {\r\n    const state = getState();\r\n    patchState({\r\n      error: !state.error,\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "actions.ARCHIVE_TASK",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PinTask",
            "id": "class-PinTask-0e8c385cc1879b5e35e8f068e526f3bbf78284297784a3aea23516d05ee274c12db1d1d63734bf0eae8f6d61f81099a8bf9abe015a0076f6741f207621f0ec77",
            "file": "src/app/state/task.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { State, Selector, Action, StateContext } from '@ngxs/store';\r\nimport { patch, updateItem } from '@ngxs/store/operators';\r\nimport { Task } from '../models/task.model';\r\n\r\n// Defines the actions available to the app\r\nexport const actions = {\r\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\r\n  PIN_TASK: 'PIN_TASK',\r\n  ERROR: 'APP_ERROR',\r\n};\r\n\r\nexport class ArchiveTask {\r\n  static readonly type = actions.ARCHIVE_TASK;\r\n\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class PinTask {\r\n  static readonly type = actions.PIN_TASK;\r\n\r\n  constructor(public payload: string) {}\r\n}\r\n// The class definition for our error field\r\nexport class AppError {\r\n  static readonly type = actions.ERROR;\r\n  constructor(public payload: boolean) {}\r\n}\r\n\r\n// The initial state of our store when the app loads.\r\n// Usually you would fetch this from a server\r\nconst defaultTasks = [\r\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\r\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\r\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\r\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\r\n];\r\n\r\nexport interface TaskStateModel {\r\n  tasks: Task[];\r\n  status: 'idle' | 'loading' | 'success' | 'error';\r\n  error: boolean;\r\n}\r\n\r\n// Sets the default state\r\n@State<TaskStateModel>({\r\n  name: 'taskbox',\r\n  defaults: {\r\n    tasks: defaultTasks,\r\n    status: 'idle',\r\n    error: false,\r\n  },\r\n})\r\n@Injectable()\r\nexport class TasksState {\r\n  // Defines a new selector for the error field\r\n  @Selector()\r\n  static getError(state: TaskStateModel): boolean {\r\n    return state.error;\r\n  }\r\n\r\n  @Selector()\r\n  static getAllTasks(state: TaskStateModel): Task[] {\r\n    return state.tasks;\r\n  }\r\n\r\n  // Triggers the PinTask action, similar to redux\r\n  @Action(PinTask)\r\n  pinTask(\r\n    { getState, setState }: StateContext<TaskStateModel>,\r\n    { payload }: PinTask\r\n  ) {\r\n    const task = getState().tasks.find((task) => task.id === payload);\r\n\r\n    if (task) {\r\n      const updatedTask: Task = {\r\n        ...task,\r\n        state: 'TASK_PINNED',\r\n      };\r\n      setState(\r\n        patch({\r\n          tasks: updateItem<Task>(\r\n            (pinnedTask) => pinnedTask?.id === payload,\r\n            updatedTask\r\n          ),\r\n        })\r\n      );\r\n    }\r\n  }\r\n  // Triggers the archiveTask action, similar to redux\r\n  @Action(ArchiveTask)\r\n  archiveTask(\r\n    { getState, setState }: StateContext<TaskStateModel>,\r\n    { payload }: ArchiveTask\r\n  ) {\r\n    const task = getState().tasks.find((task) => task.id === payload);\r\n    if (task) {\r\n      const updatedTask: Task = {\r\n        ...task,\r\n        state: 'TASK_ARCHIVED',\r\n      };\r\n      setState(\r\n        patch({\r\n          tasks: updateItem<Task>(\r\n            (archivedTask) => archivedTask?.id === payload,\r\n            updatedTask\r\n          ),\r\n        })\r\n      );\r\n    }\r\n  }\r\n  // Function to handle how the state should be updated when the action is triggered\r\n  @Action(AppError)\r\n  setAppError(\r\n    { patchState, getState }: StateContext<TaskStateModel>,\r\n    { payload }: AppError\r\n  ) {\r\n    const state = getState();\r\n    patchState({\r\n      error: !state.error,\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "actions.PIN_TASK",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AboutmeDevelopmentComponent",
            "id": "component-AboutmeDevelopmentComponent-da2b96fe6198a8e2f2467b7277226c1814edbf8d1b36443a4c8869741a4679298bf491cf89ab11ab2a86f30b2cd5a45e93df74d6bf6c679815a659d02a238197",
            "file": "src/app/progress-bar/progress-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-aboutme-Development",
            "styleUrls": [],
            "styles": [],
            "template": "\n\n<mat-progress-bar\n    [mode]=\"mode\"\n    [value]=\"value\"\n    [bufferValue]=\"bufferValue\"\n    [color]=\"color\">\n</mat-progress-bar>\n\n\n<div class=\"markdown\">\n  <markdown\n    class=\"variable-binding\"\n    [src]=\"'../../assets/Development.md'\"\n  ></markdown>\n</div>\n\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bufferValue",
                    "defaultValue": "60",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n",
                    "description": "<p>ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode</p>\n",
                    "line": 287,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Color - primary (Theme color) | accent | warn\n",
                    "description": "<p>ProgressBar Color - primary (Theme color) | accent | warn</p>\n",
                    "line": 293,
                    "type": "ThemePalette",
                    "decorators": []
                },
                {
                    "name": "markdowncode",
                    "defaultValue": "`## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 296,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'indeterminate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 275,
                    "type": "ProgressBarMode",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "40",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n",
                    "description": "<p>ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes</p>\n",
                    "line": 281,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 273,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { ThemePalette } from '@angular/material/core';\r\nimport { ProgressBarMode } from '@angular/material/progress-bar';\r\n\r\n@Component({\r\n  selector: 'app-progress-bar',\r\n  templateUrl: './progress-bar.component.html',\r\n  styleUrls: ['./progress-bar.component.scss'],\r\n})\r\nexport class ProgressBarComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  /**\r\n   * ProgressBar mode - determinate | indeterminate | Buffer | Query\r\n   */\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-aboutme-Introduction',\r\n  template: `\r\n\r\n      \r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n\r\n    <div class=\"markdown\">\r\n      <markdown\r\n        class=\"variable-binding\"\r\n        [src]=\"'../../assets/Introduction.md'\"\r\n      ></markdown>\r\n    </div>\r\n  `,\r\n})\r\nexport class AboutmeIntroductionComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-aboutme-Lecturer',\r\n  template: `\r\n\r\n      \r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n    <div class=\"markdown\">\r\n    <markdown mermaid [src]=\"'../../assets/Lecturer.md'\"></markdown>\r\n  </div>\r\n\r\n  `,\r\n})\r\nexport class AboutmeLecturerComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-aboutme-Telecom',\r\n  template: `\r\n\r\n      \r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n\r\n    <div class=\"markdown\">\r\n    <markdown mermaid [src]=\"'../../assets/Telecom.md'\"></markdown>\r\n  </div>\r\n\r\n  `,\r\n})\r\nexport class AboutmeTelecomComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-aboutme-Development',\r\n  template: `\r\n\r\n      \r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n\r\n    <div class=\"markdown\">\r\n      <markdown\r\n        class=\"variable-binding\"\r\n        [src]=\"'../../assets/Development.md'\"\r\n      ></markdown>\r\n    </div>\r\n\r\n  `,\r\n})\r\nexport class AboutmeDevelopmentComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-aboutme-Testing',\r\n  template: `\r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n  <div class=\"markdown\">\r\n    <markdown mermaid [src]=\"'../../assets/Testing.md'\"></markdown>\r\n  </div>\r\n\r\n  <markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\r\n  [lineOffset]=\"5\">\r\n    \\`\\`\\`typescript\r\n    export function greetings(name: string): string &#123;\r\n      return 'Hello ' + name;\r\n    }\r\n    \\`\\`\\`\r\n  </markdown>\r\n\r\n\r\n  <markdown ngPreserveWhitespaces clipboard \r\n    commandLine\r\n    [prompt]=\"'PS C:\\Users\\Chris>'\"\r\n    [filterOutput]=\"'(out)'\">\r\n    \\`\\`\\` powershell\r\n    Get-Date\r\n    (out)\r\n    (ut)Sunday, November 7, 2021 8:19:21 PM\r\n    (out)\r\n    \\`\\`\\`\r\n  </markdown>\r\n\r\n  <div class=\"footer\">\r\n    <mat-divider></mat-divider>\r\n    <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\r\n      Crafted with :heart: by **jfcere** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/jfcere)\r\n    </markdown>\r\n  </div>\r\n\r\n  `,\r\n  styles: [\r\n    `\r\n    .footer {\r\n      margin: 32px 0 8px;\r\n\r\n      &-text {\r\n        display: block;\r\n        font-size: 13px;\r\n        padding-top: 4px;\r\n      }\r\n    }\r\n\r\n    .mat-fab,\r\n    .mat-mini-fab {\r\n      img {\r\n        margin-bottom: 2px;\r\n      }\r\n    }\r\n\r\n    .sticky {\r\n      position: sticky;\r\n      top: 80px;\r\n    }\r\n\r\n    .scrollup-button {\r\n      margin:14px;\r\n\r\n      &--fixed {\r\n        position: fixed;\r\n        bottom: 16px;\r\n        right: 16px;\r\n      }\r\n    }    \r\n    `,\r\n  ],\r\n})\r\nexport class AboutmeTestingComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-startscreen',\r\n  template: `\r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n  <div class=\"markdown\">\r\n    <markdown mermaid [src]=\"'../../assets/Testing.md'\"></markdown>\r\n  </div>\r\n\r\n  <div class=\"markdown\">\r\n      <markdown\r\n        [src]=\"'../../assets/Introduction.md'\"\r\n      ></markdown>\r\n    </div>\r\n\r\n  <div class=\"footer\">\r\n    <mat-divider></mat-divider>\r\n    <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\r\n      Crafted with :heart: by **jfcere** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/jfcere)\r\n    </markdown>\r\n  </div>\r\n\r\n  `,\r\n  styles: [\r\n    `\r\n    .footer {\r\n      margin: 32px 0 8px;\r\n\r\n      &-text {\r\n        display: block;\r\n        font-size: 13px;\r\n        padding-top: 4px;\r\n      }\r\n    }\r\n\r\n    .mat-fab,\r\n    .mat-mini-fab {\r\n      img {\r\n        margin-bottom: 2px;\r\n      }\r\n    }\r\n\r\n    .sticky {\r\n      position: sticky;\r\n      top: 80px;\r\n    }\r\n\r\n    .scrollup-button {\r\n      margin:14px;\r\n\r\n      &--fixed {\r\n        position: fixed;\r\n        bottom: 16px;\r\n        right: 16px;\r\n      }\r\n    }    \r\n    `,\r\n  ],\r\n})\r\nexport class StartScreenComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 270
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "AboutmeIntroductionComponent",
            "id": "component-AboutmeIntroductionComponent-da2b96fe6198a8e2f2467b7277226c1814edbf8d1b36443a4c8869741a4679298bf491cf89ab11ab2a86f30b2cd5a45e93df74d6bf6c679815a659d02a238197",
            "file": "src/app/progress-bar/progress-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-aboutme-Introduction",
            "styleUrls": [],
            "styles": [],
            "template": "\n\n<mat-progress-bar\n    [mode]=\"mode\"\n    [value]=\"value\"\n    [bufferValue]=\"bufferValue\"\n    [color]=\"color\">\n</mat-progress-bar>\n\n\n<div class=\"markdown\">\n  <markdown\n    class=\"variable-binding\"\n    [src]=\"'../../assets/Introduction.md'\"\n  ></markdown>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bufferValue",
                    "defaultValue": "60",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n",
                    "description": "<p>ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode</p>\n",
                    "line": 96,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Color - primary (Theme color) | accent | warn\n",
                    "description": "<p>ProgressBar Color - primary (Theme color) | accent | warn</p>\n",
                    "line": 102,
                    "type": "ThemePalette",
                    "decorators": []
                },
                {
                    "name": "markdowncode",
                    "defaultValue": "`## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 105,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'indeterminate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 84,
                    "type": "ProgressBarMode",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "40",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n",
                    "description": "<p>ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes</p>\n",
                    "line": 90,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { ThemePalette } from '@angular/material/core';\r\nimport { ProgressBarMode } from '@angular/material/progress-bar';\r\n\r\n@Component({\r\n  selector: 'app-progress-bar',\r\n  templateUrl: './progress-bar.component.html',\r\n  styleUrls: ['./progress-bar.component.scss'],\r\n})\r\nexport class ProgressBarComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  /**\r\n   * ProgressBar mode - determinate | indeterminate | Buffer | Query\r\n   */\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-aboutme-Introduction',\r\n  template: `\r\n\r\n      \r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n\r\n    <div class=\"markdown\">\r\n      <markdown\r\n        class=\"variable-binding\"\r\n        [src]=\"'../../assets/Introduction.md'\"\r\n      ></markdown>\r\n    </div>\r\n  `,\r\n})\r\nexport class AboutmeIntroductionComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-aboutme-Lecturer',\r\n  template: `\r\n\r\n      \r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n    <div class=\"markdown\">\r\n    <markdown mermaid [src]=\"'../../assets/Lecturer.md'\"></markdown>\r\n  </div>\r\n\r\n  `,\r\n})\r\nexport class AboutmeLecturerComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-aboutme-Telecom',\r\n  template: `\r\n\r\n      \r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n\r\n    <div class=\"markdown\">\r\n    <markdown mermaid [src]=\"'../../assets/Telecom.md'\"></markdown>\r\n  </div>\r\n\r\n  `,\r\n})\r\nexport class AboutmeTelecomComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-aboutme-Development',\r\n  template: `\r\n\r\n      \r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n\r\n    <div class=\"markdown\">\r\n      <markdown\r\n        class=\"variable-binding\"\r\n        [src]=\"'../../assets/Development.md'\"\r\n      ></markdown>\r\n    </div>\r\n\r\n  `,\r\n})\r\nexport class AboutmeDevelopmentComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-aboutme-Testing',\r\n  template: `\r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n  <div class=\"markdown\">\r\n    <markdown mermaid [src]=\"'../../assets/Testing.md'\"></markdown>\r\n  </div>\r\n\r\n  <markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\r\n  [lineOffset]=\"5\">\r\n    \\`\\`\\`typescript\r\n    export function greetings(name: string): string &#123;\r\n      return 'Hello ' + name;\r\n    }\r\n    \\`\\`\\`\r\n  </markdown>\r\n\r\n\r\n  <markdown ngPreserveWhitespaces clipboard \r\n    commandLine\r\n    [prompt]=\"'PS C:\\Users\\Chris>'\"\r\n    [filterOutput]=\"'(out)'\">\r\n    \\`\\`\\` powershell\r\n    Get-Date\r\n    (out)\r\n    (ut)Sunday, November 7, 2021 8:19:21 PM\r\n    (out)\r\n    \\`\\`\\`\r\n  </markdown>\r\n\r\n  <div class=\"footer\">\r\n    <mat-divider></mat-divider>\r\n    <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\r\n      Crafted with :heart: by **jfcere** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/jfcere)\r\n    </markdown>\r\n  </div>\r\n\r\n  `,\r\n  styles: [\r\n    `\r\n    .footer {\r\n      margin: 32px 0 8px;\r\n\r\n      &-text {\r\n        display: block;\r\n        font-size: 13px;\r\n        padding-top: 4px;\r\n      }\r\n    }\r\n\r\n    .mat-fab,\r\n    .mat-mini-fab {\r\n      img {\r\n        margin-bottom: 2px;\r\n      }\r\n    }\r\n\r\n    .sticky {\r\n      position: sticky;\r\n      top: 80px;\r\n    }\r\n\r\n    .scrollup-button {\r\n      margin:14px;\r\n\r\n      &--fixed {\r\n        position: fixed;\r\n        bottom: 16px;\r\n        right: 16px;\r\n      }\r\n    }    \r\n    `,\r\n  ],\r\n})\r\nexport class AboutmeTestingComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-startscreen',\r\n  template: `\r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n  <div class=\"markdown\">\r\n    <markdown mermaid [src]=\"'../../assets/Testing.md'\"></markdown>\r\n  </div>\r\n\r\n  <div class=\"markdown\">\r\n      <markdown\r\n        [src]=\"'../../assets/Introduction.md'\"\r\n      ></markdown>\r\n    </div>\r\n\r\n  <div class=\"footer\">\r\n    <mat-divider></mat-divider>\r\n    <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\r\n      Crafted with :heart: by **jfcere** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/jfcere)\r\n    </markdown>\r\n  </div>\r\n\r\n  `,\r\n  styles: [\r\n    `\r\n    .footer {\r\n      margin: 32px 0 8px;\r\n\r\n      &-text {\r\n        display: block;\r\n        font-size: 13px;\r\n        padding-top: 4px;\r\n      }\r\n    }\r\n\r\n    .mat-fab,\r\n    .mat-mini-fab {\r\n      img {\r\n        margin-bottom: 2px;\r\n      }\r\n    }\r\n\r\n    .sticky {\r\n      position: sticky;\r\n      top: 80px;\r\n    }\r\n\r\n    .scrollup-button {\r\n      margin:14px;\r\n\r\n      &--fixed {\r\n        position: fixed;\r\n        bottom: 16px;\r\n        right: 16px;\r\n      }\r\n    }    \r\n    `,\r\n  ],\r\n})\r\nexport class StartScreenComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 79
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "AboutmeLecturerComponent",
            "id": "component-AboutmeLecturerComponent-da2b96fe6198a8e2f2467b7277226c1814edbf8d1b36443a4c8869741a4679298bf491cf89ab11ab2a86f30b2cd5a45e93df74d6bf6c679815a659d02a238197",
            "file": "src/app/progress-bar/progress-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-aboutme-Lecturer",
            "styleUrls": [],
            "styles": [],
            "template": "\n\n  <mat-progress-bar\n      [mode]=\"mode\"\n      [value]=\"value\"\n      [bufferValue]=\"bufferValue\"\n      [color]=\"color\">\n  </mat-progress-bar>\n\n  <div class=\"markdown\">\n  <markdown mermaid [src]=\"'../../assets/Lecturer.md'\"></markdown>\n</div>\n\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bufferValue",
                    "defaultValue": "60",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n",
                    "description": "<p>ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode</p>\n",
                    "line": 158,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Color - primary (Theme color) | accent | warn\n",
                    "description": "<p>ProgressBar Color - primary (Theme color) | accent | warn</p>\n",
                    "line": 164,
                    "type": "ThemePalette",
                    "decorators": []
                },
                {
                    "name": "markdowncode",
                    "defaultValue": "`## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 167,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'indeterminate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 146,
                    "type": "ProgressBarMode",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "40",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n",
                    "description": "<p>ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes</p>\n",
                    "line": 152,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { ThemePalette } from '@angular/material/core';\r\nimport { ProgressBarMode } from '@angular/material/progress-bar';\r\n\r\n@Component({\r\n  selector: 'app-progress-bar',\r\n  templateUrl: './progress-bar.component.html',\r\n  styleUrls: ['./progress-bar.component.scss'],\r\n})\r\nexport class ProgressBarComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  /**\r\n   * ProgressBar mode - determinate | indeterminate | Buffer | Query\r\n   */\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-aboutme-Introduction',\r\n  template: `\r\n\r\n      \r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n\r\n    <div class=\"markdown\">\r\n      <markdown\r\n        class=\"variable-binding\"\r\n        [src]=\"'../../assets/Introduction.md'\"\r\n      ></markdown>\r\n    </div>\r\n  `,\r\n})\r\nexport class AboutmeIntroductionComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-aboutme-Lecturer',\r\n  template: `\r\n\r\n      \r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n    <div class=\"markdown\">\r\n    <markdown mermaid [src]=\"'../../assets/Lecturer.md'\"></markdown>\r\n  </div>\r\n\r\n  `,\r\n})\r\nexport class AboutmeLecturerComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-aboutme-Telecom',\r\n  template: `\r\n\r\n      \r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n\r\n    <div class=\"markdown\">\r\n    <markdown mermaid [src]=\"'../../assets/Telecom.md'\"></markdown>\r\n  </div>\r\n\r\n  `,\r\n})\r\nexport class AboutmeTelecomComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-aboutme-Development',\r\n  template: `\r\n\r\n      \r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n\r\n    <div class=\"markdown\">\r\n      <markdown\r\n        class=\"variable-binding\"\r\n        [src]=\"'../../assets/Development.md'\"\r\n      ></markdown>\r\n    </div>\r\n\r\n  `,\r\n})\r\nexport class AboutmeDevelopmentComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-aboutme-Testing',\r\n  template: `\r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n  <div class=\"markdown\">\r\n    <markdown mermaid [src]=\"'../../assets/Testing.md'\"></markdown>\r\n  </div>\r\n\r\n  <markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\r\n  [lineOffset]=\"5\">\r\n    \\`\\`\\`typescript\r\n    export function greetings(name: string): string &#123;\r\n      return 'Hello ' + name;\r\n    }\r\n    \\`\\`\\`\r\n  </markdown>\r\n\r\n\r\n  <markdown ngPreserveWhitespaces clipboard \r\n    commandLine\r\n    [prompt]=\"'PS C:\\Users\\Chris>'\"\r\n    [filterOutput]=\"'(out)'\">\r\n    \\`\\`\\` powershell\r\n    Get-Date\r\n    (out)\r\n    (ut)Sunday, November 7, 2021 8:19:21 PM\r\n    (out)\r\n    \\`\\`\\`\r\n  </markdown>\r\n\r\n  <div class=\"footer\">\r\n    <mat-divider></mat-divider>\r\n    <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\r\n      Crafted with :heart: by **jfcere** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/jfcere)\r\n    </markdown>\r\n  </div>\r\n\r\n  `,\r\n  styles: [\r\n    `\r\n    .footer {\r\n      margin: 32px 0 8px;\r\n\r\n      &-text {\r\n        display: block;\r\n        font-size: 13px;\r\n        padding-top: 4px;\r\n      }\r\n    }\r\n\r\n    .mat-fab,\r\n    .mat-mini-fab {\r\n      img {\r\n        margin-bottom: 2px;\r\n      }\r\n    }\r\n\r\n    .sticky {\r\n      position: sticky;\r\n      top: 80px;\r\n    }\r\n\r\n    .scrollup-button {\r\n      margin:14px;\r\n\r\n      &--fixed {\r\n        position: fixed;\r\n        bottom: 16px;\r\n        right: 16px;\r\n      }\r\n    }    \r\n    `,\r\n  ],\r\n})\r\nexport class AboutmeTestingComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-startscreen',\r\n  template: `\r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n  <div class=\"markdown\">\r\n    <markdown mermaid [src]=\"'../../assets/Testing.md'\"></markdown>\r\n  </div>\r\n\r\n  <div class=\"markdown\">\r\n      <markdown\r\n        [src]=\"'../../assets/Introduction.md'\"\r\n      ></markdown>\r\n    </div>\r\n\r\n  <div class=\"footer\">\r\n    <mat-divider></mat-divider>\r\n    <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\r\n      Crafted with :heart: by **jfcere** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/jfcere)\r\n    </markdown>\r\n  </div>\r\n\r\n  `,\r\n  styles: [\r\n    `\r\n    .footer {\r\n      margin: 32px 0 8px;\r\n\r\n      &-text {\r\n        display: block;\r\n        font-size: 13px;\r\n        padding-top: 4px;\r\n      }\r\n    }\r\n\r\n    .mat-fab,\r\n    .mat-mini-fab {\r\n      img {\r\n        margin-bottom: 2px;\r\n      }\r\n    }\r\n\r\n    .sticky {\r\n      position: sticky;\r\n      top: 80px;\r\n    }\r\n\r\n    .scrollup-button {\r\n      margin:14px;\r\n\r\n      &--fixed {\r\n        position: fixed;\r\n        bottom: 16px;\r\n        right: 16px;\r\n      }\r\n    }    \r\n    `,\r\n  ],\r\n})\r\nexport class StartScreenComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 141
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "AboutmeTelecomComponent",
            "id": "component-AboutmeTelecomComponent-da2b96fe6198a8e2f2467b7277226c1814edbf8d1b36443a4c8869741a4679298bf491cf89ab11ab2a86f30b2cd5a45e93df74d6bf6c679815a659d02a238197",
            "file": "src/app/progress-bar/progress-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-aboutme-Telecom",
            "styleUrls": [],
            "styles": [],
            "template": "\n\n  <mat-progress-bar\n      [mode]=\"mode\"\n      [value]=\"value\"\n      [bufferValue]=\"bufferValue\"\n      [color]=\"color\">\n  </mat-progress-bar>\n\n\n  <div class=\"markdown\">\n  <markdown mermaid [src]=\"'../../assets/Telecom.md'\"></markdown>\n</div>\n\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bufferValue",
                    "defaultValue": "60",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n",
                    "description": "<p>ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode</p>\n",
                    "line": 221,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Color - primary (Theme color) | accent | warn\n",
                    "description": "<p>ProgressBar Color - primary (Theme color) | accent | warn</p>\n",
                    "line": 227,
                    "type": "ThemePalette",
                    "decorators": []
                },
                {
                    "name": "markdowncode",
                    "defaultValue": "`## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 230,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'indeterminate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 209,
                    "type": "ProgressBarMode",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "40",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n",
                    "description": "<p>ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes</p>\n",
                    "line": 215,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 207,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { ThemePalette } from '@angular/material/core';\r\nimport { ProgressBarMode } from '@angular/material/progress-bar';\r\n\r\n@Component({\r\n  selector: 'app-progress-bar',\r\n  templateUrl: './progress-bar.component.html',\r\n  styleUrls: ['./progress-bar.component.scss'],\r\n})\r\nexport class ProgressBarComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  /**\r\n   * ProgressBar mode - determinate | indeterminate | Buffer | Query\r\n   */\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-aboutme-Introduction',\r\n  template: `\r\n\r\n      \r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n\r\n    <div class=\"markdown\">\r\n      <markdown\r\n        class=\"variable-binding\"\r\n        [src]=\"'../../assets/Introduction.md'\"\r\n      ></markdown>\r\n    </div>\r\n  `,\r\n})\r\nexport class AboutmeIntroductionComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-aboutme-Lecturer',\r\n  template: `\r\n\r\n      \r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n    <div class=\"markdown\">\r\n    <markdown mermaid [src]=\"'../../assets/Lecturer.md'\"></markdown>\r\n  </div>\r\n\r\n  `,\r\n})\r\nexport class AboutmeLecturerComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-aboutme-Telecom',\r\n  template: `\r\n\r\n      \r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n\r\n    <div class=\"markdown\">\r\n    <markdown mermaid [src]=\"'../../assets/Telecom.md'\"></markdown>\r\n  </div>\r\n\r\n  `,\r\n})\r\nexport class AboutmeTelecomComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-aboutme-Development',\r\n  template: `\r\n\r\n      \r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n\r\n    <div class=\"markdown\">\r\n      <markdown\r\n        class=\"variable-binding\"\r\n        [src]=\"'../../assets/Development.md'\"\r\n      ></markdown>\r\n    </div>\r\n\r\n  `,\r\n})\r\nexport class AboutmeDevelopmentComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-aboutme-Testing',\r\n  template: `\r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n  <div class=\"markdown\">\r\n    <markdown mermaid [src]=\"'../../assets/Testing.md'\"></markdown>\r\n  </div>\r\n\r\n  <markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\r\n  [lineOffset]=\"5\">\r\n    \\`\\`\\`typescript\r\n    export function greetings(name: string): string &#123;\r\n      return 'Hello ' + name;\r\n    }\r\n    \\`\\`\\`\r\n  </markdown>\r\n\r\n\r\n  <markdown ngPreserveWhitespaces clipboard \r\n    commandLine\r\n    [prompt]=\"'PS C:\\Users\\Chris>'\"\r\n    [filterOutput]=\"'(out)'\">\r\n    \\`\\`\\` powershell\r\n    Get-Date\r\n    (out)\r\n    (ut)Sunday, November 7, 2021 8:19:21 PM\r\n    (out)\r\n    \\`\\`\\`\r\n  </markdown>\r\n\r\n  <div class=\"footer\">\r\n    <mat-divider></mat-divider>\r\n    <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\r\n      Crafted with :heart: by **jfcere** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/jfcere)\r\n    </markdown>\r\n  </div>\r\n\r\n  `,\r\n  styles: [\r\n    `\r\n    .footer {\r\n      margin: 32px 0 8px;\r\n\r\n      &-text {\r\n        display: block;\r\n        font-size: 13px;\r\n        padding-top: 4px;\r\n      }\r\n    }\r\n\r\n    .mat-fab,\r\n    .mat-mini-fab {\r\n      img {\r\n        margin-bottom: 2px;\r\n      }\r\n    }\r\n\r\n    .sticky {\r\n      position: sticky;\r\n      top: 80px;\r\n    }\r\n\r\n    .scrollup-button {\r\n      margin:14px;\r\n\r\n      &--fixed {\r\n        position: fixed;\r\n        bottom: 16px;\r\n        right: 16px;\r\n      }\r\n    }    \r\n    `,\r\n  ],\r\n})\r\nexport class AboutmeTestingComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-startscreen',\r\n  template: `\r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n  <div class=\"markdown\">\r\n    <markdown mermaid [src]=\"'../../assets/Testing.md'\"></markdown>\r\n  </div>\r\n\r\n  <div class=\"markdown\">\r\n      <markdown\r\n        [src]=\"'../../assets/Introduction.md'\"\r\n      ></markdown>\r\n    </div>\r\n\r\n  <div class=\"footer\">\r\n    <mat-divider></mat-divider>\r\n    <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\r\n      Crafted with :heart: by **jfcere** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/jfcere)\r\n    </markdown>\r\n  </div>\r\n\r\n  `,\r\n  styles: [\r\n    `\r\n    .footer {\r\n      margin: 32px 0 8px;\r\n\r\n      &-text {\r\n        display: block;\r\n        font-size: 13px;\r\n        padding-top: 4px;\r\n      }\r\n    }\r\n\r\n    .mat-fab,\r\n    .mat-mini-fab {\r\n      img {\r\n        margin-bottom: 2px;\r\n      }\r\n    }\r\n\r\n    .sticky {\r\n      position: sticky;\r\n      top: 80px;\r\n    }\r\n\r\n    .scrollup-button {\r\n      margin:14px;\r\n\r\n      &--fixed {\r\n        position: fixed;\r\n        bottom: 16px;\r\n        right: 16px;\r\n      }\r\n    }    \r\n    `,\r\n  ],\r\n})\r\nexport class StartScreenComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 204
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "AboutmeTestingComponent",
            "id": "component-AboutmeTestingComponent-da2b96fe6198a8e2f2467b7277226c1814edbf8d1b36443a4c8869741a4679298bf491cf89ab11ab2a86f30b2cd5a45e93df74d6bf6c679815a659d02a238197",
            "file": "src/app/progress-bar/progress-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-aboutme-Testing",
            "styleUrls": [],
            "styles": [
                "\n    .footer {\n      margin: 32px 0 8px;\n\n      &-text {\n        display: block;\n        font-size: 13px;\n        padding-top: 4px;\n      }\n    }\n\n    .mat-fab,\n    .mat-mini-fab {\n      img {\n        margin-bottom: 2px;\n      }\n    }\n\n    .sticky {\n      position: sticky;\n      top: 80px;\n    }\n\n    .scrollup-button {\n      margin:14px;\n\n      &--fixed {\n        position: fixed;\n        bottom: 16px;\n        right: 16px;\n      }\n    }    \n    "
            ],
            "template": "  <mat-progress-bar\n      [mode]=\"mode\"\n      [value]=\"value\"\n      [bufferValue]=\"bufferValue\"\n      [color]=\"color\">\n  </mat-progress-bar>\n\n<div class=\"markdown\">\n  <markdown mermaid [src]=\"'../../assets/Testing.md'\"></markdown>\n</div>\n\n<markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\n[lineOffset]=\"5\">\n  ```typescript\n  export function greetings(name: string): string &#123;\n    return 'Hello ' + name;\n  }\n  ```\n</markdown>\n\n\n<markdown ngPreserveWhitespaces clipboard\n  commandLine\n  [prompt]=\"'PS C:UsersChris>'\"\n  [filterOutput]=\"'(out)'\">\n  ``` powershell\n  Get-Date\n  (out)\n  (ut)Sunday, November 7, 2021 8:19:21 PM\n  (out)\n  ```\n</markdown>\n\n<div class=\"footer\">\n  <mat-divider></mat-divider>\n  <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\n    Crafted with :heart: by **jfcere** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/jfcere)\n  </markdown>\n</div>\n\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bufferValue",
                    "defaultValue": "60",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n",
                    "description": "<p>ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode</p>\n",
                    "line": 411,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Color - primary (Theme color) | accent | warn\n",
                    "description": "<p>ProgressBar Color - primary (Theme color) | accent | warn</p>\n",
                    "line": 417,
                    "type": "ThemePalette",
                    "decorators": []
                },
                {
                    "name": "markdowncode",
                    "defaultValue": "`## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 420,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'indeterminate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 399,
                    "type": "ProgressBarMode",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "40",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n",
                    "description": "<p>ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes</p>\n",
                    "line": 405,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 397,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { ThemePalette } from '@angular/material/core';\r\nimport { ProgressBarMode } from '@angular/material/progress-bar';\r\n\r\n@Component({\r\n  selector: 'app-progress-bar',\r\n  templateUrl: './progress-bar.component.html',\r\n  styleUrls: ['./progress-bar.component.scss'],\r\n})\r\nexport class ProgressBarComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  /**\r\n   * ProgressBar mode - determinate | indeterminate | Buffer | Query\r\n   */\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-aboutme-Introduction',\r\n  template: `\r\n\r\n      \r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n\r\n    <div class=\"markdown\">\r\n      <markdown\r\n        class=\"variable-binding\"\r\n        [src]=\"'../../assets/Introduction.md'\"\r\n      ></markdown>\r\n    </div>\r\n  `,\r\n})\r\nexport class AboutmeIntroductionComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-aboutme-Lecturer',\r\n  template: `\r\n\r\n      \r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n    <div class=\"markdown\">\r\n    <markdown mermaid [src]=\"'../../assets/Lecturer.md'\"></markdown>\r\n  </div>\r\n\r\n  `,\r\n})\r\nexport class AboutmeLecturerComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-aboutme-Telecom',\r\n  template: `\r\n\r\n      \r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n\r\n    <div class=\"markdown\">\r\n    <markdown mermaid [src]=\"'../../assets/Telecom.md'\"></markdown>\r\n  </div>\r\n\r\n  `,\r\n})\r\nexport class AboutmeTelecomComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-aboutme-Development',\r\n  template: `\r\n\r\n      \r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n\r\n    <div class=\"markdown\">\r\n      <markdown\r\n        class=\"variable-binding\"\r\n        [src]=\"'../../assets/Development.md'\"\r\n      ></markdown>\r\n    </div>\r\n\r\n  `,\r\n})\r\nexport class AboutmeDevelopmentComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-aboutme-Testing',\r\n  template: `\r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n  <div class=\"markdown\">\r\n    <markdown mermaid [src]=\"'../../assets/Testing.md'\"></markdown>\r\n  </div>\r\n\r\n  <markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\r\n  [lineOffset]=\"5\">\r\n    \\`\\`\\`typescript\r\n    export function greetings(name: string): string &#123;\r\n      return 'Hello ' + name;\r\n    }\r\n    \\`\\`\\`\r\n  </markdown>\r\n\r\n\r\n  <markdown ngPreserveWhitespaces clipboard \r\n    commandLine\r\n    [prompt]=\"'PS C:\\Users\\Chris>'\"\r\n    [filterOutput]=\"'(out)'\">\r\n    \\`\\`\\` powershell\r\n    Get-Date\r\n    (out)\r\n    (ut)Sunday, November 7, 2021 8:19:21 PM\r\n    (out)\r\n    \\`\\`\\`\r\n  </markdown>\r\n\r\n  <div class=\"footer\">\r\n    <mat-divider></mat-divider>\r\n    <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\r\n      Crafted with :heart: by **jfcere** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/jfcere)\r\n    </markdown>\r\n  </div>\r\n\r\n  `,\r\n  styles: [\r\n    `\r\n    .footer {\r\n      margin: 32px 0 8px;\r\n\r\n      &-text {\r\n        display: block;\r\n        font-size: 13px;\r\n        padding-top: 4px;\r\n      }\r\n    }\r\n\r\n    .mat-fab,\r\n    .mat-mini-fab {\r\n      img {\r\n        margin-bottom: 2px;\r\n      }\r\n    }\r\n\r\n    .sticky {\r\n      position: sticky;\r\n      top: 80px;\r\n    }\r\n\r\n    .scrollup-button {\r\n      margin:14px;\r\n\r\n      &--fixed {\r\n        position: fixed;\r\n        bottom: 16px;\r\n        right: 16px;\r\n      }\r\n    }    \r\n    `,\r\n  ],\r\n})\r\nexport class AboutmeTestingComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-startscreen',\r\n  template: `\r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n  <div class=\"markdown\">\r\n    <markdown mermaid [src]=\"'../../assets/Testing.md'\"></markdown>\r\n  </div>\r\n\r\n  <div class=\"markdown\">\r\n      <markdown\r\n        [src]=\"'../../assets/Introduction.md'\"\r\n      ></markdown>\r\n    </div>\r\n\r\n  <div class=\"footer\">\r\n    <mat-divider></mat-divider>\r\n    <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\r\n      Crafted with :heart: by **jfcere** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/jfcere)\r\n    </markdown>\r\n  </div>\r\n\r\n  `,\r\n  styles: [\r\n    `\r\n    .footer {\r\n      margin: 32px 0 8px;\r\n\r\n      &-text {\r\n        display: block;\r\n        font-size: 13px;\r\n        padding-top: 4px;\r\n      }\r\n    }\r\n\r\n    .mat-fab,\r\n    .mat-mini-fab {\r\n      img {\r\n        margin-bottom: 2px;\r\n      }\r\n    }\r\n\r\n    .sticky {\r\n      position: sticky;\r\n      top: 80px;\r\n    }\r\n\r\n    .scrollup-button {\r\n      margin:14px;\r\n\r\n      &--fixed {\r\n        position: fixed;\r\n        bottom: 16px;\r\n        right: 16px;\r\n      }\r\n    }    \r\n    `,\r\n  ],\r\n})\r\nexport class StartScreenComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .footer {\n      margin: 32px 0 8px;\n\n      &-text {\n        display: block;\n        font-size: 13px;\n        padding-top: 4px;\n      }\n    }\n\n    .mat-fab,\n    .mat-mini-fab {\n      img {\n        margin-bottom: 2px;\n      }\n    }\n\n    .sticky {\n      position: sticky;\n      top: 80px;\n    }\n\n    .scrollup-button {\n      margin:14px;\n\n      &--fixed {\n        position: fixed;\n        bottom: 16px;\n        right: 16px;\n      }\n    }    \n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 394
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-d9c5d3bdf08ba8ee0c41cb86e9823ab1e52bd16ac09169af7f8d520943c5ca8ebf4ad5a6836c12804bd8f8700bd300bda880d0b5ac05c944041f8e17c0edbd5a",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "Inputtems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "TemplateRef<any>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "greet",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'greet', {static: true}"
                        }
                    ]
                },
                {
                    "name": "markdowncode",
                    "defaultValue": "`## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "tems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "title",
                    "defaultValue": "'AngularStarter140103'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit,ViewChild, TemplateRef, AfterContentInit, Input} from '@angular/core';\nimport mermaid from 'mermaid';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit, AfterContentInit {\n\n  @ViewChild('greet', { static: true })\n  greet!: TemplateRef<any>;\n  @Input()\n  Inputtems!: TemplateRef<any>;\n  tems!: TemplateRef<any>;\n  \n\n  title = 'AngularStarter140103';\n\n  markdowncode = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n\n\n\n  ngOnInit(): void {\n    mermaid.initialize({\n      startOnLoad: true\n    });\n  }\n\n  ngAfterContentInit () {\n    this.tems = this.Inputtems;\n  }\n\n\n}\n\n\n/**\n <markdown class=\"variable-binding\" [data]=\"markdowncode\"></markdown>\n<div class=\"markdown\">\n  <markdown mermaid [src]=\"'../assets/myfile.md'\"></markdown>\n</div>\n<pre class=\"mermaid\">\n  sequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n</pre>\n */",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit",
                "AfterContentInit"
            ],
            "templateData": "<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\n<div fxLayout=\"row\" fxLayoutAlign=\"center\" fxLayoutGap=\"10vw\">\n  <mat-slider fxFlex=\"10vw\" min=\"1\" max=\"100\" step=\"1\" value=\"50\"></mat-slider>\n  <mat-slider fxFlex=\"10vw\" min=\"1\" max=\"100\" step=\"1\" value=\"50\"></mat-slider>\n</div>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\n\n<h1>TaskOhers</h1>\n<markdown class=\"variable-binding\" [data]=\"markdowncode\"></markdown>\n<div class=\"markdown\">\n  <markdown mermaid [src]=\"'../assets/myfile.md'\"></markdown>\n</div>\n<pre class=\"mermaid\">\n  sequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n</pre>\n\n<ng-template #greet let-person><span>Hello {{person}} </span></ng-template>\n<ng-template #eng let-name><span>Hello {{name}}!</span></ng-template>\n<ng-template #svk let-person=\"localSk\"><span>Ahoj {{person}}!</span></ng-template>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\n<ng-container [ngTemplateOutlet]=\"tems\"> </ng-container>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-8d0b26788a1c8bdf115db2f145c09d3b3bbac643722b3b9286c5bc61abb4505d9cc612c6774d33f3ec3bd8bb6d5e3ca1374e117840820e68f0244390aa2f404c",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 703,
                            "end": 716,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 704,
                                "end": 712,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-20f594b81311fa0da5183beb9ff89ad6c8fd0bed36e148df900da741fa5154428b86e5185b9abf822d09b2746b84e273f57cf31b88dad8eebf52a36ac17c1d50-1",
            "file": "src/stories/angular-demo/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button-component",
            "styleUrls": [],
            "styles": [
                "\n      button {\n        border: 1px solid #eee;\n        border-radius: 3px;\n        background-color: #ffffff;\n        cursor: pointer;\n        font-size: 15px;\n        padding: 3px 10px;\n        margin: 10px;\n      }\n    "
            ],
            "template": "<button (click)=\"onClick.emit($event)\">{{ text }}</button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "text",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-button-component',\r\n  template: ` <button (click)=\"onClick.emit($event)\">{{ text }}</button> `,\r\n  styles: [\r\n    `\r\n      button {\r\n        border: 1px solid #eee;\r\n        border-radius: 3px;\r\n        background-color: #ffffff;\r\n        cursor: pointer;\r\n        font-size: 15px;\r\n        padding: 3px 10px;\r\n        margin: 10px;\r\n      }\r\n    `,\r\n  ],\r\n})\r\nexport default class ButtonComponent {\r\n  @Input()\r\n  text = '';\r\n\r\n  @Output()\r\n  onClick = new EventEmitter<any>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      button {\n        border: 1px solid #eee;\n        border-radius: 3px;\n        background-color: #ffffff;\n        cursor: pointer;\n        font-size: 15px;\n        padding: 3px 10px;\n        margin: 10px;\n      }\n    \n",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ButtonComponent-1"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-a557eec14f72c438a8033301f4d6ce023e0a1844a3b06ec2b38794a612acc31735ae78a5ee10071b230c8c20d699eb914554e69d07ade54adb371da8efb464cc",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n\n.welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "InboxScreenComponent",
            "id": "component-InboxScreenComponent-bb3d219e1c7a2547703b95b69d3353cf7646e620e19d2a03f0d8ab4020ef0818d5303d9cdf48f9d0296ce7469de4d245dd6726cbeed0730b5128b4f48fd91e2f",
            "file": "src/app/components/inbox-screen.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-inbox-screen",
            "styleUrls": [],
            "styles": [],
            "template": "    <!--app-pure-inbox-screen [error]=\"error$ | async\"></app-pure-inbox-screen-->\n    <markdown class=\"variable-binding\" [data]=\"markdowncode\"></markdown>\n<div class=\"markdown\">\n  <markdown mermaid [src]=\"'../../assets/myfile.md'\"></markdown>\n</div>\n\n<div class=\"markdown\">\n  <markdown [src]=\"'../../assets/myfilemark.md'\"></markdown>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "markdowncode",
                    "defaultValue": "`## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "title",
                    "defaultValue": "'AngularStarter140103'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n//import { Store } from '@ngxs/store';\r\nimport { Observable } from 'rxjs';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-inbox-screen',\r\n  template: `\r\n    <!--app-pure-inbox-screen [error]=\"error$ | async\"></app-pure-inbox-screen-->\r\n    <markdown class=\"variable-binding\" [data]=\"markdowncode\"></markdown>\r\n<div class=\"markdown\">\r\n  <markdown mermaid [src]=\"'../../assets/myfile.md'\"></markdown>\r\n</div>\r\n\r\n<div class=\"markdown\">\r\n  <markdown [src]=\"'../../assets/myfilemark.md'\"></markdown>\r\n</div>\r\n  `\r\n})\r\nexport class InboxScreenComponent  implements OnInit{\r\n  //error$: Observable<boolean>;\r\n  //constructor(private store: Store) {\r\n    //this.error$ = store.select((state) => state.taskbox.error);\r\n  //}\r\n\r\n  title = 'AngularStarter140103';\r\n  markdowncode = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-7126d8c2607c946741c651482413b43feb72b2d63cac9d3ac173fde206a5e635eb4cdbf7ca7ac9327c7d4d05cf7ef619144c34c11609ad677081d0ee4e855064",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "ProgressBarComponent",
            "id": "component-ProgressBarComponent-da2b96fe6198a8e2f2467b7277226c1814edbf8d1b36443a4c8869741a4679298bf491cf89ab11ab2a86f30b2cd5a45e93df74d6bf6c679815a659d02a238197",
            "file": "src/app/progress-bar/progress-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-progress-bar",
            "styleUrls": [
                "./progress-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./progress-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bufferValue",
                    "defaultValue": "60",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n",
                    "description": "<p>ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode</p>\n",
                    "line": 31,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Color - primary (Theme color) | accent | warn\n",
                    "description": "<p>ProgressBar Color - primary (Theme color) | accent | warn</p>\n",
                    "line": 37,
                    "type": "ThemePalette",
                    "decorators": []
                },
                {
                    "name": "markdowncode",
                    "defaultValue": "`## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'indeterminate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar mode - determinate | indeterminate | Buffer | Query\n",
                    "description": "<p>ProgressBar mode - determinate | indeterminate | Buffer | Query</p>\n",
                    "line": 19,
                    "type": "ProgressBarMode",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "40",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n",
                    "description": "<p>ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes</p>\n",
                    "line": 25,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { ThemePalette } from '@angular/material/core';\r\nimport { ProgressBarMode } from '@angular/material/progress-bar';\r\n\r\n@Component({\r\n  selector: 'app-progress-bar',\r\n  templateUrl: './progress-bar.component.html',\r\n  styleUrls: ['./progress-bar.component.scss'],\r\n})\r\nexport class ProgressBarComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  /**\r\n   * ProgressBar mode - determinate | indeterminate | Buffer | Query\r\n   */\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-aboutme-Introduction',\r\n  template: `\r\n\r\n      \r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n\r\n    <div class=\"markdown\">\r\n      <markdown\r\n        class=\"variable-binding\"\r\n        [src]=\"'../../assets/Introduction.md'\"\r\n      ></markdown>\r\n    </div>\r\n  `,\r\n})\r\nexport class AboutmeIntroductionComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-aboutme-Lecturer',\r\n  template: `\r\n\r\n      \r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n    <div class=\"markdown\">\r\n    <markdown mermaid [src]=\"'../../assets/Lecturer.md'\"></markdown>\r\n  </div>\r\n\r\n  `,\r\n})\r\nexport class AboutmeLecturerComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-aboutme-Telecom',\r\n  template: `\r\n\r\n      \r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n\r\n    <div class=\"markdown\">\r\n    <markdown mermaid [src]=\"'../../assets/Telecom.md'\"></markdown>\r\n  </div>\r\n\r\n  `,\r\n})\r\nexport class AboutmeTelecomComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-aboutme-Development',\r\n  template: `\r\n\r\n      \r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n\r\n    <div class=\"markdown\">\r\n      <markdown\r\n        class=\"variable-binding\"\r\n        [src]=\"'../../assets/Development.md'\"\r\n      ></markdown>\r\n    </div>\r\n\r\n  `,\r\n})\r\nexport class AboutmeDevelopmentComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-aboutme-Testing',\r\n  template: `\r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n  <div class=\"markdown\">\r\n    <markdown mermaid [src]=\"'../../assets/Testing.md'\"></markdown>\r\n  </div>\r\n\r\n  <markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\r\n  [lineOffset]=\"5\">\r\n    \\`\\`\\`typescript\r\n    export function greetings(name: string): string &#123;\r\n      return 'Hello ' + name;\r\n    }\r\n    \\`\\`\\`\r\n  </markdown>\r\n\r\n\r\n  <markdown ngPreserveWhitespaces clipboard \r\n    commandLine\r\n    [prompt]=\"'PS C:\\Users\\Chris>'\"\r\n    [filterOutput]=\"'(out)'\">\r\n    \\`\\`\\` powershell\r\n    Get-Date\r\n    (out)\r\n    (ut)Sunday, November 7, 2021 8:19:21 PM\r\n    (out)\r\n    \\`\\`\\`\r\n  </markdown>\r\n\r\n  <div class=\"footer\">\r\n    <mat-divider></mat-divider>\r\n    <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\r\n      Crafted with :heart: by **jfcere** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/jfcere)\r\n    </markdown>\r\n  </div>\r\n\r\n  `,\r\n  styles: [\r\n    `\r\n    .footer {\r\n      margin: 32px 0 8px;\r\n\r\n      &-text {\r\n        display: block;\r\n        font-size: 13px;\r\n        padding-top: 4px;\r\n      }\r\n    }\r\n\r\n    .mat-fab,\r\n    .mat-mini-fab {\r\n      img {\r\n        margin-bottom: 2px;\r\n      }\r\n    }\r\n\r\n    .sticky {\r\n      position: sticky;\r\n      top: 80px;\r\n    }\r\n\r\n    .scrollup-button {\r\n      margin:14px;\r\n\r\n      &--fixed {\r\n        position: fixed;\r\n        bottom: 16px;\r\n        right: 16px;\r\n      }\r\n    }    \r\n    `,\r\n  ],\r\n})\r\nexport class AboutmeTestingComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-startscreen',\r\n  template: `\r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n  <div class=\"markdown\">\r\n    <markdown mermaid [src]=\"'../../assets/Testing.md'\"></markdown>\r\n  </div>\r\n\r\n  <div class=\"markdown\">\r\n      <markdown\r\n        [src]=\"'../../assets/Introduction.md'\"\r\n      ></markdown>\r\n    </div>\r\n\r\n  <div class=\"footer\">\r\n    <mat-divider></mat-divider>\r\n    <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\r\n      Crafted with :heart: by **jfcere** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/jfcere)\r\n    </markdown>\r\n  </div>\r\n\r\n  `,\r\n  styles: [\r\n    `\r\n    .footer {\r\n      margin: 32px 0 8px;\r\n\r\n      &-text {\r\n        display: block;\r\n        font-size: 13px;\r\n        padding-top: 4px;\r\n      }\r\n    }\r\n\r\n    .mat-fab,\r\n    .mat-mini-fab {\r\n      img {\r\n        margin-bottom: 2px;\r\n      }\r\n    }\r\n\r\n    .sticky {\r\n      position: sticky;\r\n      top: 80px;\r\n    }\r\n\r\n    .scrollup-button {\r\n      margin:14px;\r\n\r\n      &--fixed {\r\n        position: fixed;\r\n        bottom: 16px;\r\n        right: 16px;\r\n      }\r\n    }    \r\n    `,\r\n  ],\r\n})\r\nexport class StartScreenComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./progress-bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-progress-bar\r\n  [mode]=\"mode\"\r\n  [value]=\"value\"\r\n  [bufferValue]=\"bufferValue\"\r\n  [color]=\"color\"\r\n>\r\n</mat-progress-bar>\r\n\r\n<div class=\"markdown\">\r\n  <markdown mermaid [src]=\"'../../assets/myfile.md'\"></markdown>\r\n</div>\r\n\r\n<!--div class=\"markdown\">\r\n  <markdown\r\n    class=\"variable-binding\"\r\n    [src]=\"'../../assets/myfilemark.md'\"\r\n  ></markdown>\r\n</div-->\r\n"
        },
        {
            "name": "PureInboxScreenComponent",
            "id": "component-PureInboxScreenComponent-a676e1e8bbe0cd88f1822c581c958e89a283edd945d1e4f252ead68a34278a4f7df81031638981a2244553b511adc57a7cd7e792ba8a5a59da8da367513c0bc1",
            "file": "src/app/components/pure-inbox-screen.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pure-inbox-screen",
            "styleUrls": [],
            "styles": [],
            "template": "<div *ngIf=\"error\" class=\"page lists-show\">\n  <div class=\"wrapper-message\">\n    <span class=\"icon-face-sad\"></span>\n    <p class=\"title-message\">Oh no!</p>\n    <p class=\"subtitle-message\">Something went wrong</p>\n  </div>\n</div>\n\n<div *ngIf=\"!error\" class=\"page lists-show\">\n  <nav>\n    <h1 class=\"title-page\">Taskbox</h1>\n  </nav>\n  <app-task-list></app-task-list>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-pure-inbox-screen',\r\n  template: `\r\n    <div *ngIf=\"error\" class=\"page lists-show\">\r\n      <div class=\"wrapper-message\">\r\n        <span class=\"icon-face-sad\"></span>\r\n        <p class=\"title-message\">Oh no!</p>\r\n        <p class=\"subtitle-message\">Something went wrong</p>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!error\" class=\"page lists-show\">\r\n      <nav>\r\n        <h1 class=\"title-page\">Taskbox</h1>\r\n      </nav>\r\n      <app-task-list></app-task-list>\r\n    </div>\r\n  `,\r\n})\r\nexport class PureInboxScreenComponent {\r\n  @Input() error: any;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "PureTaskListComponent",
            "id": "component-PureTaskListComponent-891dd64089bd5d03933d69268d8e68d1d041fdc3f4d61f7a165f7b48c19f2103b900e3d98fa6d4c102250b310a8e4b42fd6a9cecdbe3369c0743536372a393a4",
            "file": "src/app/components/pure-task-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pure-task-list",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"list-items\">\n  <app-task\n    *ngFor=\"let task of tasksInOrder\"\n    [task]=\"task\"\n    (onArchiveTask)=\"onArchiveTask.emit($event)\"\n    (onPinTask)=\"onPinTask.emit($event)\"\n  >\n  </app-task>\n\n  <div\n    *ngIf=\"tasksInOrder.length === 0 && !loading\"\n    class=\"wrapper-message\"\n  >\n    <span class=\"icon-check\"></span>\n    <p class=\"title-message\">You have no tasks</p>\n    <p class=\"subtitle-message\">Sit back and relax</p>\n  </div>\n  <div *ngIf=\"loading\">\n    <div *ngFor=\"let i of [1, 2, 3, 4, 5, 6]\" class=\"loading-item\">\n      <span class=\"glow-checkbox\"></span>\n      <span class=\"glow-text\">\n        <span>Loading</span> <span>cool</span> <span>state</span>\n      </span>\n    </div>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tasks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "Task[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onArchiveTask",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onPinTask",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { Task } from '../models/task.model';\r\n\r\n@Component({\r\n  selector: 'app-pure-task-list',\r\n  template: `\r\n    <div class=\"list-items\">\r\n      <app-task\r\n        *ngFor=\"let task of tasksInOrder\"\r\n        [task]=\"task\"\r\n        (onArchiveTask)=\"onArchiveTask.emit($event)\"\r\n        (onPinTask)=\"onPinTask.emit($event)\"\r\n      >\r\n      </app-task>\r\n\r\n      <div\r\n        *ngIf=\"tasksInOrder.length === 0 && !loading\"\r\n        class=\"wrapper-message\"\r\n      >\r\n        <span class=\"icon-check\"></span>\r\n        <p class=\"title-message\">You have no tasks</p>\r\n        <p class=\"subtitle-message\">Sit back and relax</p>\r\n      </div>\r\n      <div *ngIf=\"loading\">\r\n        <div *ngFor=\"let i of [1, 2, 3, 4, 5, 6]\" class=\"loading-item\">\r\n          <span class=\"glow-checkbox\"></span>\r\n          <span class=\"glow-text\">\r\n            <span>Loading</span> <span>cool</span> <span>state</span>\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n})\r\nexport class PureTaskListComponent {\r\n  /**\r\n   * @ignore\r\n   * Component property to define ordering of tasks\r\n   */\r\n  tasksInOrder: Task[] = [];\r\n\r\n  @Input() loading = false;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onPinTask: EventEmitter<any> = new EventEmitter();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onArchiveTask: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Input()\r\n  set tasks(arr: Task[]) {\r\n    const initialTasks = [\r\n      ...arr.filter((t) => t.state === 'TASK_PINNED'),\r\n      ...arr.filter((t) => t.state !== 'TASK_PINNED'),\r\n    ];\r\n    const filteredTasks = initialTasks.filter(\r\n      (t) => t.state === 'TASK_INBOX' || t.state === 'TASK_PINNED'\r\n    );\r\n    this.tasksInOrder = filteredTasks.filter(\r\n      (t) => t.state === 'TASK_INBOX' || t.state === 'TASK_PINNED'\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "tasks": {
                    "name": "tasks",
                    "setSignature": {
                        "name": "tasks",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "arr",
                                "type": "Task[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 51,
                        "jsdoctags": [
                            {
                                "name": "arr",
                                "type": "Task[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "StackblitzComponent",
            "id": "component-StackblitzComponent-8c04e165dc34a4222229cb26646235634bc127b36a69192afad80d3b27f15b0ad3cd40f153d8bfb04719e7bb813d432950f75ed6145885285892e396fe133bfc",
            "file": "src/app/youtube/2022sept02/stackblitz.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-stackblitz",
            "styleUrls": [
                "./stackblitz.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./stackblitz.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bufferValue",
                    "defaultValue": "60",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n",
                    "description": "<p>ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode</p>\n",
                    "line": 27,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Color - primary (Theme color) | accent | warn\n",
                    "description": "<p>ProgressBar Color - primary (Theme color) | accent | warn</p>\n",
                    "line": 33,
                    "type": "ThemePalette",
                    "decorators": []
                },
                {
                    "name": "markdowncode",
                    "defaultValue": "`## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'indeterminate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "ProgressBarMode",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "40",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n",
                    "description": "<p>ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes</p>\n",
                    "line": 21,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, AfterContentInit, ViewChild, TemplateRef,  } from '@angular/core';\r\nimport { ThemePalette } from '@angular/material/core';\r\nimport { ProgressBarMode } from '@angular/material/progress-bar';\r\n@Component({\r\n  selector: 'app-stackblitz',\r\n  templateUrl: './stackblitz.component.html',\r\n  styleUrls: ['./stackblitz.component.scss']\r\n})\r\nexport class StackblitzComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-title',\r\n  template: `\r\n\r\n    <div fxLayout=\"column\">  \r\n      <div class=\"markdown\" fxLayoutAlign=\"center center\">\r\n        <markdown mermaid [src]=\"'../../assets/stackblitzTitle.md'\"></markdown>\r\n      </div>\r\n\r\n      <div class=\"footer\">\r\n        <mat-divider></mat-divider>\r\n          <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\r\n            Crafted with :heart: by **gmanojisaac** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/gmanoj.isaac)\r\n          </markdown>\r\n      </div>\r\n    </div>\r\n\r\n\r\n  `,\r\n  styles: [`\r\n  \r\n  .footer {\r\n        margin: 32px 0 8px;\r\n  \r\n        &-text {\r\n          display: block;\r\n          font-size: 13px;\r\n          padding-top: 4px;\r\n        }\r\n      }\r\n  \r\n      .mat-fab,\r\n      .mat-mini-fab {\r\n        img {\r\n          margin-bottom: 2px;\r\n        }\r\n      }\r\n  \r\n      .sticky {\r\n        position: sticky;\r\n        top: 80px;\r\n      }\r\n  \r\n      .scrollup-button {\r\n        margin:14px;\r\n  \r\n        &--fixed {\r\n          position: fixed;\r\n          bottom: 16px;\r\n          right: 16px;\r\n        }\r\n      }  \r\n  `]\r\n})\r\nexport class StackblitzTitleComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-runangular',\r\n  templateUrl: './stackblitz.component.html',\r\n  styleUrls: ['./stackblitz.component.scss']\r\n})\r\nexport class StackblitzRunAngularComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-storybook',\r\n  templateUrl: './stackblitz.component.html',\r\n  styleUrls: ['./stackblitz.component.scss']\r\n})\r\nexport class StackblitzStorybookComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-updatePR',\r\n  templateUrl: './stackblitz.component.html',\r\n  styleUrls: ['./stackblitz.component.scss']\r\n})\r\nexport class StackblitzUpdatePRComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-startpage',\r\n  template: `\r\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\r\n<div fxLayout=\"row\" fxLayoutAlign=\"center\" fxLayoutGap=\"10vw\">\r\n  <mat-slider fxFlex=\"10vw\" min=\"1\" max=\"100\" step=\"1\" value=\"50\"></mat-slider>\r\n  <mat-slider fxFlex=\"10vw\" min=\"1\" max=\"100\" step=\"1\" value=\"50\"></mat-slider>\r\n</div>\r\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\r\n\r\n<h1>TaskOhers</h1>\r\n<!--markdown class=\"variable-binding\" [data]=\"markdowncode\"></markdown-->\r\n\r\n\r\n<div [innerHTML]=\"markdowncode | language : 'python' | markdown\"><div>\r\n\r\n<markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\r\n[lineOffset]=\"5\" [src]=\"'../../assets/stackblitzTypescript.md'\"></markdown>\r\n\r\n<div class=\"markdown\">\r\n  <markdown mermaid [src]=\"'../assets/myfile.md'\"></markdown>\r\n</div>\r\n\r\n<markdown mermaid >\r\n  <pre class=\"mermaid\">\r\n  sequenceDiagram\r\n    Alice->>John: Hello John, how are you?\r\n    John-->>Alice: Great!\r\n</pre>\r\n</markdown>\r\n  `,\r\n  styles: [`\r\n  \r\n  `]\r\n})\r\nexport class StackblitzStartPageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `\\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  <h5>\r\n    angular@{{ angularVersion }} | ngx-markdown@{{ ngxMarkdownVersion }}\r\n  </h5>\r\n  <br>\r\n  \r\n  <div markdown ngPreserveWhitespaces>{{ markdown }}</div>\r\n  <!-- <div markdown [data]=\"markdown\"></div> -->\r\n  \\`\\`\\`\r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n    - Unordered list\r\n    - Another unordered bullet point\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max!!!`;\r\n\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-testpage',\r\n  template: `\r\n<!--markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\r\n[lineOffset]=\"5\" [src]=\"'../../assets/stackblitzTypescript.md'\"></markdown-->\r\n\r\n\r\n\r\n<div markdown ngPreserveWhitespaces>{{ markdowncode }}</div>\r\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\r\nDown here\r\n<ng-template #greet let-person><span>Hello {{person}} </span></ng-template>\r\n<ng-template #eng let-name><span>Hello {{name}}!</span></ng-template>\r\n<ng-template #svk let-person=\"localSk\"><span>Ahoj {{person}}!</span></ng-template>\r\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\r\n<ng-container [ngTemplateOutlet]=\"tems\"> </ng-container>\r\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\r\nHere\r\n  `,\r\n  styles: [`\r\n  \r\n  `]\r\n})\r\nexport class StackblitzStartTestComponent implements OnInit, AfterContentInit {\r\n\r\n  constructor() { }\r\n\r\n  @ViewChild('greet', { static: true })\r\n  greet!: TemplateRef<any>;\r\n  @ViewChild('svk', { static: true })\r\n  svk!: TemplateRef<any>;\r\n  @ViewChild('eng', { static: true })\r\n  eng!: TemplateRef<any>;\r\n\r\n  @Input()\r\n  Inputtems!: TemplateRef<any>;\r\n  tems!: TemplateRef<any>;\r\n \r\n\r\n\r\n  @Input()\r\n  myselectedtemp: string= 'first';\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`powershell\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n  ngOnInit(): void { }\r\n  ngAfterContentInit () {\r\n\r\nswitch (this.myselectedtemp) {\r\n  case 'greet':\r\n    this.tems = this.greet;\r\n    break;\r\n  case 'svk':\r\n    this.tems = this.svk;\r\n    break;\r\n    case 'eng':\r\n      this.tems = this.eng;\r\n      break;\r\n  }\r\n\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-mermaidinline',\r\n  template: `\r\n\r\n<markdown mermaid >\r\n  <pre class=\"mermaid\">\r\n  sequenceDiagram\r\n    Alice->>John: Hello John, how are you?\r\n    John-->>Alice: Great!\r\n</pre>\r\n</markdown>\r\n  `,\r\n  styles: [`\r\n  \r\n  `]\r\n})\r\nexport class StackblitzMermaidInlineComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n    .footer {\r\n        margin: 32px 0 8px;\r\n  \r\n        &-text {\r\n          display: block;\r\n          font-size: 13px;\r\n          padding-top: 4px;\r\n        }\r\n      }\r\n  \r\n      .mat-fab,\r\n      .mat-mini-fab {\r\n        img {\r\n          margin-bottom: 2px;\r\n        }\r\n      }\r\n  \r\n      .sticky {\r\n        position: sticky;\r\n        top: 80px;\r\n      }\r\n  \r\n      .scrollup-button {\r\n        margin:14px;\r\n  \r\n        &--fixed {\r\n          position: fixed;\r\n          bottom: 16px;\r\n          right: 16px;\r\n        }\r\n      }  ",
                    "styleUrl": "./stackblitz.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!--\n\n<mat-progress-bar \n[mode]=\"mode\"\n[value]=\"value\"\n[bufferValue]=\"bufferValue\"\n[color]=\"color\">\n</mat-progress-bar>\n\n<div class=\"markdown\">\n<markdown mermaid [src]=\"'../../assets/Testing.md'\"></markdown>\n</div>\n\n<markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\n[lineOffset]=\"5\" [src]=\"'../../assets/stackblitzTypescript.md'\"></markdown>\n\n<markdown ngPreserveWhitespaces clipboard \ncommandLine\n[prompt]=\"'PS C:\\Users\\Chris>'\"\n[filterOutput]=\"'(out)'\" [src]=\"'../../assets/stackblitzPowershell.md'\"></markdown>\n\n<div class=\"markdown\">\n    <markdown mermaid [src]=\"'../../assets/stackblitzMermaid.md'\"></markdown>\n  </div>\n  \n<div class=\"footer\">\n<mat-divider></mat-divider>\n<markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\nCrafted with :heart: by **jfcere** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/jfcere)\n</markdown>\n</div>\n-->\n<div class=\"markdown\" fxFlexOffset=\"25vw\" fxLayout=\"row\">\n    <markdown mermaid [src]=\"'../../assets/stackblitzMermaid.md'\"></markdown>\n  </div>\n"
        },
        {
            "name": "StackblitzRunAngularComponent",
            "id": "component-StackblitzRunAngularComponent-8c04e165dc34a4222229cb26646235634bc127b36a69192afad80d3b27f15b0ad3cd40f153d8bfb04719e7bb813d432950f75ed6145885285892e396fe133bfc",
            "file": "src/app/youtube/2022sept02/stackblitz.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-stackblitz-runangular",
            "styleUrls": [
                "./stackblitz.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./stackblitz.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bufferValue",
                    "defaultValue": "60",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n",
                    "description": "<p>ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode</p>\n",
                    "line": 178,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Color - primary (Theme color) | accent | warn\n",
                    "description": "<p>ProgressBar Color - primary (Theme color) | accent | warn</p>\n",
                    "line": 184,
                    "type": "ThemePalette",
                    "decorators": []
                },
                {
                    "name": "markdowncode",
                    "defaultValue": "`## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 187,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'indeterminate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 166,
                    "type": "ProgressBarMode",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "40",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n",
                    "description": "<p>ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes</p>\n",
                    "line": 172,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, AfterContentInit, ViewChild, TemplateRef,  } from '@angular/core';\r\nimport { ThemePalette } from '@angular/material/core';\r\nimport { ProgressBarMode } from '@angular/material/progress-bar';\r\n@Component({\r\n  selector: 'app-stackblitz',\r\n  templateUrl: './stackblitz.component.html',\r\n  styleUrls: ['./stackblitz.component.scss']\r\n})\r\nexport class StackblitzComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-title',\r\n  template: `\r\n\r\n    <div fxLayout=\"column\">  \r\n      <div class=\"markdown\" fxLayoutAlign=\"center center\">\r\n        <markdown mermaid [src]=\"'../../assets/stackblitzTitle.md'\"></markdown>\r\n      </div>\r\n\r\n      <div class=\"footer\">\r\n        <mat-divider></mat-divider>\r\n          <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\r\n            Crafted with :heart: by **gmanojisaac** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/gmanoj.isaac)\r\n          </markdown>\r\n      </div>\r\n    </div>\r\n\r\n\r\n  `,\r\n  styles: [`\r\n  \r\n  .footer {\r\n        margin: 32px 0 8px;\r\n  \r\n        &-text {\r\n          display: block;\r\n          font-size: 13px;\r\n          padding-top: 4px;\r\n        }\r\n      }\r\n  \r\n      .mat-fab,\r\n      .mat-mini-fab {\r\n        img {\r\n          margin-bottom: 2px;\r\n        }\r\n      }\r\n  \r\n      .sticky {\r\n        position: sticky;\r\n        top: 80px;\r\n      }\r\n  \r\n      .scrollup-button {\r\n        margin:14px;\r\n  \r\n        &--fixed {\r\n          position: fixed;\r\n          bottom: 16px;\r\n          right: 16px;\r\n        }\r\n      }  \r\n  `]\r\n})\r\nexport class StackblitzTitleComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-runangular',\r\n  templateUrl: './stackblitz.component.html',\r\n  styleUrls: ['./stackblitz.component.scss']\r\n})\r\nexport class StackblitzRunAngularComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-storybook',\r\n  templateUrl: './stackblitz.component.html',\r\n  styleUrls: ['./stackblitz.component.scss']\r\n})\r\nexport class StackblitzStorybookComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-updatePR',\r\n  templateUrl: './stackblitz.component.html',\r\n  styleUrls: ['./stackblitz.component.scss']\r\n})\r\nexport class StackblitzUpdatePRComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-startpage',\r\n  template: `\r\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\r\n<div fxLayout=\"row\" fxLayoutAlign=\"center\" fxLayoutGap=\"10vw\">\r\n  <mat-slider fxFlex=\"10vw\" min=\"1\" max=\"100\" step=\"1\" value=\"50\"></mat-slider>\r\n  <mat-slider fxFlex=\"10vw\" min=\"1\" max=\"100\" step=\"1\" value=\"50\"></mat-slider>\r\n</div>\r\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\r\n\r\n<h1>TaskOhers</h1>\r\n<!--markdown class=\"variable-binding\" [data]=\"markdowncode\"></markdown-->\r\n\r\n\r\n<div [innerHTML]=\"markdowncode | language : 'python' | markdown\"><div>\r\n\r\n<markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\r\n[lineOffset]=\"5\" [src]=\"'../../assets/stackblitzTypescript.md'\"></markdown>\r\n\r\n<div class=\"markdown\">\r\n  <markdown mermaid [src]=\"'../assets/myfile.md'\"></markdown>\r\n</div>\r\n\r\n<markdown mermaid >\r\n  <pre class=\"mermaid\">\r\n  sequenceDiagram\r\n    Alice->>John: Hello John, how are you?\r\n    John-->>Alice: Great!\r\n</pre>\r\n</markdown>\r\n  `,\r\n  styles: [`\r\n  \r\n  `]\r\n})\r\nexport class StackblitzStartPageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `\\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  <h5>\r\n    angular@{{ angularVersion }} | ngx-markdown@{{ ngxMarkdownVersion }}\r\n  </h5>\r\n  <br>\r\n  \r\n  <div markdown ngPreserveWhitespaces>{{ markdown }}</div>\r\n  <!-- <div markdown [data]=\"markdown\"></div> -->\r\n  \\`\\`\\`\r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n    - Unordered list\r\n    - Another unordered bullet point\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max!!!`;\r\n\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-testpage',\r\n  template: `\r\n<!--markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\r\n[lineOffset]=\"5\" [src]=\"'../../assets/stackblitzTypescript.md'\"></markdown-->\r\n\r\n\r\n\r\n<div markdown ngPreserveWhitespaces>{{ markdowncode }}</div>\r\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\r\nDown here\r\n<ng-template #greet let-person><span>Hello {{person}} </span></ng-template>\r\n<ng-template #eng let-name><span>Hello {{name}}!</span></ng-template>\r\n<ng-template #svk let-person=\"localSk\"><span>Ahoj {{person}}!</span></ng-template>\r\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\r\n<ng-container [ngTemplateOutlet]=\"tems\"> </ng-container>\r\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\r\nHere\r\n  `,\r\n  styles: [`\r\n  \r\n  `]\r\n})\r\nexport class StackblitzStartTestComponent implements OnInit, AfterContentInit {\r\n\r\n  constructor() { }\r\n\r\n  @ViewChild('greet', { static: true })\r\n  greet!: TemplateRef<any>;\r\n  @ViewChild('svk', { static: true })\r\n  svk!: TemplateRef<any>;\r\n  @ViewChild('eng', { static: true })\r\n  eng!: TemplateRef<any>;\r\n\r\n  @Input()\r\n  Inputtems!: TemplateRef<any>;\r\n  tems!: TemplateRef<any>;\r\n \r\n\r\n\r\n  @Input()\r\n  myselectedtemp: string= 'first';\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`powershell\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n  ngOnInit(): void { }\r\n  ngAfterContentInit () {\r\n\r\nswitch (this.myselectedtemp) {\r\n  case 'greet':\r\n    this.tems = this.greet;\r\n    break;\r\n  case 'svk':\r\n    this.tems = this.svk;\r\n    break;\r\n    case 'eng':\r\n      this.tems = this.eng;\r\n      break;\r\n  }\r\n\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-mermaidinline',\r\n  template: `\r\n\r\n<markdown mermaid >\r\n  <pre class=\"mermaid\">\r\n  sequenceDiagram\r\n    Alice->>John: Hello John, how are you?\r\n    John-->>Alice: Great!\r\n</pre>\r\n</markdown>\r\n  `,\r\n  styles: [`\r\n  \r\n  `]\r\n})\r\nexport class StackblitzMermaidInlineComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n    .footer {\r\n        margin: 32px 0 8px;\r\n  \r\n        &-text {\r\n          display: block;\r\n          font-size: 13px;\r\n          padding-top: 4px;\r\n        }\r\n      }\r\n  \r\n      .mat-fab,\r\n      .mat-mini-fab {\r\n        img {\r\n          margin-bottom: 2px;\r\n        }\r\n      }\r\n  \r\n      .sticky {\r\n        position: sticky;\r\n        top: 80px;\r\n      }\r\n  \r\n      .scrollup-button {\r\n        margin:14px;\r\n  \r\n        &--fixed {\r\n          position: fixed;\r\n          bottom: 16px;\r\n          right: 16px;\r\n        }\r\n      }  ",
                    "styleUrl": "./stackblitz.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 160
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!--\n\n<mat-progress-bar \n[mode]=\"mode\"\n[value]=\"value\"\n[bufferValue]=\"bufferValue\"\n[color]=\"color\">\n</mat-progress-bar>\n\n<div class=\"markdown\">\n<markdown mermaid [src]=\"'../../assets/Testing.md'\"></markdown>\n</div>\n\n<markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\n[lineOffset]=\"5\" [src]=\"'../../assets/stackblitzTypescript.md'\"></markdown>\n\n<markdown ngPreserveWhitespaces clipboard \ncommandLine\n[prompt]=\"'PS C:\\Users\\Chris>'\"\n[filterOutput]=\"'(out)'\" [src]=\"'../../assets/stackblitzPowershell.md'\"></markdown>\n\n<div class=\"markdown\">\n    <markdown mermaid [src]=\"'../../assets/stackblitzMermaid.md'\"></markdown>\n  </div>\n  \n<div class=\"footer\">\n<mat-divider></mat-divider>\n<markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\nCrafted with :heart: by **jfcere** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/jfcere)\n</markdown>\n</div>\n-->\n<div class=\"markdown\" fxFlexOffset=\"25vw\" fxLayout=\"row\">\n    <markdown mermaid [src]=\"'../../assets/stackblitzMermaid.md'\"></markdown>\n  </div>\n"
        },
        {
            "name": "StackblitzStartPageComponent",
            "id": "component-StackblitzStartPageComponent-8c04e165dc34a4222229cb26646235634bc127b36a69192afad80d3b27f15b0ad3cd40f153d8bfb04719e7bb813d432950f75ed6145885285892e396fe133bfc",
            "file": "src/app/youtube/2022sept02/stackblitz.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-stackblitz-startpage",
            "styleUrls": [],
            "styles": [
                "\n  \n  "
            ],
            "template": "<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\n<div fxLayout=\"row\" fxLayoutAlign=\"center\" fxLayoutGap=\"10vw\">\n  <mat-slider fxFlex=\"10vw\" min=\"1\" max=\"100\" step=\"1\" value=\"50\"></mat-slider>\n  <mat-slider fxFlex=\"10vw\" min=\"1\" max=\"100\" step=\"1\" value=\"50\"></mat-slider>\n</div>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\n\n<h1>TaskOhers</h1>\n<!--markdown class=\"variable-binding\" [data]=\"markdowncode\"></markdown-->\n\n\n<div [innerHTML]=\"markdowncode | language : 'python' | markdown\"><div>\n\n<markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\n[lineOffset]=\"5\" [src]=\"'../../assets/stackblitzTypescript.md'\"></markdown>\n\n<div class=\"markdown\">\n  <markdown mermaid [src]=\"'../assets/myfile.md'\"></markdown>\n</div>\n\n<markdown mermaid >\n  <pre class=\"mermaid\">\n  sequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n</pre>\n</markdown>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bufferValue",
                    "defaultValue": "60",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n",
                    "description": "<p>ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode</p>\n",
                    "line": 362,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Color - primary (Theme color) | accent | warn\n",
                    "description": "<p>ProgressBar Color - primary (Theme color) | accent | warn</p>\n",
                    "line": 368,
                    "type": "ThemePalette",
                    "decorators": []
                },
                {
                    "name": "markdowncode",
                    "defaultValue": "`\\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  <h5>\r\n    angular@{{ angularVersion }} | ngx-markdown@{{ ngxMarkdownVersion }}\r\n  </h5>\r\n  <br>\r\n  \r\n  <div markdown ngPreserveWhitespaces>{{ markdown }}</div>\r\n  <!-- <div markdown [data]=\"markdown\"></div> -->\r\n  \\`\\`\\`\r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n    - Unordered list\r\n    - Another unordered bullet point\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max!!!`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 371,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'indeterminate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 350,
                    "type": "ProgressBarMode",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "40",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n",
                    "description": "<p>ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes</p>\n",
                    "line": 356,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 348,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, AfterContentInit, ViewChild, TemplateRef,  } from '@angular/core';\r\nimport { ThemePalette } from '@angular/material/core';\r\nimport { ProgressBarMode } from '@angular/material/progress-bar';\r\n@Component({\r\n  selector: 'app-stackblitz',\r\n  templateUrl: './stackblitz.component.html',\r\n  styleUrls: ['./stackblitz.component.scss']\r\n})\r\nexport class StackblitzComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-title',\r\n  template: `\r\n\r\n    <div fxLayout=\"column\">  \r\n      <div class=\"markdown\" fxLayoutAlign=\"center center\">\r\n        <markdown mermaid [src]=\"'../../assets/stackblitzTitle.md'\"></markdown>\r\n      </div>\r\n\r\n      <div class=\"footer\">\r\n        <mat-divider></mat-divider>\r\n          <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\r\n            Crafted with :heart: by **gmanojisaac** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/gmanoj.isaac)\r\n          </markdown>\r\n      </div>\r\n    </div>\r\n\r\n\r\n  `,\r\n  styles: [`\r\n  \r\n  .footer {\r\n        margin: 32px 0 8px;\r\n  \r\n        &-text {\r\n          display: block;\r\n          font-size: 13px;\r\n          padding-top: 4px;\r\n        }\r\n      }\r\n  \r\n      .mat-fab,\r\n      .mat-mini-fab {\r\n        img {\r\n          margin-bottom: 2px;\r\n        }\r\n      }\r\n  \r\n      .sticky {\r\n        position: sticky;\r\n        top: 80px;\r\n      }\r\n  \r\n      .scrollup-button {\r\n        margin:14px;\r\n  \r\n        &--fixed {\r\n          position: fixed;\r\n          bottom: 16px;\r\n          right: 16px;\r\n        }\r\n      }  \r\n  `]\r\n})\r\nexport class StackblitzTitleComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-runangular',\r\n  templateUrl: './stackblitz.component.html',\r\n  styleUrls: ['./stackblitz.component.scss']\r\n})\r\nexport class StackblitzRunAngularComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-storybook',\r\n  templateUrl: './stackblitz.component.html',\r\n  styleUrls: ['./stackblitz.component.scss']\r\n})\r\nexport class StackblitzStorybookComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-updatePR',\r\n  templateUrl: './stackblitz.component.html',\r\n  styleUrls: ['./stackblitz.component.scss']\r\n})\r\nexport class StackblitzUpdatePRComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-startpage',\r\n  template: `\r\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\r\n<div fxLayout=\"row\" fxLayoutAlign=\"center\" fxLayoutGap=\"10vw\">\r\n  <mat-slider fxFlex=\"10vw\" min=\"1\" max=\"100\" step=\"1\" value=\"50\"></mat-slider>\r\n  <mat-slider fxFlex=\"10vw\" min=\"1\" max=\"100\" step=\"1\" value=\"50\"></mat-slider>\r\n</div>\r\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\r\n\r\n<h1>TaskOhers</h1>\r\n<!--markdown class=\"variable-binding\" [data]=\"markdowncode\"></markdown-->\r\n\r\n\r\n<div [innerHTML]=\"markdowncode | language : 'python' | markdown\"><div>\r\n\r\n<markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\r\n[lineOffset]=\"5\" [src]=\"'../../assets/stackblitzTypescript.md'\"></markdown>\r\n\r\n<div class=\"markdown\">\r\n  <markdown mermaid [src]=\"'../assets/myfile.md'\"></markdown>\r\n</div>\r\n\r\n<markdown mermaid >\r\n  <pre class=\"mermaid\">\r\n  sequenceDiagram\r\n    Alice->>John: Hello John, how are you?\r\n    John-->>Alice: Great!\r\n</pre>\r\n</markdown>\r\n  `,\r\n  styles: [`\r\n  \r\n  `]\r\n})\r\nexport class StackblitzStartPageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `\\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  <h5>\r\n    angular@{{ angularVersion }} | ngx-markdown@{{ ngxMarkdownVersion }}\r\n  </h5>\r\n  <br>\r\n  \r\n  <div markdown ngPreserveWhitespaces>{{ markdown }}</div>\r\n  <!-- <div markdown [data]=\"markdown\"></div> -->\r\n  \\`\\`\\`\r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n    - Unordered list\r\n    - Another unordered bullet point\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max!!!`;\r\n\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-testpage',\r\n  template: `\r\n<!--markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\r\n[lineOffset]=\"5\" [src]=\"'../../assets/stackblitzTypescript.md'\"></markdown-->\r\n\r\n\r\n\r\n<div markdown ngPreserveWhitespaces>{{ markdowncode }}</div>\r\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\r\nDown here\r\n<ng-template #greet let-person><span>Hello {{person}} </span></ng-template>\r\n<ng-template #eng let-name><span>Hello {{name}}!</span></ng-template>\r\n<ng-template #svk let-person=\"localSk\"><span>Ahoj {{person}}!</span></ng-template>\r\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\r\n<ng-container [ngTemplateOutlet]=\"tems\"> </ng-container>\r\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\r\nHere\r\n  `,\r\n  styles: [`\r\n  \r\n  `]\r\n})\r\nexport class StackblitzStartTestComponent implements OnInit, AfterContentInit {\r\n\r\n  constructor() { }\r\n\r\n  @ViewChild('greet', { static: true })\r\n  greet!: TemplateRef<any>;\r\n  @ViewChild('svk', { static: true })\r\n  svk!: TemplateRef<any>;\r\n  @ViewChild('eng', { static: true })\r\n  eng!: TemplateRef<any>;\r\n\r\n  @Input()\r\n  Inputtems!: TemplateRef<any>;\r\n  tems!: TemplateRef<any>;\r\n \r\n\r\n\r\n  @Input()\r\n  myselectedtemp: string= 'first';\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`powershell\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n  ngOnInit(): void { }\r\n  ngAfterContentInit () {\r\n\r\nswitch (this.myselectedtemp) {\r\n  case 'greet':\r\n    this.tems = this.greet;\r\n    break;\r\n  case 'svk':\r\n    this.tems = this.svk;\r\n    break;\r\n    case 'eng':\r\n      this.tems = this.eng;\r\n      break;\r\n  }\r\n\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-mermaidinline',\r\n  template: `\r\n\r\n<markdown mermaid >\r\n  <pre class=\"mermaid\">\r\n  sequenceDiagram\r\n    Alice->>John: Hello John, how are you?\r\n    John-->>Alice: Great!\r\n</pre>\r\n</markdown>\r\n  `,\r\n  styles: [`\r\n  \r\n  `]\r\n})\r\nexport class StackblitzMermaidInlineComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n  \n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 344
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "StackblitzStartTestComponent",
            "id": "component-StackblitzStartTestComponent-8c04e165dc34a4222229cb26646235634bc127b36a69192afad80d3b27f15b0ad3cd40f153d8bfb04719e7bb813d432950f75ed6145885285892e396fe133bfc",
            "file": "src/app/youtube/2022sept02/stackblitz.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-stackblitz-testpage",
            "styleUrls": [],
            "styles": [
                "\n  \n  "
            ],
            "template": "<!--markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\n[lineOffset]=\"5\" [src]=\"'../../assets/stackblitzTypescript.md'\"></markdown-->\n\n\n\n<div markdown ngPreserveWhitespaces>{{ markdowncode }}</div>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\nDown here\n<ng-template #greet let-person><span>Hello {{person}} </span></ng-template>\n<ng-template #eng let-name><span>Hello {{name}}!</span></ng-template>\n<ng-template #svk let-person=\"localSk\"><span>Ahoj {{person}}!</span></ng-template>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\n<ng-container [ngTemplateOutlet]=\"tems\"> </ng-container>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\nHere\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bufferValue",
                    "defaultValue": "60",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n",
                    "description": "<p>ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode</p>\n",
                    "line": 450,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Color - primary (Theme color) | accent | warn\n",
                    "description": "<p>ProgressBar Color - primary (Theme color) | accent | warn</p>\n",
                    "line": 456,
                    "type": "ThemePalette",
                    "decorators": []
                },
                {
                    "name": "Inputtems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 430,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "markdowncode",
                    "defaultValue": "`## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`powershell\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 459,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'indeterminate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 438,
                    "type": "ProgressBarMode",
                    "decorators": []
                },
                {
                    "name": "myselectedtemp",
                    "defaultValue": "'first'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 436,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "40",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n",
                    "description": "<p>ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes</p>\n",
                    "line": 444,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 510,
                    "decorators": [
                        {
                            "name": "Component",
                            "stringifiedArguments": "{selector: 'app-stackblitz-mermaidinline', template: \n\n<markdown mermaid >\n  <pre class=\"mermaid\">\n  sequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n</pre>\n</markdown>\n  , styles: undefined}"
                        }
                    ],
                    "modifierKind": [
                        93
                    ]
                },
                {
                    "name": "eng",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 427,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'eng', {static: true}"
                        }
                    ]
                },
                {
                    "name": "greet",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 423,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'greet', {static: true}"
                        }
                    ]
                },
                {
                    "name": "StackblitzMermaidInlineComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 510
                },
                {
                    "name": "svk",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 425,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'svk', {static: true}"
                        }
                    ]
                },
                {
                    "name": "tems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 431
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 477,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 476,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, AfterContentInit, ViewChild, TemplateRef,  } from '@angular/core';\r\nimport { ThemePalette } from '@angular/material/core';\r\nimport { ProgressBarMode } from '@angular/material/progress-bar';\r\n@Component({\r\n  selector: 'app-stackblitz',\r\n  templateUrl: './stackblitz.component.html',\r\n  styleUrls: ['./stackblitz.component.scss']\r\n})\r\nexport class StackblitzComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-title',\r\n  template: `\r\n\r\n    <div fxLayout=\"column\">  \r\n      <div class=\"markdown\" fxLayoutAlign=\"center center\">\r\n        <markdown mermaid [src]=\"'../../assets/stackblitzTitle.md'\"></markdown>\r\n      </div>\r\n\r\n      <div class=\"footer\">\r\n        <mat-divider></mat-divider>\r\n          <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\r\n            Crafted with :heart: by **gmanojisaac** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/gmanoj.isaac)\r\n          </markdown>\r\n      </div>\r\n    </div>\r\n\r\n\r\n  `,\r\n  styles: [`\r\n  \r\n  .footer {\r\n        margin: 32px 0 8px;\r\n  \r\n        &-text {\r\n          display: block;\r\n          font-size: 13px;\r\n          padding-top: 4px;\r\n        }\r\n      }\r\n  \r\n      .mat-fab,\r\n      .mat-mini-fab {\r\n        img {\r\n          margin-bottom: 2px;\r\n        }\r\n      }\r\n  \r\n      .sticky {\r\n        position: sticky;\r\n        top: 80px;\r\n      }\r\n  \r\n      .scrollup-button {\r\n        margin:14px;\r\n  \r\n        &--fixed {\r\n          position: fixed;\r\n          bottom: 16px;\r\n          right: 16px;\r\n        }\r\n      }  \r\n  `]\r\n})\r\nexport class StackblitzTitleComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-runangular',\r\n  templateUrl: './stackblitz.component.html',\r\n  styleUrls: ['./stackblitz.component.scss']\r\n})\r\nexport class StackblitzRunAngularComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-storybook',\r\n  templateUrl: './stackblitz.component.html',\r\n  styleUrls: ['./stackblitz.component.scss']\r\n})\r\nexport class StackblitzStorybookComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-updatePR',\r\n  templateUrl: './stackblitz.component.html',\r\n  styleUrls: ['./stackblitz.component.scss']\r\n})\r\nexport class StackblitzUpdatePRComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-startpage',\r\n  template: `\r\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\r\n<div fxLayout=\"row\" fxLayoutAlign=\"center\" fxLayoutGap=\"10vw\">\r\n  <mat-slider fxFlex=\"10vw\" min=\"1\" max=\"100\" step=\"1\" value=\"50\"></mat-slider>\r\n  <mat-slider fxFlex=\"10vw\" min=\"1\" max=\"100\" step=\"1\" value=\"50\"></mat-slider>\r\n</div>\r\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\r\n\r\n<h1>TaskOhers</h1>\r\n<!--markdown class=\"variable-binding\" [data]=\"markdowncode\"></markdown-->\r\n\r\n\r\n<div [innerHTML]=\"markdowncode | language : 'python' | markdown\"><div>\r\n\r\n<markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\r\n[lineOffset]=\"5\" [src]=\"'../../assets/stackblitzTypescript.md'\"></markdown>\r\n\r\n<div class=\"markdown\">\r\n  <markdown mermaid [src]=\"'../assets/myfile.md'\"></markdown>\r\n</div>\r\n\r\n<markdown mermaid >\r\n  <pre class=\"mermaid\">\r\n  sequenceDiagram\r\n    Alice->>John: Hello John, how are you?\r\n    John-->>Alice: Great!\r\n</pre>\r\n</markdown>\r\n  `,\r\n  styles: [`\r\n  \r\n  `]\r\n})\r\nexport class StackblitzStartPageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `\\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  <h5>\r\n    angular@{{ angularVersion }} | ngx-markdown@{{ ngxMarkdownVersion }}\r\n  </h5>\r\n  <br>\r\n  \r\n  <div markdown ngPreserveWhitespaces>{{ markdown }}</div>\r\n  <!-- <div markdown [data]=\"markdown\"></div> -->\r\n  \\`\\`\\`\r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n    - Unordered list\r\n    - Another unordered bullet point\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max!!!`;\r\n\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-testpage',\r\n  template: `\r\n<!--markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\r\n[lineOffset]=\"5\" [src]=\"'../../assets/stackblitzTypescript.md'\"></markdown-->\r\n\r\n\r\n\r\n<div markdown ngPreserveWhitespaces>{{ markdowncode }}</div>\r\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\r\nDown here\r\n<ng-template #greet let-person><span>Hello {{person}} </span></ng-template>\r\n<ng-template #eng let-name><span>Hello {{name}}!</span></ng-template>\r\n<ng-template #svk let-person=\"localSk\"><span>Ahoj {{person}}!</span></ng-template>\r\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\r\n<ng-container [ngTemplateOutlet]=\"tems\"> </ng-container>\r\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\r\nHere\r\n  `,\r\n  styles: [`\r\n  \r\n  `]\r\n})\r\nexport class StackblitzStartTestComponent implements OnInit, AfterContentInit {\r\n\r\n  constructor() { }\r\n\r\n  @ViewChild('greet', { static: true })\r\n  greet!: TemplateRef<any>;\r\n  @ViewChild('svk', { static: true })\r\n  svk!: TemplateRef<any>;\r\n  @ViewChild('eng', { static: true })\r\n  eng!: TemplateRef<any>;\r\n\r\n  @Input()\r\n  Inputtems!: TemplateRef<any>;\r\n  tems!: TemplateRef<any>;\r\n \r\n\r\n\r\n  @Input()\r\n  myselectedtemp: string= 'first';\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`powershell\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n  ngOnInit(): void { }\r\n  ngAfterContentInit () {\r\n\r\nswitch (this.myselectedtemp) {\r\n  case 'greet':\r\n    this.tems = this.greet;\r\n    break;\r\n  case 'svk':\r\n    this.tems = this.svk;\r\n    break;\r\n    case 'eng':\r\n      this.tems = this.eng;\r\n      break;\r\n  }\r\n\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-mermaidinline',\r\n  template: `\r\n\r\n<markdown mermaid >\r\n  <pre class=\"mermaid\">\r\n  sequenceDiagram\r\n    Alice->>John: Hello John, how are you?\r\n    John-->>Alice: Great!\r\n</pre>\r\n</markdown>\r\n  `,\r\n  styles: [`\r\n  \r\n  `]\r\n})\r\nexport class StackblitzMermaidInlineComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n  \n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 418
            },
            "implements": [
                "OnInit",
                "AfterContentInit"
            ]
        },
        {
            "name": "StackblitzStorybookComponent",
            "id": "component-StackblitzStorybookComponent-8c04e165dc34a4222229cb26646235634bc127b36a69192afad80d3b27f15b0ad3cd40f153d8bfb04719e7bb813d432950f75ed6145885285892e396fe133bfc",
            "file": "src/app/youtube/2022sept02/stackblitz.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-stackblitz-storybook",
            "styleUrls": [
                "./stackblitz.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./stackblitz.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bufferValue",
                    "defaultValue": "60",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n",
                    "description": "<p>ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode</p>\n",
                    "line": 229,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Color - primary (Theme color) | accent | warn\n",
                    "description": "<p>ProgressBar Color - primary (Theme color) | accent | warn</p>\n",
                    "line": 235,
                    "type": "ThemePalette",
                    "decorators": []
                },
                {
                    "name": "markdowncode",
                    "defaultValue": "`## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 238,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'indeterminate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 217,
                    "type": "ProgressBarMode",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "40",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n",
                    "description": "<p>ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes</p>\n",
                    "line": 223,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 215,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, AfterContentInit, ViewChild, TemplateRef,  } from '@angular/core';\r\nimport { ThemePalette } from '@angular/material/core';\r\nimport { ProgressBarMode } from '@angular/material/progress-bar';\r\n@Component({\r\n  selector: 'app-stackblitz',\r\n  templateUrl: './stackblitz.component.html',\r\n  styleUrls: ['./stackblitz.component.scss']\r\n})\r\nexport class StackblitzComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-title',\r\n  template: `\r\n\r\n    <div fxLayout=\"column\">  \r\n      <div class=\"markdown\" fxLayoutAlign=\"center center\">\r\n        <markdown mermaid [src]=\"'../../assets/stackblitzTitle.md'\"></markdown>\r\n      </div>\r\n\r\n      <div class=\"footer\">\r\n        <mat-divider></mat-divider>\r\n          <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\r\n            Crafted with :heart: by **gmanojisaac** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/gmanoj.isaac)\r\n          </markdown>\r\n      </div>\r\n    </div>\r\n\r\n\r\n  `,\r\n  styles: [`\r\n  \r\n  .footer {\r\n        margin: 32px 0 8px;\r\n  \r\n        &-text {\r\n          display: block;\r\n          font-size: 13px;\r\n          padding-top: 4px;\r\n        }\r\n      }\r\n  \r\n      .mat-fab,\r\n      .mat-mini-fab {\r\n        img {\r\n          margin-bottom: 2px;\r\n        }\r\n      }\r\n  \r\n      .sticky {\r\n        position: sticky;\r\n        top: 80px;\r\n      }\r\n  \r\n      .scrollup-button {\r\n        margin:14px;\r\n  \r\n        &--fixed {\r\n          position: fixed;\r\n          bottom: 16px;\r\n          right: 16px;\r\n        }\r\n      }  \r\n  `]\r\n})\r\nexport class StackblitzTitleComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-runangular',\r\n  templateUrl: './stackblitz.component.html',\r\n  styleUrls: ['./stackblitz.component.scss']\r\n})\r\nexport class StackblitzRunAngularComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-storybook',\r\n  templateUrl: './stackblitz.component.html',\r\n  styleUrls: ['./stackblitz.component.scss']\r\n})\r\nexport class StackblitzStorybookComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-updatePR',\r\n  templateUrl: './stackblitz.component.html',\r\n  styleUrls: ['./stackblitz.component.scss']\r\n})\r\nexport class StackblitzUpdatePRComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-startpage',\r\n  template: `\r\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\r\n<div fxLayout=\"row\" fxLayoutAlign=\"center\" fxLayoutGap=\"10vw\">\r\n  <mat-slider fxFlex=\"10vw\" min=\"1\" max=\"100\" step=\"1\" value=\"50\"></mat-slider>\r\n  <mat-slider fxFlex=\"10vw\" min=\"1\" max=\"100\" step=\"1\" value=\"50\"></mat-slider>\r\n</div>\r\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\r\n\r\n<h1>TaskOhers</h1>\r\n<!--markdown class=\"variable-binding\" [data]=\"markdowncode\"></markdown-->\r\n\r\n\r\n<div [innerHTML]=\"markdowncode | language : 'python' | markdown\"><div>\r\n\r\n<markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\r\n[lineOffset]=\"5\" [src]=\"'../../assets/stackblitzTypescript.md'\"></markdown>\r\n\r\n<div class=\"markdown\">\r\n  <markdown mermaid [src]=\"'../assets/myfile.md'\"></markdown>\r\n</div>\r\n\r\n<markdown mermaid >\r\n  <pre class=\"mermaid\">\r\n  sequenceDiagram\r\n    Alice->>John: Hello John, how are you?\r\n    John-->>Alice: Great!\r\n</pre>\r\n</markdown>\r\n  `,\r\n  styles: [`\r\n  \r\n  `]\r\n})\r\nexport class StackblitzStartPageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `\\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  <h5>\r\n    angular@{{ angularVersion }} | ngx-markdown@{{ ngxMarkdownVersion }}\r\n  </h5>\r\n  <br>\r\n  \r\n  <div markdown ngPreserveWhitespaces>{{ markdown }}</div>\r\n  <!-- <div markdown [data]=\"markdown\"></div> -->\r\n  \\`\\`\\`\r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n    - Unordered list\r\n    - Another unordered bullet point\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max!!!`;\r\n\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-testpage',\r\n  template: `\r\n<!--markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\r\n[lineOffset]=\"5\" [src]=\"'../../assets/stackblitzTypescript.md'\"></markdown-->\r\n\r\n\r\n\r\n<div markdown ngPreserveWhitespaces>{{ markdowncode }}</div>\r\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\r\nDown here\r\n<ng-template #greet let-person><span>Hello {{person}} </span></ng-template>\r\n<ng-template #eng let-name><span>Hello {{name}}!</span></ng-template>\r\n<ng-template #svk let-person=\"localSk\"><span>Ahoj {{person}}!</span></ng-template>\r\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\r\n<ng-container [ngTemplateOutlet]=\"tems\"> </ng-container>\r\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\r\nHere\r\n  `,\r\n  styles: [`\r\n  \r\n  `]\r\n})\r\nexport class StackblitzStartTestComponent implements OnInit, AfterContentInit {\r\n\r\n  constructor() { }\r\n\r\n  @ViewChild('greet', { static: true })\r\n  greet!: TemplateRef<any>;\r\n  @ViewChild('svk', { static: true })\r\n  svk!: TemplateRef<any>;\r\n  @ViewChild('eng', { static: true })\r\n  eng!: TemplateRef<any>;\r\n\r\n  @Input()\r\n  Inputtems!: TemplateRef<any>;\r\n  tems!: TemplateRef<any>;\r\n \r\n\r\n\r\n  @Input()\r\n  myselectedtemp: string= 'first';\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`powershell\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n  ngOnInit(): void { }\r\n  ngAfterContentInit () {\r\n\r\nswitch (this.myselectedtemp) {\r\n  case 'greet':\r\n    this.tems = this.greet;\r\n    break;\r\n  case 'svk':\r\n    this.tems = this.svk;\r\n    break;\r\n    case 'eng':\r\n      this.tems = this.eng;\r\n      break;\r\n  }\r\n\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-mermaidinline',\r\n  template: `\r\n\r\n<markdown mermaid >\r\n  <pre class=\"mermaid\">\r\n  sequenceDiagram\r\n    Alice->>John: Hello John, how are you?\r\n    John-->>Alice: Great!\r\n</pre>\r\n</markdown>\r\n  `,\r\n  styles: [`\r\n  \r\n  `]\r\n})\r\nexport class StackblitzMermaidInlineComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n    .footer {\r\n        margin: 32px 0 8px;\r\n  \r\n        &-text {\r\n          display: block;\r\n          font-size: 13px;\r\n          padding-top: 4px;\r\n        }\r\n      }\r\n  \r\n      .mat-fab,\r\n      .mat-mini-fab {\r\n        img {\r\n          margin-bottom: 2px;\r\n        }\r\n      }\r\n  \r\n      .sticky {\r\n        position: sticky;\r\n        top: 80px;\r\n      }\r\n  \r\n      .scrollup-button {\r\n        margin:14px;\r\n  \r\n        &--fixed {\r\n          position: fixed;\r\n          bottom: 16px;\r\n          right: 16px;\r\n        }\r\n      }  ",
                    "styleUrl": "./stackblitz.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 211
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!--\n\n<mat-progress-bar \n[mode]=\"mode\"\n[value]=\"value\"\n[bufferValue]=\"bufferValue\"\n[color]=\"color\">\n</mat-progress-bar>\n\n<div class=\"markdown\">\n<markdown mermaid [src]=\"'../../assets/Testing.md'\"></markdown>\n</div>\n\n<markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\n[lineOffset]=\"5\" [src]=\"'../../assets/stackblitzTypescript.md'\"></markdown>\n\n<markdown ngPreserveWhitespaces clipboard \ncommandLine\n[prompt]=\"'PS C:\\Users\\Chris>'\"\n[filterOutput]=\"'(out)'\" [src]=\"'../../assets/stackblitzPowershell.md'\"></markdown>\n\n<div class=\"markdown\">\n    <markdown mermaid [src]=\"'../../assets/stackblitzMermaid.md'\"></markdown>\n  </div>\n  \n<div class=\"footer\">\n<mat-divider></mat-divider>\n<markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\nCrafted with :heart: by **jfcere** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/jfcere)\n</markdown>\n</div>\n-->\n<div class=\"markdown\" fxFlexOffset=\"25vw\" fxLayout=\"row\">\n    <markdown mermaid [src]=\"'../../assets/stackblitzMermaid.md'\"></markdown>\n  </div>\n"
        },
        {
            "name": "StackblitzTitleComponent",
            "id": "component-StackblitzTitleComponent-8c04e165dc34a4222229cb26646235634bc127b36a69192afad80d3b27f15b0ad3cd40f153d8bfb04719e7bb813d432950f75ed6145885285892e396fe133bfc",
            "file": "src/app/youtube/2022sept02/stackblitz.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-stackblitz-title",
            "styleUrls": [],
            "styles": [
                "\n  \n  .footer {\n        margin: 32px 0 8px;\n  \n        &-text {\n          display: block;\n          font-size: 13px;\n          padding-top: 4px;\n        }\n      }\n  \n      .mat-fab,\n      .mat-mini-fab {\n        img {\n          margin-bottom: 2px;\n        }\n      }\n  \n      .sticky {\n        position: sticky;\n        top: 80px;\n      }\n  \n      .scrollup-button {\n        margin:14px;\n  \n        &--fixed {\n          position: fixed;\n          bottom: 16px;\n          right: 16px;\n        }\n      }  \n  "
            ],
            "template": "\n<div fxLayout=\"column\">\n  <div class=\"markdown\" fxLayoutAlign=\"center center\">\n    <markdown mermaid [src]=\"'../../assets/stackblitzTitle.md'\"></markdown>\n  </div>\n\n  <div class=\"footer\">\n    <mat-divider></mat-divider>\n      <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\n        Crafted with :heart: by **gmanojisaac** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/gmanoj.isaac)\n      </markdown>\n  </div>\n</div>\n\n\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bufferValue",
                    "defaultValue": "60",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n",
                    "description": "<p>ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode</p>\n",
                    "line": 127,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Color - primary (Theme color) | accent | warn\n",
                    "description": "<p>ProgressBar Color - primary (Theme color) | accent | warn</p>\n",
                    "line": 133,
                    "type": "ThemePalette",
                    "decorators": []
                },
                {
                    "name": "markdowncode",
                    "defaultValue": "`## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 136,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'indeterminate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 115,
                    "type": "ProgressBarMode",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "40",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n",
                    "description": "<p>ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes</p>\n",
                    "line": 121,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, AfterContentInit, ViewChild, TemplateRef,  } from '@angular/core';\r\nimport { ThemePalette } from '@angular/material/core';\r\nimport { ProgressBarMode } from '@angular/material/progress-bar';\r\n@Component({\r\n  selector: 'app-stackblitz',\r\n  templateUrl: './stackblitz.component.html',\r\n  styleUrls: ['./stackblitz.component.scss']\r\n})\r\nexport class StackblitzComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-title',\r\n  template: `\r\n\r\n    <div fxLayout=\"column\">  \r\n      <div class=\"markdown\" fxLayoutAlign=\"center center\">\r\n        <markdown mermaid [src]=\"'../../assets/stackblitzTitle.md'\"></markdown>\r\n      </div>\r\n\r\n      <div class=\"footer\">\r\n        <mat-divider></mat-divider>\r\n          <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\r\n            Crafted with :heart: by **gmanojisaac** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/gmanoj.isaac)\r\n          </markdown>\r\n      </div>\r\n    </div>\r\n\r\n\r\n  `,\r\n  styles: [`\r\n  \r\n  .footer {\r\n        margin: 32px 0 8px;\r\n  \r\n        &-text {\r\n          display: block;\r\n          font-size: 13px;\r\n          padding-top: 4px;\r\n        }\r\n      }\r\n  \r\n      .mat-fab,\r\n      .mat-mini-fab {\r\n        img {\r\n          margin-bottom: 2px;\r\n        }\r\n      }\r\n  \r\n      .sticky {\r\n        position: sticky;\r\n        top: 80px;\r\n      }\r\n  \r\n      .scrollup-button {\r\n        margin:14px;\r\n  \r\n        &--fixed {\r\n          position: fixed;\r\n          bottom: 16px;\r\n          right: 16px;\r\n        }\r\n      }  \r\n  `]\r\n})\r\nexport class StackblitzTitleComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-runangular',\r\n  templateUrl: './stackblitz.component.html',\r\n  styleUrls: ['./stackblitz.component.scss']\r\n})\r\nexport class StackblitzRunAngularComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-storybook',\r\n  templateUrl: './stackblitz.component.html',\r\n  styleUrls: ['./stackblitz.component.scss']\r\n})\r\nexport class StackblitzStorybookComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-updatePR',\r\n  templateUrl: './stackblitz.component.html',\r\n  styleUrls: ['./stackblitz.component.scss']\r\n})\r\nexport class StackblitzUpdatePRComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-startpage',\r\n  template: `\r\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\r\n<div fxLayout=\"row\" fxLayoutAlign=\"center\" fxLayoutGap=\"10vw\">\r\n  <mat-slider fxFlex=\"10vw\" min=\"1\" max=\"100\" step=\"1\" value=\"50\"></mat-slider>\r\n  <mat-slider fxFlex=\"10vw\" min=\"1\" max=\"100\" step=\"1\" value=\"50\"></mat-slider>\r\n</div>\r\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\r\n\r\n<h1>TaskOhers</h1>\r\n<!--markdown class=\"variable-binding\" [data]=\"markdowncode\"></markdown-->\r\n\r\n\r\n<div [innerHTML]=\"markdowncode | language : 'python' | markdown\"><div>\r\n\r\n<markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\r\n[lineOffset]=\"5\" [src]=\"'../../assets/stackblitzTypescript.md'\"></markdown>\r\n\r\n<div class=\"markdown\">\r\n  <markdown mermaid [src]=\"'../assets/myfile.md'\"></markdown>\r\n</div>\r\n\r\n<markdown mermaid >\r\n  <pre class=\"mermaid\">\r\n  sequenceDiagram\r\n    Alice->>John: Hello John, how are you?\r\n    John-->>Alice: Great!\r\n</pre>\r\n</markdown>\r\n  `,\r\n  styles: [`\r\n  \r\n  `]\r\n})\r\nexport class StackblitzStartPageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `\\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  <h5>\r\n    angular@{{ angularVersion }} | ngx-markdown@{{ ngxMarkdownVersion }}\r\n  </h5>\r\n  <br>\r\n  \r\n  <div markdown ngPreserveWhitespaces>{{ markdown }}</div>\r\n  <!-- <div markdown [data]=\"markdown\"></div> -->\r\n  \\`\\`\\`\r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n    - Unordered list\r\n    - Another unordered bullet point\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max!!!`;\r\n\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-testpage',\r\n  template: `\r\n<!--markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\r\n[lineOffset]=\"5\" [src]=\"'../../assets/stackblitzTypescript.md'\"></markdown-->\r\n\r\n\r\n\r\n<div markdown ngPreserveWhitespaces>{{ markdowncode }}</div>\r\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\r\nDown here\r\n<ng-template #greet let-person><span>Hello {{person}} </span></ng-template>\r\n<ng-template #eng let-name><span>Hello {{name}}!</span></ng-template>\r\n<ng-template #svk let-person=\"localSk\"><span>Ahoj {{person}}!</span></ng-template>\r\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\r\n<ng-container [ngTemplateOutlet]=\"tems\"> </ng-container>\r\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\r\nHere\r\n  `,\r\n  styles: [`\r\n  \r\n  `]\r\n})\r\nexport class StackblitzStartTestComponent implements OnInit, AfterContentInit {\r\n\r\n  constructor() { }\r\n\r\n  @ViewChild('greet', { static: true })\r\n  greet!: TemplateRef<any>;\r\n  @ViewChild('svk', { static: true })\r\n  svk!: TemplateRef<any>;\r\n  @ViewChild('eng', { static: true })\r\n  eng!: TemplateRef<any>;\r\n\r\n  @Input()\r\n  Inputtems!: TemplateRef<any>;\r\n  tems!: TemplateRef<any>;\r\n \r\n\r\n\r\n  @Input()\r\n  myselectedtemp: string= 'first';\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`powershell\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n  ngOnInit(): void { }\r\n  ngAfterContentInit () {\r\n\r\nswitch (this.myselectedtemp) {\r\n  case 'greet':\r\n    this.tems = this.greet;\r\n    break;\r\n  case 'svk':\r\n    this.tems = this.svk;\r\n    break;\r\n    case 'eng':\r\n      this.tems = this.eng;\r\n      break;\r\n  }\r\n\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-mermaidinline',\r\n  template: `\r\n\r\n<markdown mermaid >\r\n  <pre class=\"mermaid\">\r\n  sequenceDiagram\r\n    Alice->>John: Hello John, how are you?\r\n    John-->>Alice: Great!\r\n</pre>\r\n</markdown>\r\n  `,\r\n  styles: [`\r\n  \r\n  `]\r\n})\r\nexport class StackblitzMermaidInlineComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n  \n  .footer {\n        margin: 32px 0 8px;\n  \n        &-text {\n          display: block;\n          font-size: 13px;\n          padding-top: 4px;\n        }\n      }\n  \n      .mat-fab,\n      .mat-mini-fab {\n        img {\n          margin-bottom: 2px;\n        }\n      }\n  \n      .sticky {\n        position: sticky;\n        top: 80px;\n      }\n  \n      .scrollup-button {\n        margin:14px;\n  \n        &--fixed {\n          position: fixed;\n          bottom: 16px;\n          right: 16px;\n        }\n      }  \n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 109
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "StackblitzUpdatePRComponent",
            "id": "component-StackblitzUpdatePRComponent-8c04e165dc34a4222229cb26646235634bc127b36a69192afad80d3b27f15b0ad3cd40f153d8bfb04719e7bb813d432950f75ed6145885285892e396fe133bfc",
            "file": "src/app/youtube/2022sept02/stackblitz.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-stackblitz-updatePR",
            "styleUrls": [
                "./stackblitz.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./stackblitz.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bufferValue",
                    "defaultValue": "60",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n",
                    "description": "<p>ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode</p>\n",
                    "line": 280,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Color - primary (Theme color) | accent | warn\n",
                    "description": "<p>ProgressBar Color - primary (Theme color) | accent | warn</p>\n",
                    "line": 286,
                    "type": "ThemePalette",
                    "decorators": []
                },
                {
                    "name": "markdowncode",
                    "defaultValue": "`## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 289,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'indeterminate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 268,
                    "type": "ProgressBarMode",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "40",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n",
                    "description": "<p>ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes</p>\n",
                    "line": 274,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 266,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, AfterContentInit, ViewChild, TemplateRef,  } from '@angular/core';\r\nimport { ThemePalette } from '@angular/material/core';\r\nimport { ProgressBarMode } from '@angular/material/progress-bar';\r\n@Component({\r\n  selector: 'app-stackblitz',\r\n  templateUrl: './stackblitz.component.html',\r\n  styleUrls: ['./stackblitz.component.scss']\r\n})\r\nexport class StackblitzComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-title',\r\n  template: `\r\n\r\n    <div fxLayout=\"column\">  \r\n      <div class=\"markdown\" fxLayoutAlign=\"center center\">\r\n        <markdown mermaid [src]=\"'../../assets/stackblitzTitle.md'\"></markdown>\r\n      </div>\r\n\r\n      <div class=\"footer\">\r\n        <mat-divider></mat-divider>\r\n          <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\r\n            Crafted with :heart: by **gmanojisaac** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/gmanoj.isaac)\r\n          </markdown>\r\n      </div>\r\n    </div>\r\n\r\n\r\n  `,\r\n  styles: [`\r\n  \r\n  .footer {\r\n        margin: 32px 0 8px;\r\n  \r\n        &-text {\r\n          display: block;\r\n          font-size: 13px;\r\n          padding-top: 4px;\r\n        }\r\n      }\r\n  \r\n      .mat-fab,\r\n      .mat-mini-fab {\r\n        img {\r\n          margin-bottom: 2px;\r\n        }\r\n      }\r\n  \r\n      .sticky {\r\n        position: sticky;\r\n        top: 80px;\r\n      }\r\n  \r\n      .scrollup-button {\r\n        margin:14px;\r\n  \r\n        &--fixed {\r\n          position: fixed;\r\n          bottom: 16px;\r\n          right: 16px;\r\n        }\r\n      }  \r\n  `]\r\n})\r\nexport class StackblitzTitleComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-runangular',\r\n  templateUrl: './stackblitz.component.html',\r\n  styleUrls: ['./stackblitz.component.scss']\r\n})\r\nexport class StackblitzRunAngularComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-storybook',\r\n  templateUrl: './stackblitz.component.html',\r\n  styleUrls: ['./stackblitz.component.scss']\r\n})\r\nexport class StackblitzStorybookComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-updatePR',\r\n  templateUrl: './stackblitz.component.html',\r\n  styleUrls: ['./stackblitz.component.scss']\r\n})\r\nexport class StackblitzUpdatePRComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-startpage',\r\n  template: `\r\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\r\n<div fxLayout=\"row\" fxLayoutAlign=\"center\" fxLayoutGap=\"10vw\">\r\n  <mat-slider fxFlex=\"10vw\" min=\"1\" max=\"100\" step=\"1\" value=\"50\"></mat-slider>\r\n  <mat-slider fxFlex=\"10vw\" min=\"1\" max=\"100\" step=\"1\" value=\"50\"></mat-slider>\r\n</div>\r\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\r\n\r\n<h1>TaskOhers</h1>\r\n<!--markdown class=\"variable-binding\" [data]=\"markdowncode\"></markdown-->\r\n\r\n\r\n<div [innerHTML]=\"markdowncode | language : 'python' | markdown\"><div>\r\n\r\n<markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\r\n[lineOffset]=\"5\" [src]=\"'../../assets/stackblitzTypescript.md'\"></markdown>\r\n\r\n<div class=\"markdown\">\r\n  <markdown mermaid [src]=\"'../assets/myfile.md'\"></markdown>\r\n</div>\r\n\r\n<markdown mermaid >\r\n  <pre class=\"mermaid\">\r\n  sequenceDiagram\r\n    Alice->>John: Hello John, how are you?\r\n    John-->>Alice: Great!\r\n</pre>\r\n</markdown>\r\n  `,\r\n  styles: [`\r\n  \r\n  `]\r\n})\r\nexport class StackblitzStartPageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `\\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  <h5>\r\n    angular@{{ angularVersion }} | ngx-markdown@{{ ngxMarkdownVersion }}\r\n  </h5>\r\n  <br>\r\n  \r\n  <div markdown ngPreserveWhitespaces>{{ markdown }}</div>\r\n  <!-- <div markdown [data]=\"markdown\"></div> -->\r\n  \\`\\`\\`\r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n    - Unordered list\r\n    - Another unordered bullet point\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max!!!`;\r\n\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-testpage',\r\n  template: `\r\n<!--markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\r\n[lineOffset]=\"5\" [src]=\"'../../assets/stackblitzTypescript.md'\"></markdown-->\r\n\r\n\r\n\r\n<div markdown ngPreserveWhitespaces>{{ markdowncode }}</div>\r\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\r\nDown here\r\n<ng-template #greet let-person><span>Hello {{person}} </span></ng-template>\r\n<ng-template #eng let-name><span>Hello {{name}}!</span></ng-template>\r\n<ng-template #svk let-person=\"localSk\"><span>Ahoj {{person}}!</span></ng-template>\r\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\r\n<ng-container [ngTemplateOutlet]=\"tems\"> </ng-container>\r\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\r\nHere\r\n  `,\r\n  styles: [`\r\n  \r\n  `]\r\n})\r\nexport class StackblitzStartTestComponent implements OnInit, AfterContentInit {\r\n\r\n  constructor() { }\r\n\r\n  @ViewChild('greet', { static: true })\r\n  greet!: TemplateRef<any>;\r\n  @ViewChild('svk', { static: true })\r\n  svk!: TemplateRef<any>;\r\n  @ViewChild('eng', { static: true })\r\n  eng!: TemplateRef<any>;\r\n\r\n  @Input()\r\n  Inputtems!: TemplateRef<any>;\r\n  tems!: TemplateRef<any>;\r\n \r\n\r\n\r\n  @Input()\r\n  myselectedtemp: string= 'first';\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`powershell\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n  ngOnInit(): void { }\r\n  ngAfterContentInit () {\r\n\r\nswitch (this.myselectedtemp) {\r\n  case 'greet':\r\n    this.tems = this.greet;\r\n    break;\r\n  case 'svk':\r\n    this.tems = this.svk;\r\n    break;\r\n    case 'eng':\r\n      this.tems = this.eng;\r\n      break;\r\n  }\r\n\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'app-stackblitz-mermaidinline',\r\n  template: `\r\n\r\n<markdown mermaid >\r\n  <pre class=\"mermaid\">\r\n  sequenceDiagram\r\n    Alice->>John: Hello John, how are you?\r\n    John-->>Alice: Great!\r\n</pre>\r\n</markdown>\r\n  `,\r\n  styles: [`\r\n  \r\n  `]\r\n})\r\nexport class StackblitzMermaidInlineComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n    .footer {\r\n        margin: 32px 0 8px;\r\n  \r\n        &-text {\r\n          display: block;\r\n          font-size: 13px;\r\n          padding-top: 4px;\r\n        }\r\n      }\r\n  \r\n      .mat-fab,\r\n      .mat-mini-fab {\r\n        img {\r\n          margin-bottom: 2px;\r\n        }\r\n      }\r\n  \r\n      .sticky {\r\n        position: sticky;\r\n        top: 80px;\r\n      }\r\n  \r\n      .scrollup-button {\r\n        margin:14px;\r\n  \r\n        &--fixed {\r\n          position: fixed;\r\n          bottom: 16px;\r\n          right: 16px;\r\n        }\r\n      }  ",
                    "styleUrl": "./stackblitz.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 262
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!--\n\n<mat-progress-bar \n[mode]=\"mode\"\n[value]=\"value\"\n[bufferValue]=\"bufferValue\"\n[color]=\"color\">\n</mat-progress-bar>\n\n<div class=\"markdown\">\n<markdown mermaid [src]=\"'../../assets/Testing.md'\"></markdown>\n</div>\n\n<markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\n[lineOffset]=\"5\" [src]=\"'../../assets/stackblitzTypescript.md'\"></markdown>\n\n<markdown ngPreserveWhitespaces clipboard \ncommandLine\n[prompt]=\"'PS C:\\Users\\Chris>'\"\n[filterOutput]=\"'(out)'\" [src]=\"'../../assets/stackblitzPowershell.md'\"></markdown>\n\n<div class=\"markdown\">\n    <markdown mermaid [src]=\"'../../assets/stackblitzMermaid.md'\"></markdown>\n  </div>\n  \n<div class=\"footer\">\n<mat-divider></mat-divider>\n<markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\nCrafted with :heart: by **jfcere** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/jfcere)\n</markdown>\n</div>\n-->\n<div class=\"markdown\" fxFlexOffset=\"25vw\" fxLayout=\"row\">\n    <markdown mermaid [src]=\"'../../assets/stackblitzMermaid.md'\"></markdown>\n  </div>\n"
        },
        {
            "name": "StartScreenComponent",
            "id": "component-StartScreenComponent-da2b96fe6198a8e2f2467b7277226c1814edbf8d1b36443a4c8869741a4679298bf491cf89ab11ab2a86f30b2cd5a45e93df74d6bf6c679815a659d02a238197",
            "file": "src/app/progress-bar/progress-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-startscreen",
            "styleUrls": [],
            "styles": [
                "\n    .footer {\n      margin: 32px 0 8px;\n\n      &-text {\n        display: block;\n        font-size: 13px;\n        padding-top: 4px;\n      }\n    }\n\n    .mat-fab,\n    .mat-mini-fab {\n      img {\n        margin-bottom: 2px;\n      }\n    }\n\n    .sticky {\n      position: sticky;\n      top: 80px;\n    }\n\n    .scrollup-button {\n      margin:14px;\n\n      &--fixed {\n        position: fixed;\n        bottom: 16px;\n        right: 16px;\n      }\n    }    \n    "
            ],
            "template": "  <mat-progress-bar\n      [mode]=\"mode\"\n      [value]=\"value\"\n      [bufferValue]=\"bufferValue\"\n      [color]=\"color\">\n  </mat-progress-bar>\n\n<div class=\"markdown\">\n  <markdown mermaid [src]=\"'../../assets/Testing.md'\"></markdown>\n</div>\n\n<div class=\"markdown\">\n    <markdown\n      [src]=\"'../../assets/Introduction.md'\"\n    ></markdown>\n  </div>\n\n<div class=\"footer\">\n  <mat-divider></mat-divider>\n  <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\n    Crafted with :heart: by **jfcere** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/jfcere)\n  </markdown>\n</div>\n\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bufferValue",
                    "defaultValue": "60",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n",
                    "description": "<p>ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode</p>\n",
                    "line": 519,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Color - primary (Theme color) | accent | warn\n",
                    "description": "<p>ProgressBar Color - primary (Theme color) | accent | warn</p>\n",
                    "line": 525,
                    "type": "ThemePalette",
                    "decorators": []
                },
                {
                    "name": "markdowncode",
                    "defaultValue": "`## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 528,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'indeterminate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 507,
                    "type": "ProgressBarMode",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "40",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n",
                    "description": "<p>ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes</p>\n",
                    "line": 513,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 505,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { ThemePalette } from '@angular/material/core';\r\nimport { ProgressBarMode } from '@angular/material/progress-bar';\r\n\r\n@Component({\r\n  selector: 'app-progress-bar',\r\n  templateUrl: './progress-bar.component.html',\r\n  styleUrls: ['./progress-bar.component.scss'],\r\n})\r\nexport class ProgressBarComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  /**\r\n   * ProgressBar mode - determinate | indeterminate | Buffer | Query\r\n   */\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-aboutme-Introduction',\r\n  template: `\r\n\r\n      \r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n\r\n    <div class=\"markdown\">\r\n      <markdown\r\n        class=\"variable-binding\"\r\n        [src]=\"'../../assets/Introduction.md'\"\r\n      ></markdown>\r\n    </div>\r\n  `,\r\n})\r\nexport class AboutmeIntroductionComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-aboutme-Lecturer',\r\n  template: `\r\n\r\n      \r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n    <div class=\"markdown\">\r\n    <markdown mermaid [src]=\"'../../assets/Lecturer.md'\"></markdown>\r\n  </div>\r\n\r\n  `,\r\n})\r\nexport class AboutmeLecturerComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-aboutme-Telecom',\r\n  template: `\r\n\r\n      \r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n\r\n    <div class=\"markdown\">\r\n    <markdown mermaid [src]=\"'../../assets/Telecom.md'\"></markdown>\r\n  </div>\r\n\r\n  `,\r\n})\r\nexport class AboutmeTelecomComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-aboutme-Development',\r\n  template: `\r\n\r\n      \r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n\r\n    <div class=\"markdown\">\r\n      <markdown\r\n        class=\"variable-binding\"\r\n        [src]=\"'../../assets/Development.md'\"\r\n      ></markdown>\r\n    </div>\r\n\r\n  `,\r\n})\r\nexport class AboutmeDevelopmentComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-aboutme-Testing',\r\n  template: `\r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n  <div class=\"markdown\">\r\n    <markdown mermaid [src]=\"'../../assets/Testing.md'\"></markdown>\r\n  </div>\r\n\r\n  <markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\r\n  [lineOffset]=\"5\">\r\n    \\`\\`\\`typescript\r\n    export function greetings(name: string): string &#123;\r\n      return 'Hello ' + name;\r\n    }\r\n    \\`\\`\\`\r\n  </markdown>\r\n\r\n\r\n  <markdown ngPreserveWhitespaces clipboard \r\n    commandLine\r\n    [prompt]=\"'PS C:\\Users\\Chris>'\"\r\n    [filterOutput]=\"'(out)'\">\r\n    \\`\\`\\` powershell\r\n    Get-Date\r\n    (out)\r\n    (ut)Sunday, November 7, 2021 8:19:21 PM\r\n    (out)\r\n    \\`\\`\\`\r\n  </markdown>\r\n\r\n  <div class=\"footer\">\r\n    <mat-divider></mat-divider>\r\n    <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\r\n      Crafted with :heart: by **jfcere** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/jfcere)\r\n    </markdown>\r\n  </div>\r\n\r\n  `,\r\n  styles: [\r\n    `\r\n    .footer {\r\n      margin: 32px 0 8px;\r\n\r\n      &-text {\r\n        display: block;\r\n        font-size: 13px;\r\n        padding-top: 4px;\r\n      }\r\n    }\r\n\r\n    .mat-fab,\r\n    .mat-mini-fab {\r\n      img {\r\n        margin-bottom: 2px;\r\n      }\r\n    }\r\n\r\n    .sticky {\r\n      position: sticky;\r\n      top: 80px;\r\n    }\r\n\r\n    .scrollup-button {\r\n      margin:14px;\r\n\r\n      &--fixed {\r\n        position: fixed;\r\n        bottom: 16px;\r\n        right: 16px;\r\n      }\r\n    }    \r\n    `,\r\n  ],\r\n})\r\nexport class AboutmeTestingComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-startscreen',\r\n  template: `\r\n    <mat-progress-bar \r\n        [mode]=\"mode\"\r\n        [value]=\"value\"\r\n        [bufferValue]=\"bufferValue\"\r\n        [color]=\"color\">\r\n    </mat-progress-bar>\r\n\r\n  <div class=\"markdown\">\r\n    <markdown mermaid [src]=\"'../../assets/Testing.md'\"></markdown>\r\n  </div>\r\n\r\n  <div class=\"markdown\">\r\n      <markdown\r\n        [src]=\"'../../assets/Introduction.md'\"\r\n      ></markdown>\r\n    </div>\r\n\r\n  <div class=\"footer\">\r\n    <mat-divider></mat-divider>\r\n    <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\r\n      Crafted with :heart: by **jfcere** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/jfcere)\r\n    </markdown>\r\n  </div>\r\n\r\n  `,\r\n  styles: [\r\n    `\r\n    .footer {\r\n      margin: 32px 0 8px;\r\n\r\n      &-text {\r\n        display: block;\r\n        font-size: 13px;\r\n        padding-top: 4px;\r\n      }\r\n    }\r\n\r\n    .mat-fab,\r\n    .mat-mini-fab {\r\n      img {\r\n        margin-bottom: 2px;\r\n      }\r\n    }\r\n\r\n    .sticky {\r\n      position: sticky;\r\n      top: 80px;\r\n    }\r\n\r\n    .scrollup-button {\r\n      margin:14px;\r\n\r\n      &--fixed {\r\n        position: fixed;\r\n        bottom: 16px;\r\n        right: 16px;\r\n      }\r\n    }    \r\n    `,\r\n  ],\r\n})\r\nexport class StartScreenComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n  @Input()\r\n  mode: ProgressBarMode = 'indeterminate';\r\n\r\n  /**\r\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\r\n   */\r\n  @Input()\r\n  value: number = 40;\r\n\r\n  /**\r\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\r\n   */\r\n  @Input()\r\n  bufferValue: number = 60;\r\n\r\n  /**\r\n   * ProgressBar Color - primary (Theme color) | accent | warn\r\n   */\r\n  @Input()\r\n  color: ThemePalette = 'primary';\r\n\r\n  @Input()\r\n  markdowncode: string = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .footer {\n      margin: 32px 0 8px;\n\n      &-text {\n        display: block;\n        font-size: 13px;\n        padding-top: 4px;\n      }\n    }\n\n    .mat-fab,\n    .mat-mini-fab {\n      img {\n        margin-bottom: 2px;\n      }\n    }\n\n    .sticky {\n      position: sticky;\n      top: 80px;\n    }\n\n    .scrollup-button {\n      margin:14px;\n\n      &--fixed {\n        position: fixed;\n        bottom: 16px;\n        right: 16px;\n      }\n    }    \n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 502
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "TaskCheckComponent",
            "id": "component-TaskCheckComponent-3da4bc1c1c9d7b8428e4c6464d5e3abaf94bd4d1124e1d0345cb8597b196388f1caa4af1113b54fe9c11df5406880f16cabdf6bb3facaf4b550ba641f2a19419",
            "file": "src/app/components/checkComponent.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-check-task",
            "styleUrls": [],
            "styles": [],
            "template": "   <h1>\n    love\n</h1>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component} from '@angular/core';\r\n\r\n\r\n@Component({\r\n  selector: 'app-check-task',\r\n  template: `\r\n   <h1>\r\n    love\r\n</h1>\r\n  `\r\n})\r\nexport class TaskCheckComponent {\r\n  \r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "TaskComponent",
            "id": "component-TaskComponent-15b261e4306d7606c2814966046a21c10f4612e9462efbf76678c2789c86e938f9e7b60bdbd19296b5bc273998b43c6bbf58ad53054a0932c4279f46d95d6557",
            "file": "src/app/components/task.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"list-item {{ task.state }}\">\n  <label\n    [attr.aria-label]=\"'archiveTask-' + task.id\"\n    for=\"checked-{{ task.id }}\"\n    class=\"checkbox\"\n  >\n    <input\n      type=\"checkbox\"\n      disabled=\"true\"\n      [defaultChecked]=\"task.state === 'TASK_ARCHIVED'\"\n      name=\"checked-{{ task.id }}\"\n      id=\"checked-{{ task.id }}\"\n    />\n    <span class=\"checkbox-custom\" (click)=\"onArchive(task.id)\"></span>\n  </label>\n  <label\n    [attr.aria-label]=\"task.title + ''\"\n    for=\"title-{{ task.id }}\"\n    class=\"title\"\n  >\n    <input\n      type=\"text\"\n      [value]=\"task.title\"\n      readonly=\"true\"\n      id=\"title-{{ task.id }}\"\n      name=\"title-{{ task.id }}\"\n      style=\"text-overflow: ellipsis;\"\n    />\n  </label>\n  <button\n    *ngIf=\"task?.state !== 'TASK_ARCHIVED'\"\n    class=\"pin-button\"\n    [attr.aria-label]=\"'pinTask-' + task.id\"\n    (click)=\"onPin(task.id)\"\n  >\n    <span class=\"icon-star\"></span>\n  </button>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "task",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "Task",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onArchiveTask",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "EventEmitter"
                },
                {
                    "name": "onPinTask",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onArchive",
                    "args": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nComponent method to trigger the onArchive event\n",
                    "description": "<p>Component method to trigger the onArchive event</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1813,
                                "end": 1815,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1807,
                                "end": 1812,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>string</p>\n"
                        }
                    ]
                },
                {
                    "name": "onPin",
                    "args": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nComponent method to trigger the onPin event\n",
                    "description": "<p>Component method to trigger the onPin event</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1667,
                                "end": 1669,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1661,
                                "end": 1666,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>string</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\r\nimport { Task } from '../models/task.model';\r\n\r\n@Component({\r\n  selector: 'app-task',\r\n  template: `\r\n    <div class=\"list-item {{ task.state }}\">\r\n      <label\r\n        [attr.aria-label]=\"'archiveTask-' + task.id\"\r\n        for=\"checked-{{ task.id }}\"\r\n        class=\"checkbox\"\r\n      >\r\n        <input\r\n          type=\"checkbox\"\r\n          disabled=\"true\"\r\n          [defaultChecked]=\"task.state === 'TASK_ARCHIVED'\"\r\n          name=\"checked-{{ task.id }}\"\r\n          id=\"checked-{{ task.id }}\"\r\n        />\r\n        <span class=\"checkbox-custom\" (click)=\"onArchive(task.id)\"></span>\r\n      </label>\r\n      <label\r\n        [attr.aria-label]=\"task.title + ''\"\r\n        for=\"title-{{ task.id }}\"\r\n        class=\"title\"\r\n      >\r\n        <input\r\n          type=\"text\"\r\n          [value]=\"task.title\"\r\n          readonly=\"true\"\r\n          id=\"title-{{ task.id }}\"\r\n          name=\"title-{{ task.id }}\"\r\n          style=\"text-overflow: ellipsis;\"\r\n        />\r\n      </label>\r\n      <button\r\n        *ngIf=\"task?.state !== 'TASK_ARCHIVED'\"\r\n        class=\"pin-button\"\r\n        [attr.aria-label]=\"'pinTask-' + task.id\"\r\n        (click)=\"onPin(task.id)\"\r\n      >\r\n        <span class=\"icon-star\"></span>\r\n      </button>\r\n    </div>\r\n  `\r\n})\r\nexport class TaskComponent {\r\n  @Input()\r\n  task!: Task;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onPinTask = new EventEmitter<Event>();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onArchiveTask = new EventEmitter<Event>();\r\n\r\n  /**\r\n   * Component method to trigger the onPin event\r\n   * @param id string\r\n   */\r\n  onPin(id: any) {\r\n    this.onPinTask.emit(id);\r\n  }\r\n  /**\r\n   * Component method to trigger the onArchive event\r\n   * @param id string\r\n   */\r\n  onArchive(id: any) {\r\n    this.onArchiveTask.emit(id);\r\n  }\r\n\r\n  \r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "TaskListComponent",
            "id": "component-TaskListComponent-0f77e1d7ceee85302cda1f91417e939b3a48fb8135ba606e5f62e6e316434b6cd3ba09609268da5db54caf651fda1d123b372a7254985339d0a7e892ebda2dce",
            "file": "src/app/components/task-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task-list",
            "styleUrls": [],
            "styles": [],
            "template": "<app-pure-task-list\n  [tasks]=\"tasks$ | async\"\n  (onArchiveTask)=\"archiveTask($event)\"\n  (onPinTask)=\"pinTask($event)\"\n></app-pure-task-list>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "tasks$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": true,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "archiveTask",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nComponent method to trigger the archiveTask event\n",
                    "description": "<p>Component method to trigger the archiveTask event</p>\n",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pinTask",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nComponent method to trigger the pinTask event\n",
                    "description": "<p>Component method to trigger the pinTask event</p>\n",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Store } from '@ngxs/store';\r\nimport { ArchiveTask, PinTask } from '../state/task.state';\r\nimport { Observable } from 'rxjs';\r\n\r\n\r\n@Component({\r\n  selector: 'app-task-list',\r\n  template: `\r\n    <app-pure-task-list\r\n      [tasks]=\"tasks$ | async\"\r\n      (onArchiveTask)=\"archiveTask($event)\"\r\n      (onPinTask)=\"pinTask($event)\"\r\n    ></app-pure-task-list>  \r\n  `,\r\n})\r\nexport class TaskListComponent{\r\n  tasks$?: Observable<any>;\r\n\r\n  constructor(private store: Store) {\r\n    this.tasks$ = store.select((state) => {\r\n      console.log(state.taskbox.tasks);\r\n      return state.taskbox.tasks;      \r\n    } );\r\n    \r\n  }\r\n\r\n  /**\r\n   * Component method to trigger the archiveTask event\r\n   */\r\n  archiveTask(id: string) {\r\n    this.store.dispatch(new ArchiveTask(id));\r\n  }\r\n\r\n  /**\r\n   * Component method to trigger the pinTask event\r\n   */\r\n  pinTask(id: string) {\r\n    this.store.dispatch(new PinTask(id));\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "TaskMarkedComponent",
            "id": "component-TaskMarkedComponent-414a5cd2dc4af77809f98dbe34c58b6749a755b48984a8a6c03187ddcb00e3cd2c1b4d7db153ba2c7965c188f811a58336a7f99399a6db395518b489d31d2030",
            "file": "src/app/components/taskMarked.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task-marked",
            "styleUrls": [],
            "styles": [],
            "template": "   <markdown class=\"variable-binding\" [data]=\"markdowncode\"></markdown>\n<div class=\"markdown\">\n  <markdown mermaid [src]=\"'../../assets/myfile.md'\"></markdown>\n</div>\n<pre class=\"mermaid\">\n  sequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n</pre>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "task",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "Task",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onArchiveTask",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter"
                },
                {
                    "name": "onPinTask",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "markdowncode",
                    "defaultValue": "`## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onArchive",
                    "args": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nComponent method to trigger the onArchive event\n",
                    "description": "<p>Component method to trigger the onArchive event</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1044,
                                "end": 1046,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1038,
                                "end": 1043,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>string</p>\n"
                        }
                    ]
                },
                {
                    "name": "onPin",
                    "args": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nComponent method to trigger the onPin event\n",
                    "description": "<p>Component method to trigger the onPin event</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 898,
                                "end": 900,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 892,
                                "end": 897,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>string</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\r\nimport { Task } from '../models/task.model';\r\nimport mermaid from 'mermaid';\r\n\r\n@Component({\r\n  selector: 'app-task-marked',\r\n  template: `\r\n   <markdown class=\"variable-binding\" [data]=\"markdowncode\"></markdown>\r\n<div class=\"markdown\">\r\n  <markdown mermaid [src]=\"'../../assets/myfile.md'\"></markdown>\r\n</div>\r\n<pre class=\"mermaid\">\r\n  sequenceDiagram\r\n    Alice->>John: Hello John, how are you?\r\n    John-->>Alice: Great!\r\n</pre>\r\n  `\r\n})\r\nexport class TaskMarkedComponent implements OnInit {\r\n  @Input()\r\n  task!: Task;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onPinTask = new EventEmitter<Event>();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onArchiveTask = new EventEmitter<Event>();\r\n\r\n  /**\r\n   * Component method to trigger the onPin event\r\n   * @param id string\r\n   */\r\n  onPin(id: any) {\r\n    this.onPinTask.emit(id);\r\n  }\r\n  /**\r\n   * Component method to trigger the onArchive event\r\n   * @param id string\r\n   */\r\n  onArchive(id: any) {\r\n    this.onArchiveTask.emit(id);\r\n  }\r\n\r\n  markdowncode = `## Markdown __rulez__!\r\n  ---\r\n  \r\n  ### Syntax highlight\r\n  \\`\\`\\`typescript\r\n  const language = 'typescript';\r\n  \\`\\`\\`\r\n  \r\n  ### Lists\r\n  1. Ordered list\r\n  2. Another bullet point\r\n     - Unordered list\r\n     - Another unordered bullet\r\n  \r\n  ### Blockquote\r\n  > Blockquote to the max`;\r\n\r\n  ngOnInit(): void {\r\n    mermaid.initialize({\r\n      startOnLoad: true\r\n    });\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "WelcomeComponent",
            "id": "component-WelcomeComponent-35f0950a414d59028659672d52561fcc412f374a310e7eac392f28a42f09cec128f1b38e8e5f1d163deec8ae4c6e4896114e3527ec37201346193fc3b9d61a1c",
            "file": "src/stories/welcome.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-welcome-component",
            "styleUrls": [],
            "styles": [
                "\n      main {\n        padding: 15px;\n        line-height: 1.4;\n        font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;\n        background-color: #ffffff;\n      }\n\n      .note {\n        opacity: 0.5;\n      }\n\n      .inline-code {\n        font-size: 15px;\n        font-weight: 600;\n        padding: 2px 5px;\n        border: 1px solid #eae9e9;\n        border-radius: 4px;\n        background-color: #f3f2f2;\n        color: #3a3a3a;\n      }\n\n      a {\n        color: #1474f3;\n        text-decoration: none;\n        border-bottom: 1px solid #1474f3;\n        padding-bottom: 2px;\n      }\n    "
            ],
            "template": "<main>\n  <h1>Welcome to storybook</h1>\n  <p>This is a UI component dev environment for your app.</p>\n  <p>\n    We've added some basic stories inside the\n    <span class=\"inline-code\">src/stories</span> directory. <br />\n    A story is a single state of one or more UI components. You can have as many stories as you\n    want. <br />\n    (Basically a story is like a visual test case.)\n  </p>\n  <p>\n    See these sample\n    <a (click)=\"showApp.emit($event)\" role=\"button\" tabIndex=\"0\">stories</a> for a component\n    called <span class=\"inline-code\">Button</span> .\n  </p>\n  <p>\n    Just like that, you can add your own components as stories. <br />\n    You can also edit those components and see changes right away. <br />\n    (Try editing the <span class=\"inline-code\">Button</span> stories located at\n    <span class=\"inline-code\">src/stories/index.js</span>.)\n  </p>\n  <p>\n    Usually we create stories with smaller UI components in the app.<br />\n    Have a look at the\n    <a\n      href=\"https://storybook.js.org/basics/writing-stories\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      Writing Stories\n    </a>\n    section in our documentation.\n  </p>\n  <p class=\"note\">\n    <b>NOTE:</b> <br />\n    Have a look at the <span class=\"inline-code\">.storybook/webpack.config.js</span> to add\n    webpack loaders and plugins you are using in this project.\n  </p>\n</main>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "showApp",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-welcome-component',\r\n  template: `\r\n    <main>\r\n      <h1>Welcome to storybook</h1>\r\n      <p>This is a UI component dev environment for your app.</p>\r\n      <p>\r\n        We've added some basic stories inside the\r\n        <span class=\"inline-code\">src/stories</span> directory. <br />\r\n        A story is a single state of one or more UI components. You can have as many stories as you\r\n        want. <br />\r\n        (Basically a story is like a visual test case.)\r\n      </p>\r\n      <p>\r\n        See these sample\r\n        <a (click)=\"showApp.emit($event)\" role=\"button\" tabIndex=\"0\">stories</a> for a component\r\n        called <span class=\"inline-code\">Button</span> .\r\n      </p>\r\n      <p>\r\n        Just like that, you can add your own components as stories. <br />\r\n        You can also edit those components and see changes right away. <br />\r\n        (Try editing the <span class=\"inline-code\">Button</span> stories located at\r\n        <span class=\"inline-code\">src/stories/index.js</span>.)\r\n      </p>\r\n      <p>\r\n        Usually we create stories with smaller UI components in the app.<br />\r\n        Have a look at the\r\n        <a\r\n          href=\"https://storybook.js.org/basics/writing-stories\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Writing Stories\r\n        </a>\r\n        section in our documentation.\r\n      </p>\r\n      <p class=\"note\">\r\n        <b>NOTE:</b> <br />\r\n        Have a look at the <span class=\"inline-code\">.storybook/webpack.config.js</span> to add\r\n        webpack loaders and plugins you are using in this project.\r\n      </p>\r\n    </main>\r\n  `,\r\n  styles: [\r\n    `\r\n      main {\r\n        padding: 15px;\r\n        line-height: 1.4;\r\n        font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;\r\n        background-color: #ffffff;\r\n      }\r\n\r\n      .note {\r\n        opacity: 0.5;\r\n      }\r\n\r\n      .inline-code {\r\n        font-size: 15px;\r\n        font-weight: 600;\r\n        padding: 2px 5px;\r\n        border: 1px solid #eae9e9;\r\n        border-radius: 4px;\r\n        background-color: #f3f2f2;\r\n        color: #3a3a3a;\r\n      }\r\n\r\n      a {\r\n        color: #1474f3;\r\n        text-decoration: none;\r\n        border-bottom: 1px solid #1474f3;\r\n        padding-bottom: 2px;\r\n      }\r\n    `,\r\n  ],\r\n})\r\nexport default class WelcomeComponent {\r\n  @Output()\r\n  showApp = new EventEmitter<any>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      main {\n        padding: 15px;\n        line-height: 1.4;\n        font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;\n        background-color: #ffffff;\n      }\n\n      .note {\n        opacity: 0.5;\n      }\n\n      .inline-code {\n        font-size: 15px;\n        font-weight: 600;\n        padding: 2px 5px;\n        border: 1px solid #eae9e9;\n        border-radius: 4px;\n        background-color: #f3f2f2;\n        color: #3a3a3a;\n      }\n\n      a {\n        color: #1474f3;\n        text-decoration: none;\n        border-bottom: 1px solid #1474f3;\n        padding-bottom: 2px;\n      }\n    \n"
        },
        {
            "name": "WelcomeComponent",
            "id": "component-WelcomeComponent-35f0950a414d59028659672d52561fcc412f374a310e7eac392f28a42f09cec128f1b38e8e5f1d163deec8ae4c6e4896114e3527ec37201346193fc3b9d61a1c-1",
            "file": "src/stories/angular-demo/welcome.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-welcome-component",
            "styleUrls": [],
            "styles": [
                "\n      main {\n        padding: 15px;\n        line-height: 1.4;\n        font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;\n        background-color: #ffffff;\n      }\n\n      .note {\n        opacity: 0.5;\n      }\n\n      .inline-code {\n        font-size: 15px;\n        font-weight: 600;\n        padding: 2px 5px;\n        border: 1px solid #eae9e9;\n        border-radius: 4px;\n        background-color: #f3f2f2;\n        color: #3a3a3a;\n      }\n\n      a {\n        color: #1474f3;\n        text-decoration: none;\n        border-bottom: 1px solid #1474f3;\n        padding-bottom: 2px;\n      }\n    "
            ],
            "template": "<main>\n  <h1>Welcome to storybook</h1>\n  <p>This is a UI component dev environment for your app.</p>\n  <p>\n    We've added some basic stories inside the\n    <span class=\"inline-code\">src/stories</span> directory. <br />\n    A story is a single state of one or more UI components. You can have as many stories as you\n    want. <br />\n    (Basically a story is like a visual test case.)\n  </p>\n  <p>\n    See these sample\n    <a (click)=\"showApp.emit($event)\" role=\"button\" tabIndex=\"0\">stories</a> for a component\n    called <span class=\"inline-code\">Button</span> .\n  </p>\n  <p>\n    Just like that, you can add your own components as stories. <br />\n    You can also edit those components and see changes right away. <br />\n    (Try editing the <span class=\"inline-code\">Button</span> stories located at\n    <span class=\"inline-code\">src/stories/index.js</span>.)\n  </p>\n  <p>\n    Usually we create stories with smaller UI components in the app.<br />\n    Have a look at the\n    <a\n      href=\"https://storybook.js.org/basics/writing-stories\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      Writing Stories\n    </a>\n    section in our documentation.\n  </p>\n  <p class=\"note\">\n    <b>NOTE:</b> <br />\n    Have a look at the <span class=\"inline-code\">.storybook/webpack.config.js</span> to add\n    webpack loaders and plugins you are using in this project.\n  </p>\n</main>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "showApp",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-welcome-component',\r\n  template: `\r\n    <main>\r\n      <h1>Welcome to storybook</h1>\r\n      <p>This is a UI component dev environment for your app.</p>\r\n      <p>\r\n        We've added some basic stories inside the\r\n        <span class=\"inline-code\">src/stories</span> directory. <br />\r\n        A story is a single state of one or more UI components. You can have as many stories as you\r\n        want. <br />\r\n        (Basically a story is like a visual test case.)\r\n      </p>\r\n      <p>\r\n        See these sample\r\n        <a (click)=\"showApp.emit($event)\" role=\"button\" tabIndex=\"0\">stories</a> for a component\r\n        called <span class=\"inline-code\">Button</span> .\r\n      </p>\r\n      <p>\r\n        Just like that, you can add your own components as stories. <br />\r\n        You can also edit those components and see changes right away. <br />\r\n        (Try editing the <span class=\"inline-code\">Button</span> stories located at\r\n        <span class=\"inline-code\">src/stories/index.js</span>.)\r\n      </p>\r\n      <p>\r\n        Usually we create stories with smaller UI components in the app.<br />\r\n        Have a look at the\r\n        <a\r\n          href=\"https://storybook.js.org/basics/writing-stories\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Writing Stories\r\n        </a>\r\n        section in our documentation.\r\n      </p>\r\n      <p class=\"note\">\r\n        <b>NOTE:</b> <br />\r\n        Have a look at the <span class=\"inline-code\">.storybook/webpack.config.js</span> to add\r\n        webpack loaders and plugins you are using in this project.\r\n      </p>\r\n    </main>\r\n  `,\r\n  styles: [\r\n    `\r\n      main {\r\n        padding: 15px;\r\n        line-height: 1.4;\r\n        font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;\r\n        background-color: #ffffff;\r\n      }\r\n\r\n      .note {\r\n        opacity: 0.5;\r\n      }\r\n\r\n      .inline-code {\r\n        font-size: 15px;\r\n        font-weight: 600;\r\n        padding: 2px 5px;\r\n        border: 1px solid #eae9e9;\r\n        border-radius: 4px;\r\n        background-color: #f3f2f2;\r\n        color: #3a3a3a;\r\n      }\r\n\r\n      a {\r\n        color: #1474f3;\r\n        text-decoration: none;\r\n        border-bottom: 1px solid #1474f3;\r\n        padding-bottom: 2px;\r\n      }\r\n    `,\r\n  ],\r\n})\r\nexport default class WelcomeComponent {\r\n  @Output()\r\n  showApp = new EventEmitter<any>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      main {\n        padding: 15px;\n        line-height: 1.4;\n        font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif;\n        background-color: #ffffff;\n      }\n\n      .note {\n        opacity: 0.5;\n      }\n\n      .inline-code {\n        font-size: 15px;\n        font-weight: 600;\n        padding: 2px 5px;\n        border: 1px solid #eae9e9;\n        border-radius: 4px;\n        background-color: #f3f2f2;\n        color: #3a3a3a;\n      }\n\n      a {\n        color: #1474f3;\n        text-decoration: none;\n        border-bottom: 1px solid #1474f3;\n        padding-bottom: 2px;\n      }\n    \n",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "WelcomeComponent-1"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-0b4772115c0eb37275c497eafe4711fbfa694e32d596e1537e262e2e240a2530062e4bca9994529c6bc67e912b47874a8d2e20144d5eabf96426e704a8aea4b8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgxsModule } from '@ngxs/store';\r\nimport { NgxsReduxDevtoolsPluginModule } from '@ngxs/devtools-plugin';\r\nimport { NgxsLoggerPluginModule } from '@ngxs/logger-plugin';\r\n\r\nimport { environment } from '../environments/environment';\r\nimport { AppComponent } from './app.component';\r\nimport { NgModule } from '@angular/core';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { TaskModule } from './components/task.module';\r\nimport { PureInboxScreenComponent } from './components/pure-inbox-screen.component';\r\nimport { MarkdownModule, MarkdownService } from 'ngx-markdown';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n//import { InboxScreenComponent } from './components/inbox-screen.component';\r\nimport { TaskCheckComponent } from './components/checkComponent.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport {\r\n  ProgressBarComponent,\r\n  AboutmeIntroductionComponent,\r\n  AboutmeLecturerComponent,\r\n  AboutmeTelecomComponent,\r\n  AboutmeDevelopmentComponent,\r\n  AboutmeTestingComponent, StartScreenComponent\r\n} from './progress-bar/progress-bar.component';\r\nimport { AppSharedModule } from './app-shared/app-shared.module';\r\nimport { StackblitzComponent,\r\n  StackblitzTitleComponent,\r\n  StackblitzRunAngularComponent,\r\n  StackblitzStorybookComponent,\r\n  StackblitzUpdatePRComponent,\r\n  StackblitzStartPageComponent,\r\n  StackblitzStartTestComponent,\r\n  StackblitzMermaidInlineComponent\r\n } from './youtube/2022sept02/stackblitz.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    PureInboxScreenComponent,\r\n    TaskCheckComponent,\r\n    ProgressBarComponent,\r\n    AboutmeIntroductionComponent,\r\n    AboutmeLecturerComponent,\r\n    AboutmeTelecomComponent,\r\n    AboutmeDevelopmentComponent,\r\n    AboutmeTestingComponent,StartScreenComponent,\r\n    StackblitzComponent, StackblitzTitleComponent,\r\n    StackblitzRunAngularComponent,\r\n    StackblitzStorybookComponent,\r\n    StackblitzUpdatePRComponent,\r\n    StackblitzStartPageComponent,\r\n    StackblitzStartTestComponent,\r\n    StackblitzMermaidInlineComponent\r\n  ], //],\r\n  imports: [\r\n    AppSharedModule,\r\n    HttpClientModule,\r\n    AppRoutingModule,\r\n    BrowserModule,\r\n    TaskModule,\r\n    NgxsModule.forRoot([], {\r\n      developmentMode: !environment.production,\r\n    }),\r\n    NgxsReduxDevtoolsPluginModule.forRoot(),\r\n    NgxsLoggerPluginModule.forRoot({\r\n      disabled: environment.production,\r\n    }),\r\n    MarkdownModule.forRoot({ loader: HttpClient }),\r\n    BrowserAnimationsModule,\r\n  ],\r\n  providers: [MarkdownService],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AboutmeDevelopmentComponent"
                        },
                        {
                            "name": "AboutmeIntroductionComponent"
                        },
                        {
                            "name": "AboutmeLecturerComponent"
                        },
                        {
                            "name": "AboutmeTelecomComponent"
                        },
                        {
                            "name": "AboutmeTestingComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ProgressBarComponent"
                        },
                        {
                            "name": "PureInboxScreenComponent"
                        },
                        {
                            "name": "StackblitzComponent"
                        },
                        {
                            "name": "StackblitzRunAngularComponent"
                        },
                        {
                            "name": "StackblitzStartPageComponent"
                        },
                        {
                            "name": "StackblitzStartTestComponent"
                        },
                        {
                            "name": "StackblitzStorybookComponent"
                        },
                        {
                            "name": "StackblitzTitleComponent"
                        },
                        {
                            "name": "StackblitzUpdatePRComponent"
                        },
                        {
                            "name": "StartScreenComponent"
                        },
                        {
                            "name": "TaskCheckComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "AppSharedModule"
                        },
                        {
                            "name": "TaskModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-78922b3ae99d2c5249b333980bd5afde1b120b2cc6fedfd41b8b2cc90f279797cb4b22e183bf7e1d1dfab8c6100e77e7812c110234d81f866f544f28a3e18b15",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppSharedModule",
            "id": "module-AppSharedModule-1c5bce74035c950f95fd3548eac9b3da822a3874c69219ca2b9026c06ab72a40d3bc126814e60847e5845c3946d3ea07306c6140c995031171c2b9bd3a16dbe5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-shared/app-shared.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MaterialModule } from '../material/material.module';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [CommonModule],\r\n  exports: [MaterialModule, FormsModule, ReactiveFormsModule, FlexLayoutModule],\r\n})\r\nexport class AppSharedModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MaterialModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MaterialModule",
            "id": "module-MaterialModule-1ad804fd29031e9688450dc2e587fa9e5808bbd00cdbe0fd5c18ecaf0f65bfa5761436cdcb1c8aefb846531209ab6a6fe2ae6fe5e3d402b014e05210c578046a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/material/material.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule, MatRippleModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatTreeModule } from '@angular/material/tree';\nimport { OverlayModule } from '@angular/cdk/overlay';\n \n@NgModule({\n  exports: [\n    A11yModule,\n    ClipboardModule,\n    CdkStepperModule,\n    CdkTableModule,\n    CdkTreeModule,\n    DragDropModule,\n    MatAutocompleteModule,\n    MatBadgeModule,\n    MatBottomSheetModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatStepperModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatTreeModule,\n    OverlayModule,\n    PortalModule,\n    ScrollingModule,\n  ]\n})\nexport class MaterialModule { }",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TaskMarkedModule",
            "id": "module-TaskMarkedModule-9cf5235267f6cf39e88bea068941e857462f0b5fae7beb176e72baf55ecf979530757e1e645fd631d4ca271bc90947cc8b20c828cc120b510ca666dd07575e87",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/taskMarked.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { MarkdownModule } from 'ngx-markdown';\r\n\r\nimport { InboxScreenComponent } from './inbox-screen.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, MarkdownModule.forChild()],\r\n  exports: [InboxScreenComponent],\r\n  declarations: [InboxScreenComponent],\r\n  providers: [],\r\n})\r\nexport class TaskMarkedModule {}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "InboxScreenComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "InboxScreenComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TaskModule",
            "id": "module-TaskModule-8d672c6302a17817b17a18f4985a00db00e86e1788c24c8c598fb1edb764e9f948e96e437c8808e773bc264114685a13156596b44ab09c1e39f05223c0de2fc6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/task.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgxsModule } from '@ngxs/store';\r\n\r\nimport { TaskComponent } from './task.component';\r\nimport { TaskListComponent } from './task-list.component';\r\nimport { TasksState } from '../state/task.state';\r\nimport { PureTaskListComponent } from './pure-task-list.component';\r\nimport { MarkdownModule } from 'ngx-markdown';\r\n\r\nimport {TaskMarkedComponent}from './taskMarked.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, NgxsModule.forFeature([TasksState]), MarkdownModule.forChild()],\r\n  exports: [TaskComponent, TaskListComponent,TaskMarkedComponent],\r\n  declarations: [TaskComponent, TaskListComponent, PureTaskListComponent, TaskMarkedComponent],\r\n  providers: [],\r\n})\r\nexport class TaskModule {}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PureTaskListComponent"
                        },
                        {
                            "name": "TaskComponent"
                        },
                        {
                            "name": "TaskListComponent"
                        },
                        {
                            "name": "TaskMarkedComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TaskComponent"
                        },
                        {
                            "name": "TaskListComponent"
                        },
                        {
                            "name": "TaskMarkedComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "actions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/task.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\r\n  PIN_TASK: 'PIN_TASK',\r\n  ERROR: 'APP_ERROR',\r\n}"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "defaultTasks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/task.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\r\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\r\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\r\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\r\n]"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "FlowChart",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/stackblitz.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Introduction",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Development.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Introduction",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Introduction.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Introduction",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Telecom.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "RunAngular",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/stackblitzRunAngular.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "RunStorybook",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/stackblitzStorybook.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Teaching",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Lecturer.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Development.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<AboutmeDevelopmentComponent>",
                "defaultValue": "(\r\n  args: AboutmeDevelopmentComponent\r\n) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Introduction.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<AboutmeIntroductionComponent>",
                "defaultValue": "(\r\n  args: AboutmeIntroductionComponent\r\n) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Lecturer.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<AboutmeLecturerComponent>",
                "defaultValue": "(\r\n  args: AboutmeLecturerComponent\r\n) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Progressbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ProgressBarComponent>",
                "defaultValue": "(args: ProgressBarComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/stackblitz.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<StackblitzComponent>",
                "defaultValue": "(\r\n  args: StackblitzComponent\r\n) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/stackblitzRunAngular.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<StackblitzRunAngularComponent>",
                "defaultValue": "(\r\n  args: StackblitzRunAngularComponent\r\n) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/stackblitzStorybook.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<StackblitzStorybookComponent>",
                "defaultValue": "(\r\n  args: StackblitzStorybookComponent\r\n) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/stackblitzUpdatePR.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<StackblitzUpdatePRComponent>",
                "defaultValue": "(\r\n  args: StackblitzUpdatePRComponent\r\n) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/stackblitzTitle.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<StackblitzTitleComponent>",
                "defaultValue": "(\r\n  args: StackblitzTitleComponent\r\n) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Telecom.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<AboutmeTelecomComponent>",
                "defaultValue": "(\r\n  args: AboutmeTelecomComponent\r\n) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "TillNow",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Progressbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Title",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/stackblitzTitle.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "UpdatePR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/stackblitzUpdatePR.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/state/task.state.ts": [
                {
                    "name": "actions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/task.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\r\n  PIN_TASK: 'PIN_TASK',\r\n  ERROR: 'APP_ERROR',\r\n}"
                },
                {
                    "name": "defaultTasks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/task.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\r\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\r\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\r\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\r\n]"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/stories/stackblitz.stories.ts": [
                {
                    "name": "FlowChart",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/stackblitz.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/stackblitz.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<StackblitzComponent>",
                    "defaultValue": "(\r\n  args: StackblitzComponent\r\n) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/Development.stories.ts": [
                {
                    "name": "Introduction",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Development.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Development.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<AboutmeDevelopmentComponent>",
                    "defaultValue": "(\r\n  args: AboutmeDevelopmentComponent\r\n) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/Introduction.stories.ts": [
                {
                    "name": "Introduction",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Introduction.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Introduction.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<AboutmeIntroductionComponent>",
                    "defaultValue": "(\r\n  args: AboutmeIntroductionComponent\r\n) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/Telecom.stories.ts": [
                {
                    "name": "Introduction",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Telecom.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Telecom.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<AboutmeTelecomComponent>",
                    "defaultValue": "(\r\n  args: AboutmeTelecomComponent\r\n) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/stackblitzRunAngular.stories.ts": [
                {
                    "name": "RunAngular",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/stackblitzRunAngular.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/stackblitzRunAngular.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<StackblitzRunAngularComponent>",
                    "defaultValue": "(\r\n  args: StackblitzRunAngularComponent\r\n) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/stackblitzStorybook.stories.ts": [
                {
                    "name": "RunStorybook",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/stackblitzStorybook.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/stackblitzStorybook.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<StackblitzStorybookComponent>",
                    "defaultValue": "(\r\n  args: StackblitzStorybookComponent\r\n) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/Lecturer.stories.ts": [
                {
                    "name": "Teaching",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Lecturer.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Lecturer.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<AboutmeLecturerComponent>",
                    "defaultValue": "(\r\n  args: AboutmeLecturerComponent\r\n) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/Progressbar.stories.ts": [
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Progressbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ProgressBarComponent>",
                    "defaultValue": "(args: ProgressBarComponent) => ({\r\n  props: args,\r\n})"
                },
                {
                    "name": "TillNow",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Progressbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/stories/stackblitzUpdatePR.stories.ts": [
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/stackblitzUpdatePR.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<StackblitzUpdatePRComponent>",
                    "defaultValue": "(\r\n  args: StackblitzUpdatePRComponent\r\n) => ({\r\n  props: args,\r\n})"
                },
                {
                    "name": "UpdatePR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/stackblitzUpdatePR.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/stories/stackblitzTitle.stories.ts": [
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/stackblitzTitle.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<StackblitzTitleComponent>",
                    "defaultValue": "(\r\n  args: StackblitzTitleComponent\r\n) => ({\r\n  props: args,\r\n})"
                },
                {
                    "name": "Title",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/stackblitzTitle.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 11,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/checkComponent.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskCheckComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/inbox-screen.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InboxScreenComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pure-inbox-screen.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PureInboxScreenComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pure-task-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PureTaskListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskListComponent",
                "coveragePercent": 40,
                "coverageCount": "2/5",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/task.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskComponent",
                "coveragePercent": 33,
                "coverageCount": "2/6",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/taskMarked.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskMarkedComponent",
                "coveragePercent": 25,
                "coverageCount": "2/8",
                "status": "low"
            },
            {
                "filePath": "src/app/models/task.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Task",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/progress-bar/progress-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AboutmeDevelopmentComponent",
                "coveragePercent": 37,
                "coverageCount": "3/8",
                "status": "medium"
            },
            {
                "filePath": "src/app/progress-bar/progress-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AboutmeIntroductionComponent",
                "coveragePercent": 37,
                "coverageCount": "3/8",
                "status": "medium"
            },
            {
                "filePath": "src/app/progress-bar/progress-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AboutmeLecturerComponent",
                "coveragePercent": 37,
                "coverageCount": "3/8",
                "status": "medium"
            },
            {
                "filePath": "src/app/progress-bar/progress-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AboutmeTelecomComponent",
                "coveragePercent": 37,
                "coverageCount": "3/8",
                "status": "medium"
            },
            {
                "filePath": "src/app/progress-bar/progress-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AboutmeTestingComponent",
                "coveragePercent": 37,
                "coverageCount": "3/8",
                "status": "medium"
            },
            {
                "filePath": "src/app/progress-bar/progress-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProgressBarComponent",
                "coveragePercent": 50,
                "coverageCount": "4/8",
                "status": "medium"
            },
            {
                "filePath": "src/app/progress-bar/progress-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StartScreenComponent",
                "coveragePercent": 37,
                "coverageCount": "3/8",
                "status": "medium"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppError",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ArchiveTask",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PinTask",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TasksState",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskStateModel",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultTasks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/youtube/2022sept02/stackblitz.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StackblitzComponent",
                "coveragePercent": 37,
                "coverageCount": "3/8",
                "status": "medium"
            },
            {
                "filePath": "src/app/youtube/2022sept02/stackblitz.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StackblitzRunAngularComponent",
                "coveragePercent": 37,
                "coverageCount": "3/8",
                "status": "medium"
            },
            {
                "filePath": "src/app/youtube/2022sept02/stackblitz.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StackblitzStartPageComponent",
                "coveragePercent": 37,
                "coverageCount": "3/8",
                "status": "medium"
            },
            {
                "filePath": "src/app/youtube/2022sept02/stackblitz.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StackblitzStartTestComponent",
                "coveragePercent": 17,
                "coverageCount": "3/17",
                "status": "low"
            },
            {
                "filePath": "src/app/youtube/2022sept02/stackblitz.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StackblitzStorybookComponent",
                "coveragePercent": 37,
                "coverageCount": "3/8",
                "status": "medium"
            },
            {
                "filePath": "src/app/youtube/2022sept02/stackblitz.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StackblitzTitleComponent",
                "coveragePercent": 37,
                "coverageCount": "3/8",
                "status": "medium"
            },
            {
                "filePath": "src/app/youtube/2022sept02/stackblitz.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StackblitzUpdatePRComponent",
                "coveragePercent": 37,
                "coverageCount": "3/8",
                "status": "medium"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Development.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Introduction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Development.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Introduction.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Introduction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Introduction.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Lecturer.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Teaching",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Lecturer.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Progressbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Progressbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TillNow",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Telecom.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Introduction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Telecom.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/angular-demo/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/stories/angular-demo/welcome.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WelcomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/stackblitz.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FlowChart",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/stackblitz.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/stackblitzRunAngular.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RunAngular",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/stackblitzRunAngular.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/stackblitzStorybook.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RunStorybook",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/stackblitzStorybook.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/stackblitzTitle.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/stackblitzTitle.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Title",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/stackblitzUpdatePR.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/stackblitzUpdatePR.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UpdatePR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/welcome.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WelcomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}