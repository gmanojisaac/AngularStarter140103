{
    "pipes": [],
    "interfaces": [
        {
            "name": "Task",
            "id": "interface-Task-decf62169610b19f3b9df15ab33e4f2ed95f6f9967833fe4162d82c58eed4ea45b95609ff6183f49d3dfeb9c070334e47ef64a5fe30ffed733d451497be96375",
            "file": "src/app/models/task.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Task {\n  id: string;\n  title: string;\n  state: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TaskStateModel",
            "id": "interface-TaskStateModel-604428d82b5cd9c915a19856e571ab6bfb3eeb3930f658497fa05fe3db7f651a11693d6ed548c6a5f5ce98b9f59121040093802fedc979d51996caad2badd7dd",
            "file": "src/app/state/task.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { State, Selector, Action, StateContext } from '@ngxs/store';\nimport { patch, updateItem } from '@ngxs/store/operators';\nimport { Task } from '../models/task.model';\n\n// Defines the actions available to the app\nexport const actions = {\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK',\n  ERROR: 'APP_ERROR',\n};\n\nexport class ArchiveTask {\n  static readonly type = actions.ARCHIVE_TASK;\n\n  constructor(public payload: string) {}\n}\n\nexport class PinTask {\n  static readonly type = actions.PIN_TASK;\n\n  constructor(public payload: string) {}\n}\n// The class definition for our error field\nexport class AppError {\n  static readonly type = actions.ERROR;\n  constructor(public payload: boolean) {}\n}\n\n// The initial state of our store when the app loads.\n// Usually you would fetch this from a server\nconst defaultTasks = [\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\n];\n\nexport interface TaskStateModel {\n  tasks: Task[];\n  status: 'idle' | 'loading' | 'success' | 'error';\n  error: boolean;\n}\n\n// Sets the default state\n@State<TaskStateModel>({\n  name: 'taskbox',\n  defaults: {\n    tasks: defaultTasks,\n    status: 'idle',\n    error: false,\n  },\n})\n@Injectable()\nexport class TasksState {\n  // Defines a new selector for the error field\n  @Selector()\n  static getError(state: TaskStateModel): boolean {\n    return state.error;\n  }\n\n  @Selector()\n  static getAllTasks(state: TaskStateModel): Task[] {\n    return state.tasks;\n  }\n\n  // Triggers the PinTask action, similar to redux\n  @Action(PinTask)\n  pinTask(\n    { getState, setState }: StateContext<TaskStateModel>,\n    { payload }: PinTask\n  ) {\n    const task = getState().tasks.find((task) => task.id === payload);\n\n    if (task) {\n      const updatedTask: Task = {\n        ...task,\n        state: 'TASK_PINNED',\n      };\n      setState(\n        patch({\n          tasks: updateItem<Task>(\n            (pinnedTask) => pinnedTask?.id === payload,\n            updatedTask\n          ),\n        })\n      );\n    }\n  }\n  // Triggers the archiveTask action, similar to redux\n  @Action(ArchiveTask)\n  archiveTask(\n    { getState, setState }: StateContext<TaskStateModel>,\n    { payload }: ArchiveTask\n  ) {\n    const task = getState().tasks.find((task) => task.id === payload);\n    if (task) {\n      const updatedTask: Task = {\n        ...task,\n        state: 'TASK_ARCHIVED',\n      };\n      setState(\n        patch({\n          tasks: updateItem<Task>(\n            (archivedTask) => archivedTask?.id === payload,\n            updatedTask\n          ),\n        })\n      );\n    }\n  }\n  // Function to handle how the state should be updated when the action is triggered\n  @Action(AppError)\n  setAppError(\n    { patchState, getState }: StateContext<TaskStateModel>,\n    { payload }: AppError\n  ) {\n    const state = getState();\n    patchState({\n      error: !state.error,\n    });\n  }\n}\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"idle\" | \"loading\" | \"success\" | \"error\"",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "tasks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Task[]",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "TasksState",
            "id": "injectable-TasksState-604428d82b5cd9c915a19856e571ab6bfb3eeb3930f658497fa05fe3db7f651a11693d6ed548c6a5f5ce98b9f59121040093802fedc979d51996caad2badd7dd",
            "file": "src/app/state/task.state.ts",
            "properties": [],
            "methods": [
                {
                    "name": "archiveTask",
                    "args": [
                        {
                            "type": "StateContext<TaskStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "ArchiveTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "ArchiveTask"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<TaskStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "ArchiveTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllTasks",
                    "args": [
                        {
                            "name": "state",
                            "type": "TaskStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Task[]",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "TaskStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getError",
                    "args": [
                        {
                            "name": "state",
                            "type": "TaskStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "TaskStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pinTask",
                    "args": [
                        {
                            "type": "StateContext<TaskStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "PinTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "PinTask"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<TaskStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "PinTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setAppError",
                    "args": [
                        {
                            "type": "StateContext<TaskStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "AppError",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "AppError"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<TaskStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "AppError",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { State, Selector, Action, StateContext } from '@ngxs/store';\nimport { patch, updateItem } from '@ngxs/store/operators';\nimport { Task } from '../models/task.model';\n\n// Defines the actions available to the app\nexport const actions = {\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK',\n  ERROR: 'APP_ERROR',\n};\n\nexport class ArchiveTask {\n  static readonly type = actions.ARCHIVE_TASK;\n\n  constructor(public payload: string) {}\n}\n\nexport class PinTask {\n  static readonly type = actions.PIN_TASK;\n\n  constructor(public payload: string) {}\n}\n// The class definition for our error field\nexport class AppError {\n  static readonly type = actions.ERROR;\n  constructor(public payload: boolean) {}\n}\n\n// The initial state of our store when the app loads.\n// Usually you would fetch this from a server\nconst defaultTasks = [\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\n];\n\nexport interface TaskStateModel {\n  tasks: Task[];\n  status: 'idle' | 'loading' | 'success' | 'error';\n  error: boolean;\n}\n\n// Sets the default state\n@State<TaskStateModel>({\n  name: 'taskbox',\n  defaults: {\n    tasks: defaultTasks,\n    status: 'idle',\n    error: false,\n  },\n})\n@Injectable()\nexport class TasksState {\n  // Defines a new selector for the error field\n  @Selector()\n  static getError(state: TaskStateModel): boolean {\n    return state.error;\n  }\n\n  @Selector()\n  static getAllTasks(state: TaskStateModel): Task[] {\n    return state.tasks;\n  }\n\n  // Triggers the PinTask action, similar to redux\n  @Action(PinTask)\n  pinTask(\n    { getState, setState }: StateContext<TaskStateModel>,\n    { payload }: PinTask\n  ) {\n    const task = getState().tasks.find((task) => task.id === payload);\n\n    if (task) {\n      const updatedTask: Task = {\n        ...task,\n        state: 'TASK_PINNED',\n      };\n      setState(\n        patch({\n          tasks: updateItem<Task>(\n            (pinnedTask) => pinnedTask?.id === payload,\n            updatedTask\n          ),\n        })\n      );\n    }\n  }\n  // Triggers the archiveTask action, similar to redux\n  @Action(ArchiveTask)\n  archiveTask(\n    { getState, setState }: StateContext<TaskStateModel>,\n    { payload }: ArchiveTask\n  ) {\n    const task = getState().tasks.find((task) => task.id === payload);\n    if (task) {\n      const updatedTask: Task = {\n        ...task,\n        state: 'TASK_ARCHIVED',\n      };\n      setState(\n        patch({\n          tasks: updateItem<Task>(\n            (archivedTask) => archivedTask?.id === payload,\n            updatedTask\n          ),\n        })\n      );\n    }\n  }\n  // Function to handle how the state should be updated when the action is triggered\n  @Action(AppError)\n  setAppError(\n    { patchState, getState }: StateContext<TaskStateModel>,\n    { payload }: AppError\n  ) {\n    const state = getState();\n    patchState({\n      error: !state.error,\n    });\n  }\n}\n",
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "AppError",
            "id": "class-AppError-604428d82b5cd9c915a19856e571ab6bfb3eeb3930f658497fa05fe3db7f651a11693d6ed548c6a5f5ce98b9f59121040093802fedc979d51996caad2badd7dd",
            "file": "src/app/state/task.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { State, Selector, Action, StateContext } from '@ngxs/store';\nimport { patch, updateItem } from '@ngxs/store/operators';\nimport { Task } from '../models/task.model';\n\n// Defines the actions available to the app\nexport const actions = {\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK',\n  ERROR: 'APP_ERROR',\n};\n\nexport class ArchiveTask {\n  static readonly type = actions.ARCHIVE_TASK;\n\n  constructor(public payload: string) {}\n}\n\nexport class PinTask {\n  static readonly type = actions.PIN_TASK;\n\n  constructor(public payload: string) {}\n}\n// The class definition for our error field\nexport class AppError {\n  static readonly type = actions.ERROR;\n  constructor(public payload: boolean) {}\n}\n\n// The initial state of our store when the app loads.\n// Usually you would fetch this from a server\nconst defaultTasks = [\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\n];\n\nexport interface TaskStateModel {\n  tasks: Task[];\n  status: 'idle' | 'loading' | 'success' | 'error';\n  error: boolean;\n}\n\n// Sets the default state\n@State<TaskStateModel>({\n  name: 'taskbox',\n  defaults: {\n    tasks: defaultTasks,\n    status: 'idle',\n    error: false,\n  },\n})\n@Injectable()\nexport class TasksState {\n  // Defines a new selector for the error field\n  @Selector()\n  static getError(state: TaskStateModel): boolean {\n    return state.error;\n  }\n\n  @Selector()\n  static getAllTasks(state: TaskStateModel): Task[] {\n    return state.tasks;\n  }\n\n  // Triggers the PinTask action, similar to redux\n  @Action(PinTask)\n  pinTask(\n    { getState, setState }: StateContext<TaskStateModel>,\n    { payload }: PinTask\n  ) {\n    const task = getState().tasks.find((task) => task.id === payload);\n\n    if (task) {\n      const updatedTask: Task = {\n        ...task,\n        state: 'TASK_PINNED',\n      };\n      setState(\n        patch({\n          tasks: updateItem<Task>(\n            (pinnedTask) => pinnedTask?.id === payload,\n            updatedTask\n          ),\n        })\n      );\n    }\n  }\n  // Triggers the archiveTask action, similar to redux\n  @Action(ArchiveTask)\n  archiveTask(\n    { getState, setState }: StateContext<TaskStateModel>,\n    { payload }: ArchiveTask\n  ) {\n    const task = getState().tasks.find((task) => task.id === payload);\n    if (task) {\n      const updatedTask: Task = {\n        ...task,\n        state: 'TASK_ARCHIVED',\n      };\n      setState(\n        patch({\n          tasks: updateItem<Task>(\n            (archivedTask) => archivedTask?.id === payload,\n            updatedTask\n          ),\n        })\n      );\n    }\n  }\n  // Function to handle how the state should be updated when the action is triggered\n  @Action(AppError)\n  setAppError(\n    { patchState, getState }: StateContext<TaskStateModel>,\n    { payload }: AppError\n  ) {\n    const state = getState();\n    patchState({\n      error: !state.error,\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "actions.ERROR",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ArchiveTask",
            "id": "class-ArchiveTask-604428d82b5cd9c915a19856e571ab6bfb3eeb3930f658497fa05fe3db7f651a11693d6ed548c6a5f5ce98b9f59121040093802fedc979d51996caad2badd7dd",
            "file": "src/app/state/task.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { State, Selector, Action, StateContext } from '@ngxs/store';\nimport { patch, updateItem } from '@ngxs/store/operators';\nimport { Task } from '../models/task.model';\n\n// Defines the actions available to the app\nexport const actions = {\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK',\n  ERROR: 'APP_ERROR',\n};\n\nexport class ArchiveTask {\n  static readonly type = actions.ARCHIVE_TASK;\n\n  constructor(public payload: string) {}\n}\n\nexport class PinTask {\n  static readonly type = actions.PIN_TASK;\n\n  constructor(public payload: string) {}\n}\n// The class definition for our error field\nexport class AppError {\n  static readonly type = actions.ERROR;\n  constructor(public payload: boolean) {}\n}\n\n// The initial state of our store when the app loads.\n// Usually you would fetch this from a server\nconst defaultTasks = [\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\n];\n\nexport interface TaskStateModel {\n  tasks: Task[];\n  status: 'idle' | 'loading' | 'success' | 'error';\n  error: boolean;\n}\n\n// Sets the default state\n@State<TaskStateModel>({\n  name: 'taskbox',\n  defaults: {\n    tasks: defaultTasks,\n    status: 'idle',\n    error: false,\n  },\n})\n@Injectable()\nexport class TasksState {\n  // Defines a new selector for the error field\n  @Selector()\n  static getError(state: TaskStateModel): boolean {\n    return state.error;\n  }\n\n  @Selector()\n  static getAllTasks(state: TaskStateModel): Task[] {\n    return state.tasks;\n  }\n\n  // Triggers the PinTask action, similar to redux\n  @Action(PinTask)\n  pinTask(\n    { getState, setState }: StateContext<TaskStateModel>,\n    { payload }: PinTask\n  ) {\n    const task = getState().tasks.find((task) => task.id === payload);\n\n    if (task) {\n      const updatedTask: Task = {\n        ...task,\n        state: 'TASK_PINNED',\n      };\n      setState(\n        patch({\n          tasks: updateItem<Task>(\n            (pinnedTask) => pinnedTask?.id === payload,\n            updatedTask\n          ),\n        })\n      );\n    }\n  }\n  // Triggers the archiveTask action, similar to redux\n  @Action(ArchiveTask)\n  archiveTask(\n    { getState, setState }: StateContext<TaskStateModel>,\n    { payload }: ArchiveTask\n  ) {\n    const task = getState().tasks.find((task) => task.id === payload);\n    if (task) {\n      const updatedTask: Task = {\n        ...task,\n        state: 'TASK_ARCHIVED',\n      };\n      setState(\n        patch({\n          tasks: updateItem<Task>(\n            (archivedTask) => archivedTask?.id === payload,\n            updatedTask\n          ),\n        })\n      );\n    }\n  }\n  // Function to handle how the state should be updated when the action is triggered\n  @Action(AppError)\n  setAppError(\n    { patchState, getState }: StateContext<TaskStateModel>,\n    { payload }: AppError\n  ) {\n    const state = getState();\n    patchState({\n      error: !state.error,\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "actions.ARCHIVE_TASK",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PinTask",
            "id": "class-PinTask-604428d82b5cd9c915a19856e571ab6bfb3eeb3930f658497fa05fe3db7f651a11693d6ed548c6a5f5ce98b9f59121040093802fedc979d51996caad2badd7dd",
            "file": "src/app/state/task.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { State, Selector, Action, StateContext } from '@ngxs/store';\nimport { patch, updateItem } from '@ngxs/store/operators';\nimport { Task } from '../models/task.model';\n\n// Defines the actions available to the app\nexport const actions = {\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK',\n  ERROR: 'APP_ERROR',\n};\n\nexport class ArchiveTask {\n  static readonly type = actions.ARCHIVE_TASK;\n\n  constructor(public payload: string) {}\n}\n\nexport class PinTask {\n  static readonly type = actions.PIN_TASK;\n\n  constructor(public payload: string) {}\n}\n// The class definition for our error field\nexport class AppError {\n  static readonly type = actions.ERROR;\n  constructor(public payload: boolean) {}\n}\n\n// The initial state of our store when the app loads.\n// Usually you would fetch this from a server\nconst defaultTasks = [\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\n];\n\nexport interface TaskStateModel {\n  tasks: Task[];\n  status: 'idle' | 'loading' | 'success' | 'error';\n  error: boolean;\n}\n\n// Sets the default state\n@State<TaskStateModel>({\n  name: 'taskbox',\n  defaults: {\n    tasks: defaultTasks,\n    status: 'idle',\n    error: false,\n  },\n})\n@Injectable()\nexport class TasksState {\n  // Defines a new selector for the error field\n  @Selector()\n  static getError(state: TaskStateModel): boolean {\n    return state.error;\n  }\n\n  @Selector()\n  static getAllTasks(state: TaskStateModel): Task[] {\n    return state.tasks;\n  }\n\n  // Triggers the PinTask action, similar to redux\n  @Action(PinTask)\n  pinTask(\n    { getState, setState }: StateContext<TaskStateModel>,\n    { payload }: PinTask\n  ) {\n    const task = getState().tasks.find((task) => task.id === payload);\n\n    if (task) {\n      const updatedTask: Task = {\n        ...task,\n        state: 'TASK_PINNED',\n      };\n      setState(\n        patch({\n          tasks: updateItem<Task>(\n            (pinnedTask) => pinnedTask?.id === payload,\n            updatedTask\n          ),\n        })\n      );\n    }\n  }\n  // Triggers the archiveTask action, similar to redux\n  @Action(ArchiveTask)\n  archiveTask(\n    { getState, setState }: StateContext<TaskStateModel>,\n    { payload }: ArchiveTask\n  ) {\n    const task = getState().tasks.find((task) => task.id === payload);\n    if (task) {\n      const updatedTask: Task = {\n        ...task,\n        state: 'TASK_ARCHIVED',\n      };\n      setState(\n        patch({\n          tasks: updateItem<Task>(\n            (archivedTask) => archivedTask?.id === payload,\n            updatedTask\n          ),\n        })\n      );\n    }\n  }\n  // Function to handle how the state should be updated when the action is triggered\n  @Action(AppError)\n  setAppError(\n    { patchState, getState }: StateContext<TaskStateModel>,\n    { payload }: AppError\n  ) {\n    const state = getState();\n    patchState({\n      error: !state.error,\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "actions.PIN_TASK",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AboutMeComponent",
            "id": "component-AboutMeComponent-a7ec0aef56ec64445cf3a24e17a990c462a03fd7f391557abd5bee6519223d9b045e348a2c71c4f456a0d2dc9f5afe3fac9b520cbee0892b821d5f9bb3371eb2",
            "file": "src/app/about-me/about-me.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-about-me",
            "styleUrls": [
                "./about-me.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./about-me.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "myselectedtemp",
                    "defaultValue": "'first'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "Career",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'Career', {static: true}"
                        }
                    ]
                },
                {
                    "name": "Development",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'Development', {static: true}"
                        }
                    ]
                },
                {
                    "name": "Introduction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'Introduction', {static: true}"
                        }
                    ]
                },
                {
                    "name": "Lecturer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'Lecturer', {static: true}"
                        }
                    ]
                },
                {
                    "name": "myContext",
                    "defaultValue": "{ $implicit: 'World', localSk: 'Svet' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "Telecom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'Telecom', {static: true}"
                        }
                    ]
                },
                {
                    "name": "tems",
                    "defaultValue": "this.Introduction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { OnInit, AfterContentInit, ViewChild, TemplateRef, Input, Component } from '@angular/core';\n\n@Component({\n  selector: 'app-about-me',\n  templateUrl: './about-me.component.html',\n  styleUrls: ['./about-me.component.scss']\n})\nexport class AboutMeComponent implements OnInit, AfterContentInit {\n\n  @ViewChild('Introduction', { static: true })\n  Introduction!: TemplateRef<any>;\n\n  @ViewChild('Career', { static: true })\n  Career!: TemplateRef<any>;\n\n  @ViewChild('Development', { static: true })\n  Development!: TemplateRef<any>;\n\n  @ViewChild('Lecturer', { static: true })\n  Lecturer!: TemplateRef<any>;\n\n  @ViewChild('Telecom', { static: true })\n  Telecom!: TemplateRef<any>;\n\n  myContext = { $implicit: 'World', localSk: 'Svet' };\n  tems: TemplateRef<any> = this.Introduction;\n\n  @Input()\n  myselectedtemp: string = 'first';\n\n  ngAfterContentInit() {\n    switch (this.myselectedtemp) {\n      case 'Introduction':\n        this.tems = this.Introduction;\n        break;\n      case 'Career':\n        this.tems = this.Career;\n        break;\n      case 'Development':\n        this.tems = this.Development;\n        break;\n      case 'Lecturer':\n        this.tems = this.Lecturer;\n        break;\n      case 'Telecom':\n        this.tems = this.Telecom;\n        break;\n    }\n  }\n  ngOnInit(): void {\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./about-me.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit",
                "AfterContentInit"
            ],
            "templateData": "<ng-template #Introduction >\n    <div class=\"markdown\" fxFlexOffset=\"15vw\" fxLayout=\"row\">\n        <markdown mermaid [src]=\"'../../../../assets/AboutMe/Introduction.md'\"></markdown>\n     </div>\n</ng-template>\n\n<ng-template #Career >\n    <div class=\"markdown\" fxFlex=\"86vw\">\n        <markdown mermaid [src]=\"'../../../../assets/AboutMe/Career.md'\"></markdown>\n     </div>\n</ng-template>\n\n<ng-template #Development >\n    <div class=\"markdown\">\n        <markdown mermaid [src]=\"'../../../../assets/AboutMe/Development.md'\"></markdown>\n     </div>\n</ng-template>\n\n<ng-template #Lecturer >\n    <div class=\"markdown\">\n        <markdown mermaid [src]=\"'../../../../assets/AboutMe/Lecturer.md'\"></markdown>\n     </div>\n</ng-template>\n\n<ng-template #Telecom >\n    <div class=\"markdown\">\n        <markdown mermaid [src]=\"'../../../../assets/AboutMe/Telecom.md'\"></markdown>\n     </div>\n</ng-template>\n\n\n<ng-container \n[ngTemplateOutlet]=\"tems\"\n[ngTemplateOutletContext]=\"myContext\"> "
        },
        {
            "name": "AboutmeDevelopmentComponent",
            "id": "component-AboutmeDevelopmentComponent-455129c4cb751174f906e298d9f0f3b545f5a98ce75841ab6bb9c241053e5a5cfb1714cb9ec055385193f282e50ceb12b4358d48c1103158f3e2e215ddeb9516",
            "file": "src/app/progress-bar/progress-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-aboutme-Development",
            "styleUrls": [],
            "styles": [],
            "template": "\n\n<mat-progress-bar\n    [mode]=\"mode\"\n    [value]=\"value\"\n    [bufferValue]=\"bufferValue\"\n    [color]=\"color\">\n</mat-progress-bar>\n\n\n<div class=\"markdown\">\n  <markdown\n    class=\"variable-binding\"\n    [src]=\"'../../assets/Development.md'\"\n  ></markdown>\n</div>\n\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bufferValue",
                    "defaultValue": "60",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n",
                    "description": "<p>ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode</p>\n",
                    "line": 287,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Color - primary (Theme color) | accent | warn\n",
                    "description": "<p>ProgressBar Color - primary (Theme color) | accent | warn</p>\n",
                    "line": 293,
                    "type": "ThemePalette",
                    "decorators": []
                },
                {
                    "name": "markdowncode",
                    "defaultValue": "`## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 296,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'indeterminate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 275,
                    "type": "ProgressBarMode",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "40",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n",
                    "description": "<p>ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes</p>\n",
                    "line": 281,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 273,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { ThemePalette } from '@angular/material/core';\nimport { ProgressBarMode } from '@angular/material/progress-bar';\n\n@Component({\n  selector: 'app-progress-bar',\n  templateUrl: './progress-bar.component.html',\n  styleUrls: ['./progress-bar.component.scss'],\n})\nexport class ProgressBarComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  /**\n   * ProgressBar mode - determinate | indeterminate | Buffer | Query\n   */\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-aboutme-Introduction',\n  template: `\n\n      \n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n\n    <div class=\"markdown\">\n      <markdown\n        class=\"variable-binding\"\n        [src]=\"'../../assets/Introduction.md'\"\n      ></markdown>\n    </div>\n  `,\n})\nexport class AboutmeIntroductionComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-aboutme-Lecturer',\n  template: `\n\n      \n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n    <div class=\"markdown\">\n    <markdown mermaid [src]=\"'../../assets/Lecturer.md'\"></markdown>\n  </div>\n\n  `,\n})\nexport class AboutmeLecturerComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-aboutme-Telecom',\n  template: `\n\n      \n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n\n    <div class=\"markdown\">\n    <markdown mermaid [src]=\"'../../assets/Telecom.md'\"></markdown>\n  </div>\n\n  `,\n})\nexport class AboutmeTelecomComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-aboutme-Development',\n  template: `\n\n      \n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n\n    <div class=\"markdown\">\n      <markdown\n        class=\"variable-binding\"\n        [src]=\"'../../assets/Development.md'\"\n      ></markdown>\n    </div>\n\n  `,\n})\nexport class AboutmeDevelopmentComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-aboutme-Testing',\n  template: `\n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n  <div class=\"markdown\">\n    <markdown mermaid [src]=\"'../../assets/Testing.md'\"></markdown>\n  </div>\n\n  <markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\n  [lineOffset]=\"5\">\n    \\`\\`\\`typescript\n    export function greetings(name: string): string &#123;\n      return 'Hello ' + name;\n    }\n    \\`\\`\\`\n  </markdown>\n\n\n  <markdown ngPreserveWhitespaces clipboard \n    commandLine\n    [prompt]=\"'PS C:\\Users\\Chris>'\"\n    [filterOutput]=\"'(out)'\">\n    \\`\\`\\` powershell\n    Get-Date\n    (out)\n    (ut)Sunday, November 7, 2021 8:19:21 PM\n    (out)\n    \\`\\`\\`\n  </markdown>\n\n  <div class=\"footer\">\n    <mat-divider></mat-divider>\n    <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\n      Crafted with :heart: by **jfcere** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/jfcere)\n    </markdown>\n  </div>\n\n  `,\n  styles: [\n    `\n    .footer {\n      margin: 32px 0 8px;\n\n      &-text {\n        display: block;\n        font-size: 13px;\n        padding-top: 4px;\n      }\n    }\n\n    .mat-fab,\n    .mat-mini-fab {\n      img {\n        margin-bottom: 2px;\n      }\n    }\n\n    .sticky {\n      position: sticky;\n      top: 80px;\n    }\n\n    .scrollup-button {\n      margin:14px;\n\n      &--fixed {\n        position: fixed;\n        bottom: 16px;\n        right: 16px;\n      }\n    }    \n    `,\n  ],\n})\nexport class AboutmeTestingComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-startscreen',\n  template: `\n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n  <div class=\"markdown\">\n    <markdown mermaid [src]=\"'../../assets/Testing.md'\"></markdown>\n  </div>\n\n  <div class=\"markdown\">\n      <markdown\n        [src]=\"'../../assets/Introduction.md'\"\n      ></markdown>\n    </div>\n\n  <div class=\"footer\">\n    <mat-divider></mat-divider>\n    <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\n      Crafted with :heart: by **jfcere** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/jfcere)\n    </markdown>\n  </div>\n\n  `,\n  styles: [\n    `\n    .footer {\n      margin: 32px 0 8px;\n\n      &-text {\n        display: block;\n        font-size: 13px;\n        padding-top: 4px;\n      }\n    }\n\n    .mat-fab,\n    .mat-mini-fab {\n      img {\n        margin-bottom: 2px;\n      }\n    }\n\n    .sticky {\n      position: sticky;\n      top: 80px;\n    }\n\n    .scrollup-button {\n      margin:14px;\n\n      &--fixed {\n        position: fixed;\n        bottom: 16px;\n        right: 16px;\n      }\n    }    \n    `,\n  ],\n})\nexport class StartScreenComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 270
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "AboutmeIntroductionComponent",
            "id": "component-AboutmeIntroductionComponent-455129c4cb751174f906e298d9f0f3b545f5a98ce75841ab6bb9c241053e5a5cfb1714cb9ec055385193f282e50ceb12b4358d48c1103158f3e2e215ddeb9516",
            "file": "src/app/progress-bar/progress-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-aboutme-Introduction",
            "styleUrls": [],
            "styles": [],
            "template": "\n\n<mat-progress-bar\n    [mode]=\"mode\"\n    [value]=\"value\"\n    [bufferValue]=\"bufferValue\"\n    [color]=\"color\">\n</mat-progress-bar>\n\n\n<div class=\"markdown\">\n  <markdown\n    class=\"variable-binding\"\n    [src]=\"'../../assets/Introduction.md'\"\n  ></markdown>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bufferValue",
                    "defaultValue": "60",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n",
                    "description": "<p>ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode</p>\n",
                    "line": 96,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Color - primary (Theme color) | accent | warn\n",
                    "description": "<p>ProgressBar Color - primary (Theme color) | accent | warn</p>\n",
                    "line": 102,
                    "type": "ThemePalette",
                    "decorators": []
                },
                {
                    "name": "markdowncode",
                    "defaultValue": "`## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 105,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'indeterminate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 84,
                    "type": "ProgressBarMode",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "40",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n",
                    "description": "<p>ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes</p>\n",
                    "line": 90,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { ThemePalette } from '@angular/material/core';\nimport { ProgressBarMode } from '@angular/material/progress-bar';\n\n@Component({\n  selector: 'app-progress-bar',\n  templateUrl: './progress-bar.component.html',\n  styleUrls: ['./progress-bar.component.scss'],\n})\nexport class ProgressBarComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  /**\n   * ProgressBar mode - determinate | indeterminate | Buffer | Query\n   */\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-aboutme-Introduction',\n  template: `\n\n      \n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n\n    <div class=\"markdown\">\n      <markdown\n        class=\"variable-binding\"\n        [src]=\"'../../assets/Introduction.md'\"\n      ></markdown>\n    </div>\n  `,\n})\nexport class AboutmeIntroductionComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-aboutme-Lecturer',\n  template: `\n\n      \n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n    <div class=\"markdown\">\n    <markdown mermaid [src]=\"'../../assets/Lecturer.md'\"></markdown>\n  </div>\n\n  `,\n})\nexport class AboutmeLecturerComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-aboutme-Telecom',\n  template: `\n\n      \n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n\n    <div class=\"markdown\">\n    <markdown mermaid [src]=\"'../../assets/Telecom.md'\"></markdown>\n  </div>\n\n  `,\n})\nexport class AboutmeTelecomComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-aboutme-Development',\n  template: `\n\n      \n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n\n    <div class=\"markdown\">\n      <markdown\n        class=\"variable-binding\"\n        [src]=\"'../../assets/Development.md'\"\n      ></markdown>\n    </div>\n\n  `,\n})\nexport class AboutmeDevelopmentComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-aboutme-Testing',\n  template: `\n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n  <div class=\"markdown\">\n    <markdown mermaid [src]=\"'../../assets/Testing.md'\"></markdown>\n  </div>\n\n  <markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\n  [lineOffset]=\"5\">\n    \\`\\`\\`typescript\n    export function greetings(name: string): string &#123;\n      return 'Hello ' + name;\n    }\n    \\`\\`\\`\n  </markdown>\n\n\n  <markdown ngPreserveWhitespaces clipboard \n    commandLine\n    [prompt]=\"'PS C:\\Users\\Chris>'\"\n    [filterOutput]=\"'(out)'\">\n    \\`\\`\\` powershell\n    Get-Date\n    (out)\n    (ut)Sunday, November 7, 2021 8:19:21 PM\n    (out)\n    \\`\\`\\`\n  </markdown>\n\n  <div class=\"footer\">\n    <mat-divider></mat-divider>\n    <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\n      Crafted with :heart: by **jfcere** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/jfcere)\n    </markdown>\n  </div>\n\n  `,\n  styles: [\n    `\n    .footer {\n      margin: 32px 0 8px;\n\n      &-text {\n        display: block;\n        font-size: 13px;\n        padding-top: 4px;\n      }\n    }\n\n    .mat-fab,\n    .mat-mini-fab {\n      img {\n        margin-bottom: 2px;\n      }\n    }\n\n    .sticky {\n      position: sticky;\n      top: 80px;\n    }\n\n    .scrollup-button {\n      margin:14px;\n\n      &--fixed {\n        position: fixed;\n        bottom: 16px;\n        right: 16px;\n      }\n    }    \n    `,\n  ],\n})\nexport class AboutmeTestingComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-startscreen',\n  template: `\n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n  <div class=\"markdown\">\n    <markdown mermaid [src]=\"'../../assets/Testing.md'\"></markdown>\n  </div>\n\n  <div class=\"markdown\">\n      <markdown\n        [src]=\"'../../assets/Introduction.md'\"\n      ></markdown>\n    </div>\n\n  <div class=\"footer\">\n    <mat-divider></mat-divider>\n    <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\n      Crafted with :heart: by **jfcere** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/jfcere)\n    </markdown>\n  </div>\n\n  `,\n  styles: [\n    `\n    .footer {\n      margin: 32px 0 8px;\n\n      &-text {\n        display: block;\n        font-size: 13px;\n        padding-top: 4px;\n      }\n    }\n\n    .mat-fab,\n    .mat-mini-fab {\n      img {\n        margin-bottom: 2px;\n      }\n    }\n\n    .sticky {\n      position: sticky;\n      top: 80px;\n    }\n\n    .scrollup-button {\n      margin:14px;\n\n      &--fixed {\n        position: fixed;\n        bottom: 16px;\n        right: 16px;\n      }\n    }    \n    `,\n  ],\n})\nexport class StartScreenComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 79
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "AboutmeLecturerComponent",
            "id": "component-AboutmeLecturerComponent-455129c4cb751174f906e298d9f0f3b545f5a98ce75841ab6bb9c241053e5a5cfb1714cb9ec055385193f282e50ceb12b4358d48c1103158f3e2e215ddeb9516",
            "file": "src/app/progress-bar/progress-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-aboutme-Lecturer",
            "styleUrls": [],
            "styles": [],
            "template": "\n\n  <mat-progress-bar\n      [mode]=\"mode\"\n      [value]=\"value\"\n      [bufferValue]=\"bufferValue\"\n      [color]=\"color\">\n  </mat-progress-bar>\n\n  <div class=\"markdown\">\n  <markdown mermaid [src]=\"'../../assets/Lecturer.md'\"></markdown>\n</div>\n\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bufferValue",
                    "defaultValue": "60",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n",
                    "description": "<p>ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode</p>\n",
                    "line": 158,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Color - primary (Theme color) | accent | warn\n",
                    "description": "<p>ProgressBar Color - primary (Theme color) | accent | warn</p>\n",
                    "line": 164,
                    "type": "ThemePalette",
                    "decorators": []
                },
                {
                    "name": "markdowncode",
                    "defaultValue": "`## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 167,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'indeterminate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 146,
                    "type": "ProgressBarMode",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "40",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n",
                    "description": "<p>ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes</p>\n",
                    "line": 152,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { ThemePalette } from '@angular/material/core';\nimport { ProgressBarMode } from '@angular/material/progress-bar';\n\n@Component({\n  selector: 'app-progress-bar',\n  templateUrl: './progress-bar.component.html',\n  styleUrls: ['./progress-bar.component.scss'],\n})\nexport class ProgressBarComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  /**\n   * ProgressBar mode - determinate | indeterminate | Buffer | Query\n   */\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-aboutme-Introduction',\n  template: `\n\n      \n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n\n    <div class=\"markdown\">\n      <markdown\n        class=\"variable-binding\"\n        [src]=\"'../../assets/Introduction.md'\"\n      ></markdown>\n    </div>\n  `,\n})\nexport class AboutmeIntroductionComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-aboutme-Lecturer',\n  template: `\n\n      \n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n    <div class=\"markdown\">\n    <markdown mermaid [src]=\"'../../assets/Lecturer.md'\"></markdown>\n  </div>\n\n  `,\n})\nexport class AboutmeLecturerComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-aboutme-Telecom',\n  template: `\n\n      \n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n\n    <div class=\"markdown\">\n    <markdown mermaid [src]=\"'../../assets/Telecom.md'\"></markdown>\n  </div>\n\n  `,\n})\nexport class AboutmeTelecomComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-aboutme-Development',\n  template: `\n\n      \n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n\n    <div class=\"markdown\">\n      <markdown\n        class=\"variable-binding\"\n        [src]=\"'../../assets/Development.md'\"\n      ></markdown>\n    </div>\n\n  `,\n})\nexport class AboutmeDevelopmentComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-aboutme-Testing',\n  template: `\n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n  <div class=\"markdown\">\n    <markdown mermaid [src]=\"'../../assets/Testing.md'\"></markdown>\n  </div>\n\n  <markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\n  [lineOffset]=\"5\">\n    \\`\\`\\`typescript\n    export function greetings(name: string): string &#123;\n      return 'Hello ' + name;\n    }\n    \\`\\`\\`\n  </markdown>\n\n\n  <markdown ngPreserveWhitespaces clipboard \n    commandLine\n    [prompt]=\"'PS C:\\Users\\Chris>'\"\n    [filterOutput]=\"'(out)'\">\n    \\`\\`\\` powershell\n    Get-Date\n    (out)\n    (ut)Sunday, November 7, 2021 8:19:21 PM\n    (out)\n    \\`\\`\\`\n  </markdown>\n\n  <div class=\"footer\">\n    <mat-divider></mat-divider>\n    <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\n      Crafted with :heart: by **jfcere** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/jfcere)\n    </markdown>\n  </div>\n\n  `,\n  styles: [\n    `\n    .footer {\n      margin: 32px 0 8px;\n\n      &-text {\n        display: block;\n        font-size: 13px;\n        padding-top: 4px;\n      }\n    }\n\n    .mat-fab,\n    .mat-mini-fab {\n      img {\n        margin-bottom: 2px;\n      }\n    }\n\n    .sticky {\n      position: sticky;\n      top: 80px;\n    }\n\n    .scrollup-button {\n      margin:14px;\n\n      &--fixed {\n        position: fixed;\n        bottom: 16px;\n        right: 16px;\n      }\n    }    \n    `,\n  ],\n})\nexport class AboutmeTestingComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-startscreen',\n  template: `\n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n  <div class=\"markdown\">\n    <markdown mermaid [src]=\"'../../assets/Testing.md'\"></markdown>\n  </div>\n\n  <div class=\"markdown\">\n      <markdown\n        [src]=\"'../../assets/Introduction.md'\"\n      ></markdown>\n    </div>\n\n  <div class=\"footer\">\n    <mat-divider></mat-divider>\n    <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\n      Crafted with :heart: by **jfcere** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/jfcere)\n    </markdown>\n  </div>\n\n  `,\n  styles: [\n    `\n    .footer {\n      margin: 32px 0 8px;\n\n      &-text {\n        display: block;\n        font-size: 13px;\n        padding-top: 4px;\n      }\n    }\n\n    .mat-fab,\n    .mat-mini-fab {\n      img {\n        margin-bottom: 2px;\n      }\n    }\n\n    .sticky {\n      position: sticky;\n      top: 80px;\n    }\n\n    .scrollup-button {\n      margin:14px;\n\n      &--fixed {\n        position: fixed;\n        bottom: 16px;\n        right: 16px;\n      }\n    }    \n    `,\n  ],\n})\nexport class StartScreenComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 141
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "AboutmeTelecomComponent",
            "id": "component-AboutmeTelecomComponent-455129c4cb751174f906e298d9f0f3b545f5a98ce75841ab6bb9c241053e5a5cfb1714cb9ec055385193f282e50ceb12b4358d48c1103158f3e2e215ddeb9516",
            "file": "src/app/progress-bar/progress-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-aboutme-Telecom",
            "styleUrls": [],
            "styles": [],
            "template": "\n\n  <mat-progress-bar\n      [mode]=\"mode\"\n      [value]=\"value\"\n      [bufferValue]=\"bufferValue\"\n      [color]=\"color\">\n  </mat-progress-bar>\n\n\n  <div class=\"markdown\">\n  <markdown mermaid [src]=\"'../../assets/Telecom.md'\"></markdown>\n</div>\n\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bufferValue",
                    "defaultValue": "60",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n",
                    "description": "<p>ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode</p>\n",
                    "line": 221,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Color - primary (Theme color) | accent | warn\n",
                    "description": "<p>ProgressBar Color - primary (Theme color) | accent | warn</p>\n",
                    "line": 227,
                    "type": "ThemePalette",
                    "decorators": []
                },
                {
                    "name": "markdowncode",
                    "defaultValue": "`## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 230,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'indeterminate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 209,
                    "type": "ProgressBarMode",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "40",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n",
                    "description": "<p>ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes</p>\n",
                    "line": 215,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 207,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { ThemePalette } from '@angular/material/core';\nimport { ProgressBarMode } from '@angular/material/progress-bar';\n\n@Component({\n  selector: 'app-progress-bar',\n  templateUrl: './progress-bar.component.html',\n  styleUrls: ['./progress-bar.component.scss'],\n})\nexport class ProgressBarComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  /**\n   * ProgressBar mode - determinate | indeterminate | Buffer | Query\n   */\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-aboutme-Introduction',\n  template: `\n\n      \n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n\n    <div class=\"markdown\">\n      <markdown\n        class=\"variable-binding\"\n        [src]=\"'../../assets/Introduction.md'\"\n      ></markdown>\n    </div>\n  `,\n})\nexport class AboutmeIntroductionComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-aboutme-Lecturer',\n  template: `\n\n      \n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n    <div class=\"markdown\">\n    <markdown mermaid [src]=\"'../../assets/Lecturer.md'\"></markdown>\n  </div>\n\n  `,\n})\nexport class AboutmeLecturerComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-aboutme-Telecom',\n  template: `\n\n      \n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n\n    <div class=\"markdown\">\n    <markdown mermaid [src]=\"'../../assets/Telecom.md'\"></markdown>\n  </div>\n\n  `,\n})\nexport class AboutmeTelecomComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-aboutme-Development',\n  template: `\n\n      \n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n\n    <div class=\"markdown\">\n      <markdown\n        class=\"variable-binding\"\n        [src]=\"'../../assets/Development.md'\"\n      ></markdown>\n    </div>\n\n  `,\n})\nexport class AboutmeDevelopmentComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-aboutme-Testing',\n  template: `\n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n  <div class=\"markdown\">\n    <markdown mermaid [src]=\"'../../assets/Testing.md'\"></markdown>\n  </div>\n\n  <markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\n  [lineOffset]=\"5\">\n    \\`\\`\\`typescript\n    export function greetings(name: string): string &#123;\n      return 'Hello ' + name;\n    }\n    \\`\\`\\`\n  </markdown>\n\n\n  <markdown ngPreserveWhitespaces clipboard \n    commandLine\n    [prompt]=\"'PS C:\\Users\\Chris>'\"\n    [filterOutput]=\"'(out)'\">\n    \\`\\`\\` powershell\n    Get-Date\n    (out)\n    (ut)Sunday, November 7, 2021 8:19:21 PM\n    (out)\n    \\`\\`\\`\n  </markdown>\n\n  <div class=\"footer\">\n    <mat-divider></mat-divider>\n    <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\n      Crafted with :heart: by **jfcere** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/jfcere)\n    </markdown>\n  </div>\n\n  `,\n  styles: [\n    `\n    .footer {\n      margin: 32px 0 8px;\n\n      &-text {\n        display: block;\n        font-size: 13px;\n        padding-top: 4px;\n      }\n    }\n\n    .mat-fab,\n    .mat-mini-fab {\n      img {\n        margin-bottom: 2px;\n      }\n    }\n\n    .sticky {\n      position: sticky;\n      top: 80px;\n    }\n\n    .scrollup-button {\n      margin:14px;\n\n      &--fixed {\n        position: fixed;\n        bottom: 16px;\n        right: 16px;\n      }\n    }    \n    `,\n  ],\n})\nexport class AboutmeTestingComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-startscreen',\n  template: `\n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n  <div class=\"markdown\">\n    <markdown mermaid [src]=\"'../../assets/Testing.md'\"></markdown>\n  </div>\n\n  <div class=\"markdown\">\n      <markdown\n        [src]=\"'../../assets/Introduction.md'\"\n      ></markdown>\n    </div>\n\n  <div class=\"footer\">\n    <mat-divider></mat-divider>\n    <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\n      Crafted with :heart: by **jfcere** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/jfcere)\n    </markdown>\n  </div>\n\n  `,\n  styles: [\n    `\n    .footer {\n      margin: 32px 0 8px;\n\n      &-text {\n        display: block;\n        font-size: 13px;\n        padding-top: 4px;\n      }\n    }\n\n    .mat-fab,\n    .mat-mini-fab {\n      img {\n        margin-bottom: 2px;\n      }\n    }\n\n    .sticky {\n      position: sticky;\n      top: 80px;\n    }\n\n    .scrollup-button {\n      margin:14px;\n\n      &--fixed {\n        position: fixed;\n        bottom: 16px;\n        right: 16px;\n      }\n    }    \n    `,\n  ],\n})\nexport class StartScreenComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 204
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "AboutmeTestingComponent",
            "id": "component-AboutmeTestingComponent-455129c4cb751174f906e298d9f0f3b545f5a98ce75841ab6bb9c241053e5a5cfb1714cb9ec055385193f282e50ceb12b4358d48c1103158f3e2e215ddeb9516",
            "file": "src/app/progress-bar/progress-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-aboutme-Testing",
            "styleUrls": [],
            "styles": [
                "\n    .footer {\n      margin: 32px 0 8px;\n\n      &-text {\n        display: block;\n        font-size: 13px;\n        padding-top: 4px;\n      }\n    }\n\n    .mat-fab,\n    .mat-mini-fab {\n      img {\n        margin-bottom: 2px;\n      }\n    }\n\n    .sticky {\n      position: sticky;\n      top: 80px;\n    }\n\n    .scrollup-button {\n      margin:14px;\n\n      &--fixed {\n        position: fixed;\n        bottom: 16px;\n        right: 16px;\n      }\n    }    \n    "
            ],
            "template": "  <mat-progress-bar\n      [mode]=\"mode\"\n      [value]=\"value\"\n      [bufferValue]=\"bufferValue\"\n      [color]=\"color\">\n  </mat-progress-bar>\n\n<div class=\"markdown\">\n  <markdown mermaid [src]=\"'../../assets/Testing.md'\"></markdown>\n</div>\n\n<markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\n[lineOffset]=\"5\">\n  ```typescript\n  export function greetings(name: string): string &#123;\n    return 'Hello ' + name;\n  }\n  ```\n</markdown>\n\n\n<markdown ngPreserveWhitespaces clipboard\n  commandLine\n  [prompt]=\"'PS C:UsersChris>'\"\n  [filterOutput]=\"'(out)'\">\n  ``` powershell\n  Get-Date\n  (out)\n  (ut)Sunday, November 7, 2021 8:19:21 PM\n  (out)\n  ```\n</markdown>\n\n<div class=\"footer\">\n  <mat-divider></mat-divider>\n  <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\n    Crafted with :heart: by **jfcere** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/jfcere)\n  </markdown>\n</div>\n\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bufferValue",
                    "defaultValue": "60",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n",
                    "description": "<p>ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode</p>\n",
                    "line": 411,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Color - primary (Theme color) | accent | warn\n",
                    "description": "<p>ProgressBar Color - primary (Theme color) | accent | warn</p>\n",
                    "line": 417,
                    "type": "ThemePalette",
                    "decorators": []
                },
                {
                    "name": "markdowncode",
                    "defaultValue": "`## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 420,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'indeterminate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 399,
                    "type": "ProgressBarMode",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "40",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n",
                    "description": "<p>ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes</p>\n",
                    "line": 405,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 397,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { ThemePalette } from '@angular/material/core';\nimport { ProgressBarMode } from '@angular/material/progress-bar';\n\n@Component({\n  selector: 'app-progress-bar',\n  templateUrl: './progress-bar.component.html',\n  styleUrls: ['./progress-bar.component.scss'],\n})\nexport class ProgressBarComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  /**\n   * ProgressBar mode - determinate | indeterminate | Buffer | Query\n   */\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-aboutme-Introduction',\n  template: `\n\n      \n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n\n    <div class=\"markdown\">\n      <markdown\n        class=\"variable-binding\"\n        [src]=\"'../../assets/Introduction.md'\"\n      ></markdown>\n    </div>\n  `,\n})\nexport class AboutmeIntroductionComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-aboutme-Lecturer',\n  template: `\n\n      \n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n    <div class=\"markdown\">\n    <markdown mermaid [src]=\"'../../assets/Lecturer.md'\"></markdown>\n  </div>\n\n  `,\n})\nexport class AboutmeLecturerComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-aboutme-Telecom',\n  template: `\n\n      \n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n\n    <div class=\"markdown\">\n    <markdown mermaid [src]=\"'../../assets/Telecom.md'\"></markdown>\n  </div>\n\n  `,\n})\nexport class AboutmeTelecomComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-aboutme-Development',\n  template: `\n\n      \n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n\n    <div class=\"markdown\">\n      <markdown\n        class=\"variable-binding\"\n        [src]=\"'../../assets/Development.md'\"\n      ></markdown>\n    </div>\n\n  `,\n})\nexport class AboutmeDevelopmentComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-aboutme-Testing',\n  template: `\n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n  <div class=\"markdown\">\n    <markdown mermaid [src]=\"'../../assets/Testing.md'\"></markdown>\n  </div>\n\n  <markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\n  [lineOffset]=\"5\">\n    \\`\\`\\`typescript\n    export function greetings(name: string): string &#123;\n      return 'Hello ' + name;\n    }\n    \\`\\`\\`\n  </markdown>\n\n\n  <markdown ngPreserveWhitespaces clipboard \n    commandLine\n    [prompt]=\"'PS C:\\Users\\Chris>'\"\n    [filterOutput]=\"'(out)'\">\n    \\`\\`\\` powershell\n    Get-Date\n    (out)\n    (ut)Sunday, November 7, 2021 8:19:21 PM\n    (out)\n    \\`\\`\\`\n  </markdown>\n\n  <div class=\"footer\">\n    <mat-divider></mat-divider>\n    <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\n      Crafted with :heart: by **jfcere** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/jfcere)\n    </markdown>\n  </div>\n\n  `,\n  styles: [\n    `\n    .footer {\n      margin: 32px 0 8px;\n\n      &-text {\n        display: block;\n        font-size: 13px;\n        padding-top: 4px;\n      }\n    }\n\n    .mat-fab,\n    .mat-mini-fab {\n      img {\n        margin-bottom: 2px;\n      }\n    }\n\n    .sticky {\n      position: sticky;\n      top: 80px;\n    }\n\n    .scrollup-button {\n      margin:14px;\n\n      &--fixed {\n        position: fixed;\n        bottom: 16px;\n        right: 16px;\n      }\n    }    \n    `,\n  ],\n})\nexport class AboutmeTestingComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-startscreen',\n  template: `\n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n  <div class=\"markdown\">\n    <markdown mermaid [src]=\"'../../assets/Testing.md'\"></markdown>\n  </div>\n\n  <div class=\"markdown\">\n      <markdown\n        [src]=\"'../../assets/Introduction.md'\"\n      ></markdown>\n    </div>\n\n  <div class=\"footer\">\n    <mat-divider></mat-divider>\n    <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\n      Crafted with :heart: by **jfcere** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/jfcere)\n    </markdown>\n  </div>\n\n  `,\n  styles: [\n    `\n    .footer {\n      margin: 32px 0 8px;\n\n      &-text {\n        display: block;\n        font-size: 13px;\n        padding-top: 4px;\n      }\n    }\n\n    .mat-fab,\n    .mat-mini-fab {\n      img {\n        margin-bottom: 2px;\n      }\n    }\n\n    .sticky {\n      position: sticky;\n      top: 80px;\n    }\n\n    .scrollup-button {\n      margin:14px;\n\n      &--fixed {\n        position: fixed;\n        bottom: 16px;\n        right: 16px;\n      }\n    }    \n    `,\n  ],\n})\nexport class StartScreenComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .footer {\n      margin: 32px 0 8px;\n\n      &-text {\n        display: block;\n        font-size: 13px;\n        padding-top: 4px;\n      }\n    }\n\n    .mat-fab,\n    .mat-mini-fab {\n      img {\n        margin-bottom: 2px;\n      }\n    }\n\n    .sticky {\n      position: sticky;\n      top: 80px;\n    }\n\n    .scrollup-button {\n      margin:14px;\n\n      &--fixed {\n        position: fixed;\n        bottom: 16px;\n        right: 16px;\n      }\n    }    \n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 394
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-d9c5d3bdf08ba8ee0c41cb86e9823ab1e52bd16ac09169af7f8d520943c5ca8ebf4ad5a6836c12804bd8f8700bd300bda880d0b5ac05c944041f8e17c0edbd5a",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "Inputtems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "TemplateRef<any>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "greet",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'greet', {static: true}"
                        }
                    ]
                },
                {
                    "name": "markdowncode",
                    "defaultValue": "`## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "tems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "title",
                    "defaultValue": "'AngularStarter140103'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit,ViewChild, TemplateRef, AfterContentInit, Input} from '@angular/core';\nimport mermaid from 'mermaid';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit, AfterContentInit {\n\n  @ViewChild('greet', { static: true })\n  greet!: TemplateRef<any>;\n  @Input()\n  Inputtems!: TemplateRef<any>;\n  tems!: TemplateRef<any>;\n  \n\n  title = 'AngularStarter140103';\n\n  markdowncode = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n\n\n\n  ngOnInit(): void {\n    mermaid.initialize({\n      startOnLoad: true\n    });\n  }\n\n  ngAfterContentInit () {\n    this.tems = this.Inputtems;\n  }\n\n\n}\n\n\n/**\n <markdown class=\"variable-binding\" [data]=\"markdowncode\"></markdown>\n<div class=\"markdown\">\n  <markdown mermaid [src]=\"'../assets/myfile.md'\"></markdown>\n</div>\n<pre class=\"mermaid\">\n  sequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n</pre>\n */",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit",
                "AfterContentInit"
            ],
            "templateData": "<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\n<div fxLayout=\"row\" fxLayoutAlign=\"center\" fxLayoutGap=\"10vw\">\n  <mat-slider fxFlex=\"10vw\" min=\"1\" max=\"100\" step=\"1\" value=\"50\"></mat-slider>\n  <mat-slider fxFlex=\"10vw\" min=\"1\" max=\"100\" step=\"1\" value=\"50\"></mat-slider>\n</div>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\n\n<h1>TaskOhers</h1>\n<markdown class=\"variable-binding\" [data]=\"markdowncode\"></markdown>\n<div class=\"markdown\">\n  <markdown mermaid [src]=\"'../assets/myfile.md'\"></markdown>\n</div>\n<pre class=\"mermaid\">\n  sequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n</pre>\n\n<ng-template #greet let-person><span>Hello {{person}} </span></ng-template>\n<ng-template #eng let-name><span>Hello {{name}}!</span></ng-template>\n<ng-template #svk let-person=\"localSk\"><span>Ahoj {{person}}!</span></ng-template>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\n<ng-container [ngTemplateOutlet]=\"tems\"> </ng-container>"
        },
        {
            "name": "InboxScreenComponent",
            "id": "component-InboxScreenComponent-7a9ba3a43b8cdcd7aa555b1359c2cac3eb101b1738cef94e4a4f9245e068c8bf56a97541b4c727ee38b8da218f159fdea20aa0d0e72ebb57caab922075002d3f",
            "file": "src/app/components/inbox-screen.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-inbox-screen",
            "styleUrls": [],
            "styles": [],
            "template": "    <!--app-pure-inbox-screen [error]=\"error$ | async\"></app-pure-inbox-screen-->\n    <markdown class=\"variable-binding\" [data]=\"markdowncode\"></markdown>\n<div class=\"markdown\">\n  <markdown mermaid [src]=\"'../../assets/myfile.md'\"></markdown>\n</div>\n\n<div class=\"markdown\">\n  <markdown [src]=\"'../../assets/myfilemark.md'\"></markdown>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "markdowncode",
                    "defaultValue": "`## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "title",
                    "defaultValue": "'AngularStarter140103'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n//import { Store } from '@ngxs/store';\nimport { Observable } from 'rxjs';\n\n\n\n@Component({\n  selector: 'app-inbox-screen',\n  template: `\n    <!--app-pure-inbox-screen [error]=\"error$ | async\"></app-pure-inbox-screen-->\n    <markdown class=\"variable-binding\" [data]=\"markdowncode\"></markdown>\n<div class=\"markdown\">\n  <markdown mermaid [src]=\"'../../assets/myfile.md'\"></markdown>\n</div>\n\n<div class=\"markdown\">\n  <markdown [src]=\"'../../assets/myfilemark.md'\"></markdown>\n</div>\n  `\n})\nexport class InboxScreenComponent  implements OnInit{\n  //error$: Observable<boolean>;\n  //constructor(private store: Store) {\n    //this.error$ = store.select((state) => state.taskbox.error);\n  //}\n\n  title = 'AngularStarter140103';\n  markdowncode = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n\n  ngOnInit(): void {\n\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "ProgressBarComponent",
            "id": "component-ProgressBarComponent-455129c4cb751174f906e298d9f0f3b545f5a98ce75841ab6bb9c241053e5a5cfb1714cb9ec055385193f282e50ceb12b4358d48c1103158f3e2e215ddeb9516",
            "file": "src/app/progress-bar/progress-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-progress-bar",
            "styleUrls": [
                "./progress-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./progress-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bufferValue",
                    "defaultValue": "60",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n",
                    "description": "<p>ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode</p>\n",
                    "line": 31,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Color - primary (Theme color) | accent | warn\n",
                    "description": "<p>ProgressBar Color - primary (Theme color) | accent | warn</p>\n",
                    "line": 37,
                    "type": "ThemePalette",
                    "decorators": []
                },
                {
                    "name": "markdowncode",
                    "defaultValue": "`## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'indeterminate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar mode - determinate | indeterminate | Buffer | Query\n",
                    "description": "<p>ProgressBar mode - determinate | indeterminate | Buffer | Query</p>\n",
                    "line": 19,
                    "type": "ProgressBarMode",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "40",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n",
                    "description": "<p>ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes</p>\n",
                    "line": 25,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { ThemePalette } from '@angular/material/core';\nimport { ProgressBarMode } from '@angular/material/progress-bar';\n\n@Component({\n  selector: 'app-progress-bar',\n  templateUrl: './progress-bar.component.html',\n  styleUrls: ['./progress-bar.component.scss'],\n})\nexport class ProgressBarComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  /**\n   * ProgressBar mode - determinate | indeterminate | Buffer | Query\n   */\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-aboutme-Introduction',\n  template: `\n\n      \n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n\n    <div class=\"markdown\">\n      <markdown\n        class=\"variable-binding\"\n        [src]=\"'../../assets/Introduction.md'\"\n      ></markdown>\n    </div>\n  `,\n})\nexport class AboutmeIntroductionComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-aboutme-Lecturer',\n  template: `\n\n      \n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n    <div class=\"markdown\">\n    <markdown mermaid [src]=\"'../../assets/Lecturer.md'\"></markdown>\n  </div>\n\n  `,\n})\nexport class AboutmeLecturerComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-aboutme-Telecom',\n  template: `\n\n      \n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n\n    <div class=\"markdown\">\n    <markdown mermaid [src]=\"'../../assets/Telecom.md'\"></markdown>\n  </div>\n\n  `,\n})\nexport class AboutmeTelecomComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-aboutme-Development',\n  template: `\n\n      \n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n\n    <div class=\"markdown\">\n      <markdown\n        class=\"variable-binding\"\n        [src]=\"'../../assets/Development.md'\"\n      ></markdown>\n    </div>\n\n  `,\n})\nexport class AboutmeDevelopmentComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-aboutme-Testing',\n  template: `\n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n  <div class=\"markdown\">\n    <markdown mermaid [src]=\"'../../assets/Testing.md'\"></markdown>\n  </div>\n\n  <markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\n  [lineOffset]=\"5\">\n    \\`\\`\\`typescript\n    export function greetings(name: string): string &#123;\n      return 'Hello ' + name;\n    }\n    \\`\\`\\`\n  </markdown>\n\n\n  <markdown ngPreserveWhitespaces clipboard \n    commandLine\n    [prompt]=\"'PS C:\\Users\\Chris>'\"\n    [filterOutput]=\"'(out)'\">\n    \\`\\`\\` powershell\n    Get-Date\n    (out)\n    (ut)Sunday, November 7, 2021 8:19:21 PM\n    (out)\n    \\`\\`\\`\n  </markdown>\n\n  <div class=\"footer\">\n    <mat-divider></mat-divider>\n    <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\n      Crafted with :heart: by **jfcere** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/jfcere)\n    </markdown>\n  </div>\n\n  `,\n  styles: [\n    `\n    .footer {\n      margin: 32px 0 8px;\n\n      &-text {\n        display: block;\n        font-size: 13px;\n        padding-top: 4px;\n      }\n    }\n\n    .mat-fab,\n    .mat-mini-fab {\n      img {\n        margin-bottom: 2px;\n      }\n    }\n\n    .sticky {\n      position: sticky;\n      top: 80px;\n    }\n\n    .scrollup-button {\n      margin:14px;\n\n      &--fixed {\n        position: fixed;\n        bottom: 16px;\n        right: 16px;\n      }\n    }    \n    `,\n  ],\n})\nexport class AboutmeTestingComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-startscreen',\n  template: `\n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n  <div class=\"markdown\">\n    <markdown mermaid [src]=\"'../../assets/Testing.md'\"></markdown>\n  </div>\n\n  <div class=\"markdown\">\n      <markdown\n        [src]=\"'../../assets/Introduction.md'\"\n      ></markdown>\n    </div>\n\n  <div class=\"footer\">\n    <mat-divider></mat-divider>\n    <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\n      Crafted with :heart: by **jfcere** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/jfcere)\n    </markdown>\n  </div>\n\n  `,\n  styles: [\n    `\n    .footer {\n      margin: 32px 0 8px;\n\n      &-text {\n        display: block;\n        font-size: 13px;\n        padding-top: 4px;\n      }\n    }\n\n    .mat-fab,\n    .mat-mini-fab {\n      img {\n        margin-bottom: 2px;\n      }\n    }\n\n    .sticky {\n      position: sticky;\n      top: 80px;\n    }\n\n    .scrollup-button {\n      margin:14px;\n\n      &--fixed {\n        position: fixed;\n        bottom: 16px;\n        right: 16px;\n      }\n    }    \n    `,\n  ],\n})\nexport class StartScreenComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./progress-bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-progress-bar\n  [mode]=\"mode\"\n  [value]=\"value\"\n  [bufferValue]=\"bufferValue\"\n  [color]=\"color\"\n>\n</mat-progress-bar>\n\n<div class=\"markdown\">\n  <markdown mermaid [src]=\"'../../assets/myfile.md'\"></markdown>\n</div>\n\n<!--div class=\"markdown\">\n  <markdown\n    class=\"variable-binding\"\n    [src]=\"'../../assets/myfilemark.md'\"\n  ></markdown>\n</div-->\n"
        },
        {
            "name": "PureInboxScreenComponent",
            "id": "component-PureInboxScreenComponent-2641aa8ccd62cae89edd46462a0ad9276e73b9cbb3de5b345b467391a16201b0aa1f617d83d24fcc07afdcb8f9ae5c466b14aeb2929d2cd1e887a2bcf6101f83",
            "file": "src/app/components/pure-inbox-screen.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pure-inbox-screen",
            "styleUrls": [],
            "styles": [],
            "template": "<div *ngIf=\"error\" class=\"page lists-show\">\n  <div class=\"wrapper-message\">\n    <span class=\"icon-face-sad\"></span>\n    <p class=\"title-message\">Oh no!</p>\n    <p class=\"subtitle-message\">Something went wrong</p>\n  </div>\n</div>\n\n<div *ngIf=\"!error\" class=\"page lists-show\">\n  <nav>\n    <h1 class=\"title-page\">Taskbox</h1>\n  </nav>\n  <app-task-list></app-task-list>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-pure-inbox-screen',\n  template: `\n    <div *ngIf=\"error\" class=\"page lists-show\">\n      <div class=\"wrapper-message\">\n        <span class=\"icon-face-sad\"></span>\n        <p class=\"title-message\">Oh no!</p>\n        <p class=\"subtitle-message\">Something went wrong</p>\n      </div>\n    </div>\n\n    <div *ngIf=\"!error\" class=\"page lists-show\">\n      <nav>\n        <h1 class=\"title-page\">Taskbox</h1>\n      </nav>\n      <app-task-list></app-task-list>\n    </div>\n  `,\n})\nexport class PureInboxScreenComponent {\n  @Input() error: any;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "PureTaskListComponent",
            "id": "component-PureTaskListComponent-f707df533c9ae779bf9a2678cdee07f665f94b5fb4e6c8eb0932c68ac5a22c6bd3bc97d68ab18fc34d80b737218392e8f032160bc070a9500fa41a901e3c5742",
            "file": "src/app/components/pure-task-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pure-task-list",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"list-items\">\n  <app-task\n    *ngFor=\"let task of tasksInOrder\"\n    [task]=\"task\"\n    (onArchiveTask)=\"onArchiveTask.emit($event)\"\n    (onPinTask)=\"onPinTask.emit($event)\"\n  >\n  </app-task>\n\n  <div\n    *ngIf=\"tasksInOrder.length === 0 && !loading\"\n    class=\"wrapper-message\"\n  >\n    <span class=\"icon-check\"></span>\n    <p class=\"title-message\">You have no tasks</p>\n    <p class=\"subtitle-message\">Sit back and relax</p>\n  </div>\n  <div *ngIf=\"loading\">\n    <div *ngFor=\"let i of [1, 2, 3, 4, 5, 6]\" class=\"loading-item\">\n      <span class=\"glow-checkbox\"></span>\n      <span class=\"glow-text\">\n        <span>Loading</span> <span>cool</span> <span>state</span>\n      </span>\n    </div>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tasks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "Task[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onArchiveTask",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onPinTask",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { Task } from '../models/task.model';\n\n@Component({\n  selector: 'app-pure-task-list',\n  template: `\n    <div class=\"list-items\">\n      <app-task\n        *ngFor=\"let task of tasksInOrder\"\n        [task]=\"task\"\n        (onArchiveTask)=\"onArchiveTask.emit($event)\"\n        (onPinTask)=\"onPinTask.emit($event)\"\n      >\n      </app-task>\n\n      <div\n        *ngIf=\"tasksInOrder.length === 0 && !loading\"\n        class=\"wrapper-message\"\n      >\n        <span class=\"icon-check\"></span>\n        <p class=\"title-message\">You have no tasks</p>\n        <p class=\"subtitle-message\">Sit back and relax</p>\n      </div>\n      <div *ngIf=\"loading\">\n        <div *ngFor=\"let i of [1, 2, 3, 4, 5, 6]\" class=\"loading-item\">\n          <span class=\"glow-checkbox\"></span>\n          <span class=\"glow-text\">\n            <span>Loading</span> <span>cool</span> <span>state</span>\n          </span>\n        </div>\n      </div>\n    </div>\n  `,\n})\nexport class PureTaskListComponent {\n  /**\n   * @ignore\n   * Component property to define ordering of tasks\n   */\n  tasksInOrder: Task[] = [];\n\n  @Input() loading = false;\n\n  // tslint:disable-next-line: no-output-on-prefix\n  @Output() onPinTask: EventEmitter<any> = new EventEmitter();\n\n  // tslint:disable-next-line: no-output-on-prefix\n  @Output() onArchiveTask: EventEmitter<any> = new EventEmitter();\n\n  @Input()\n  set tasks(arr: Task[]) {\n    const initialTasks = [\n      ...arr.filter((t) => t.state === 'TASK_PINNED'),\n      ...arr.filter((t) => t.state !== 'TASK_PINNED'),\n    ];\n    const filteredTasks = initialTasks.filter(\n      (t) => t.state === 'TASK_INBOX' || t.state === 'TASK_PINNED'\n    );\n    this.tasksInOrder = filteredTasks.filter(\n      (t) => t.state === 'TASK_INBOX' || t.state === 'TASK_PINNED'\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "tasks": {
                    "name": "tasks",
                    "setSignature": {
                        "name": "tasks",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "arr",
                                "type": "Task[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 51,
                        "jsdoctags": [
                            {
                                "name": "arr",
                                "type": "Task[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "SeptfifteenComponent",
            "id": "component-SeptfifteenComponent-8dd6fff72155fe6d35f4a82a9d04b954fb4eb929e34de185dead9d7a83be6a3c278b4c9b292770eda2ddc2beda7482f63dee0e93d28c6caf1ba306025f3c3da6",
            "file": "src/app/youtube/Sep2022/septfifteen/septfifteen.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-septfifteen",
            "styleUrls": [
                "./septfifteen.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./septfifteen.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "myselectedtemp",
                    "defaultValue": "'first'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "Angular",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'Angular', {static: true}"
                        }
                    ]
                },
                {
                    "name": "Flowchart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'Flowchart', {static: true}"
                        }
                    ]
                },
                {
                    "name": "Output",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'Output', {static: true}"
                        }
                    ]
                },
                {
                    "name": "PRUpdate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'PRUpdate', {static: true}"
                        }
                    ]
                },
                {
                    "name": "Storybook",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'Storybook', {static: true}"
                        }
                    ]
                },
                {
                    "name": "tems",
                    "defaultValue": "this.Title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "Title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'Title', {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { OnInit, AfterContentInit, ViewChild, TemplateRef, Input, Component } from '@angular/core';\n\n@Component({\n  selector: 'app-septfifteen',\n  templateUrl: './septfifteen.component.html',\n  styleUrls: ['./septfifteen.component.scss']\n})\nexport class SeptfifteenComponent implements OnInit, AfterContentInit  {\n\n  @Input()\n  myselectedtemp: string = 'first';\n\n  @ViewChild('Title', { static: true })\n  Title!: TemplateRef<any>;\n  @ViewChild('Flowchart', { static: true })\n  Flowchart!: TemplateRef<any>;\n  \n  @ViewChild('Angular', { static: true })\n  Angular!: TemplateRef<any>;\n\n  @ViewChild('Storybook', { static: true })\n  Storybook!: TemplateRef<any>;\n\n  @ViewChild('PRUpdate', { static: true })\n  PRUpdate!: TemplateRef<any>;\n\n  @ViewChild('Output', { static: true })\n  Output!: TemplateRef<any>;\n\n  \n\n  tems: TemplateRef<any> = this.Title;\n  \n  ngOnInit(){      \n  }\n  ngAfterContentInit() {\n    switch (this.myselectedtemp) {\n    case 'Title':        \n      this.tems = this.Title;\n    break;  \n    case 'Flowchart':        \n      this.tems = this.Flowchart;\n    break;     \n    case 'Angular':        \n    this.tems = this.Angular;\n    break;\n    case 'Storybook':        \n        this.tems = this.Storybook;\n    break;\n    case 'PRUpdate':        \n    this.tems = this.PRUpdate;\n    break;\n    case 'Output':        \n    this.tems = this.Output;\n    break;    \n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./septfifteen.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit",
                "AfterContentInit"
            ],
            "templateData": "<ng-template #Title>\n  <markdown ngPreserveWhitespaces clipboard>\n    ---\n  </markdown>\n  <div class=\"markdown\" fxLayoutAlign=\"center center\">\n    <markdown mermaid [src]=\"'../../assets/Sep2022/Title.md'\"></markdown>\n  </div>\n  <markdown ngPreserveWhitespaces clipboard>\n    ---\n  </markdown>\n  <div class=\"footer\">\n    <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\n      Crafted with :heart: by **gmanojisaac** <span style=\"margin:0 .15em;\">•</span> Follow on\n      [GitHub](https://github.com/gmanoj.isaac)\n    </markdown>\n  </div>\n</ng-template>\n\n<ng-template #Flowchart>\n  <div class=\"markdown\" fxFlexOffset=\"15vw\" fxLayout=\"row\">\n    <markdown mermaid [src]=\"'../../../../assets/Sep2022/Flowchart.md'\"></markdown>\n  </div>\n</ng-template>\n\n<ng-template #Angular>\n  <div class=\"markdown\" fxFlexOffset=\"15vw\" fxLayout=\"row\">\n    <markdown mermaid [src]=\"'../../../../assets/Sep2022/Angular.md'\"></markdown>\n  </div>\n</ng-template>\n\n<ng-template #Storybook>\n  <div class=\"markdown\" fxFlexOffset=\"15vw\" fxLayout=\"row\">\n    <markdown mermaid [src]=\"'../../../../assets/Sep2022/Storybook.md'\"></markdown>\n  </div>\n</ng-template>\n\n<ng-template #PRUpdate>\n  <div class=\"markdown\" fxFlexOffset=\"15vw\" fxLayout=\"row\">\n    <markdown mermaid [src]=\"'../../../../assets/Sep2022/UpdatePR.md'\"></markdown>\n  </div>\n</ng-template>\n\n<ng-template #Output>\n  <markdown ngPreserveWhitespaces clipboard>\n    ---\n  </markdown>\n  <div class=\"markdown\" fxLayoutAlign=\"center center\">\n    <markdown mermaid [src]=\"'../../assets/Sep2022/stackblitzTitle.md'\"></markdown>\n  </div>\n  <markdown ngPreserveWhitespaces clipboard>\n    ---\n  </markdown>\n  <div class=\"footer\">\n    <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\n      Crafted with :heart: by **gmanojisaac** <span style=\"margin:0 .15em;\">•</span> Follow on\n      [GitHub](https://github.com/gmanoj.isaac)\n    </markdown>\n  </div>\n  <markdown mermaid [src]=\"'../../assets/Sep2022/Output.md'\" ngPreserveWhitespaces clipboard></markdown>\n\n\n    <iframe src=\"https://stackblitz.com/edit/angular?embed=1\" style=\"width: 50em; min-height: 30em; margin-top: 10vh;\" ></iframe>\n\n</ng-template>\n\n<ng-container [ngTemplateOutlet]=\"tems\" [ngTemplateOutletContext]=\"myContext\">"
        },
        {
            "name": "StackblitzComponent",
            "id": "component-StackblitzComponent-57def78b975da74300e2338d13f49df0fa8e00dba4def79e16e3f296486357e5ba55ed20a4363cc7faf2658abf80067f61f8af061a51cdcf55d26091b06a4e65",
            "file": "src/app/youtube/2022sept02/stackblitz.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-stackblitz",
            "styleUrls": [
                "./stackblitz.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./stackblitz.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bufferValue",
                    "defaultValue": "60",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n",
                    "description": "<p>ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode</p>\n",
                    "line": 27,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Color - primary (Theme color) | accent | warn\n",
                    "description": "<p>ProgressBar Color - primary (Theme color) | accent | warn</p>\n",
                    "line": 33,
                    "type": "ThemePalette",
                    "decorators": []
                },
                {
                    "name": "markdowncode",
                    "defaultValue": "`## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'indeterminate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "ProgressBarMode",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "40",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n",
                    "description": "<p>ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes</p>\n",
                    "line": 21,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, AfterContentInit, ViewChild, TemplateRef, } from '@angular/core';\nimport { ThemePalette } from '@angular/material/core';\nimport { ProgressBarMode } from '@angular/material/progress-bar';\n@Component({\n  selector: 'app-stackblitz',\n  templateUrl: './stackblitz.component.html',\n  styleUrls: ['./stackblitz.component.scss']\n})\nexport class StackblitzComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n}\n\n@Component({\n  selector: 'app-stackblitz-title',\n  template: `\n\n<ng-template #pagedesign>\n<markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n        <pre class=\"mermaid\">\n          flowchart TD\n          id1([1.Setup Windows Env]) -->  id2([2.Run Local Hello World Angular])\n\n          id2([2.Run Local Hello World Angular]) -->  id3([3.Add Shared Module])\n\n          id3([3.Add Shared Module])  --> id4([4.Add Material Design])\n      \n          id4([4.Add Material Design]) -->  id5([5.Add FlexLayout])\n\n          id5([5.Add FlexLayout]) -->  id6([6.Add Lazy Loaded Module/ Service])\n\n          id6([6.Add Lazy Loaded Module/ Service]) -->  id7([7.Add Reactive Forms])\n        </pre>\n      </markdown>\n</ng-template>\n    <ng-template #angularComp>\n      <markdown  ngPreserveWhitespaces clipboard>\n        ---\n      </markdown>\n      <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n        <pre class=\"mermaid\">\n          flowchart TD\n          id1([1.Setup Windows Env]) -->  id2([2.Run Local Hello World Angular])\n\n          id2([2.Run Local Hello World Angular]) -->  id3([3.Add Shared Module])\n\n          id3([3.Add Shared Module])  --> id4([4.Add Material Design])\n      \n          id4([4.Add Material Design]) -->  id5([5.Add FlexLayout])\n\n          id5([5.Add FlexLayout]) -->  id6([6.Add Lazy Loaded Module/ Service])\n\n          id6([6.Add Lazy Loaded Module/ Service]) -->  id7([7.Add Reactive Forms])\n        </pre>\n      </markdown>\n      <markdown  [src]=\"'../../assets/angularcomp.md'\" ngPreserveWhitespaces clipboard\n      commandLine\n      [prompt]=\"'PS C:\\Manoj>'\"\n      [filterOutput]=\"'(out)'\">\n    </markdown>\n    </ng-template>\n    <ng-template #storybookdesign >\n      <markdown  ngPreserveWhitespaces clipboard>\n            ---\n      </markdown>\n      <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n        <pre class=\"mermaid\">\n          flowchart TD\n          id1([Create a MDX file]) -->  id2([Give the correct component])\n\n          id2([Give the correct component]) -->  id3([Prepare the Meta data])\n\n          id3([Prepare the Meta data]) -->  id4([Create a Story from the component])\n\n          id4([Create a Story from the component]) -->  id5([Change the Order of the displayed stories])\n        </pre>\n      </markdown>\n      <markdown mermaid [src]=\"'../../assets/storydesign.md'\" ngPreserveWhitespaces clipboard ></markdown>\n  </ng-template>\n\n  <ng-template #angularsetup >\n    <markdown  ngPreserveWhitespaces clipboard>\n        ---\n    </markdown>\n    <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n      <pre class=\"mermaid\">\n        flowchart TD\n          id4([1.Prepare Git Environment]) -->  id5([2.Add repo and push in github])\n          id5([2.Add repo and push in github]) -->  id6([3.Host static pages in gh-pages])\n          id6([3.Host static pages in gh-pages]) -->  id7([4.Prepare Stackblitz Environment])\n          id7([4.Prepare Stackblitz Environment]) -->  id8([5.Prepare for Storybook branch])\n          id8([5.Prepare for Storybook branch]) -->  id9([6.Run in stackblitz Environment])\n      </pre>\n    </markdown>\n    <markdown  [src]=\"'../../assets/angularsetup.md'\" ngPreserveWhitespaces clipboard\n      commandLine\n      [prompt]=\"'PS C:\\Manoj>'\"\n      [filterOutput]=\"'(out)'\">\n    </markdown>\n  </ng-template>\n\n  <ng-template #mermaidCenter >\n    <markdown  ngPreserveWhitespaces clipboard>\n        ---\n    </markdown>\n    <div class=\"markdown\" fxLayoutAlign=\"center center\">\n      <markdown mermaid [src]=\"'../../assets/stackblitzTitle.md'\"></markdown>\n    </div>\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---\n  </markdown>\n    <div class=\"footer\">\n      <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\n        Crafted with :heart: by **gmanojisaac** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/gmanoj.isaac)\n      </markdown>\n    </div>\n    <markdown mermaid [src]=\"'../../assets/angularfirstpage.md'\"  ngPreserveWhitespaces clipboard></markdown>\n  </ng-template>\n\n  <ng-template #usingmermaid >\n    <markdown  ngPreserveWhitespaces clipboard>\n    ---          \n    </markdown>\n    <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n      <pre class=\"mermaid\">\n        flowchart TD\n        id1([Mermaid works]) --> id2([In html])\n        id1([Mermaid works]) --> id3([From src])\n      </pre>\n    </markdown>\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---\n      ## Mermaid __works__! \n    </markdown>\n    <markdown mermaid [src]=\"'../../assets/angularmermaid.md'\"  ngPreserveWhitespaces clipboard></markdown>\n  </ng-template>\n\n  <ng-template #usingmarkdown >\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---          \n    </markdown>\n    <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n      <pre class=\"mermaid\">\n        flowchart TD\n          id1([Markdown used in]) --> id2([In html])\n          id1([Markdown used in]) --> id3([In template])\n          id1([Markdown used in]) --> id4([In Component])\n          id1([Markdown used in]) --> id5([Load from src])\n          id1([Markdown used in]) --> id6([Load from .md file])\n      </pre>\n    </markdown>\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---\n      ## Markdown __works__!          \n    </markdown>      \n    <markdown  [src]=\"'../../assets/angularmarkdown.md'\" ngPreserveWhitespaces clipboard \n    commandLine\n      [prompt]=\"'PS C:\\Manoj>'\"\n      [filterOutput]=\"'(out)'\">\n      ></markdown>\n  </ng-template>\n  <ng-template #usingngxs >\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---          \n    </markdown>\n    <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n      <pre class=\"mermaid\">\n        flowchart TD\n          id1([1. Ngxs setup]) --> id2([2. Create HTML Task component ])\n          id2([2. Create HTML Task component ]) --> id3([3. Define Task Component Array and States ])\n          id3([3. Define Task Component Array and States ]) --> id4([4. Display logic for Task States from Store])\n          id4([4. Display logic for Task States from Store]) --> id5([5. Load All Task States from Store])\n          id5([5. Load All Task States from Store]) --> id6([6. Logic for Error State and normal state])\n          id6([6. Logic for Error State and normal state]) --> id7([7. Update Error State from Store])\n      </pre>\n    </markdown>\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---\n      ## NgXs __works__!          \n    </markdown>      \n    <div fxLayoutAlign=\"center center\">\n\n    <markdown mermaid [src]=\"'../../assets/angularngxs.md'\" ngPreserveWhitespaces clipboard ></markdown>   \n          </div>\n  </ng-template>\n  <ng-container \n    [ngTemplateOutlet]=\"tems\"\n    [ngTemplateOutletContext]=\"myContext\"> \n  </ng-container>\n  `,\n  styles: [`\n  \n  .footer {\n        margin: 32px 0 8px;\n  \n        &-text {\n          display: block;\n          font-size: 13px;\n          padding-top: 4px;\n        }\n      }\n  \n      .mat-fab,\n      .mat-mini-fab {\n        img {\n          margin-bottom: 2px;\n        }\n      }\n  \n      .sticky {\n        position: sticky;\n        top: 80px;\n      }\n  \n      .scrollup-button {\n        margin:14px;\n  \n        &--fixed {\n          position: fixed;\n          bottom: 16px;\n          right: 16px;\n        }\n      }  \n  `]\n})\nexport class StackblitzTitleComponent implements OnInit, AfterContentInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  \n  something = `\n  @ViewChild('mermaidCenter', { static: true })\n  mermaidCenter!: TemplateRef<any>;`;\n\n  @ViewChild('mermaidCenter', { static: true })\n  mermaidCenter!: TemplateRef<any>;\n\n  @ViewChild('usingmermaid', { static: true })\n  usingmermaid!: TemplateRef<any>;\n\n  @ViewChild('usingmarkdown', { static: true })\n  usingmarkdown!: TemplateRef<any>;\n\n  @ViewChild('pagedesign', { static: true })\n  pagedesign!: TemplateRef<any>;\n\n  @ViewChild('storybookdesign', { static: true })\n  storybookdesign!: TemplateRef<any>;\n\n  @ViewChild('angularsetup', { static: true })\n  angularsetup!: TemplateRef<any>;\n\n  @ViewChild('angularComp', { static: true })\n  angularComp!: TemplateRef<any>;\n\n  @ViewChild('usingngxs', { static: true })\n  usingngxs!: TemplateRef<any>;\n\n  \n  tems: TemplateRef<any> = this.mermaidCenter;\n  myContext = { $implicit: 'World', localSk: 'Svet' };\n\n\n  @Input()\n  myselectedtemp: string = 'first';\n\n  storydesign=`\n  \\`\\`\\`typescript\n  props: {\n  myselectedtemp : 'usingmarkdown'\n  },\n  \\`\\`\\`\n  `;\n\n  usingmarkdownMarkdown = `\n`;\n\n  usingmermaidMarkdown = `   \n  `;\n\n  pagedesignvar=`\n\n  `;\n\n  ngAfterContentInit() {\n\n    switch (this.myselectedtemp) {\n      case 'mermaidCenter':\n        this.tems = this.mermaidCenter;\n        break;\n\n      case 'usingmermaid':\n        this.tems = this.usingmermaid;\n        break;\n\n      case 'usingmarkdown':\n        this.tems = this.usingmarkdown;\n        break;\n      case 'pagedesign':\n        this.tems = this.pagedesign;\n        console.log('reached');\n        break;\n      case 'storybookdesign':\n        this.tems = this.storybookdesign;\n        break;\n      case 'angularsetup':\n        this.tems = this.angularsetup;\n        break;\n      case 'angularComp':\n        this.tems = this.angularComp;\n        break;\n      case 'usingngxs':\n        this.tems = this.usingngxs;\n        break;\n        \n\n    }\n  }\n\n}\n\n@Component({\n  selector: 'app-stackblitz-runangular',\n  templateUrl: './stackblitz.component.html',\n  styleUrls: ['./stackblitz.component.scss']\n})\nexport class StackblitzRunAngularComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n}\n\n@Component({\n  selector: 'app-stackblitz-storybook',\n  templateUrl: './stackblitz.component.html',\n  styleUrls: ['./stackblitz.component.scss']\n})\nexport class StackblitzStorybookComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n}\n\n@Component({\n  selector: 'app-stackblitz-updatePR',\n  templateUrl: './stackblitz.component.html',\n  styleUrls: ['./stackblitz.component.scss']\n})\nexport class StackblitzUpdatePRComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n}\n\n\n@Component({\n  selector: 'app-stackblitz-startpage',\n  template: `\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\n  <div fxLayout=\"row\" fxLayoutAlign=\"center\" fxLayoutGap=\"10vw\">\n    <mat-slider fxFlex=\"10vw\" min=\"1\" max=\"100\" step=\"1\" value=\"50\"></mat-slider>\n    <mat-slider fxFlex=\"10vw\" min=\"1\" max=\"100\" step=\"1\" value=\"50\"></mat-slider>\n  </div>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\n\n<h1>TaskOhers</h1>\n<!--markdown class=\"variable-binding\" [data]=\"markdowncode\"></markdown-->\n\n\n<div [innerHTML]=\"markdowncode | language : 'python' | markdown\"><div>\n\n<markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\n[lineOffset]=\"5\" [src]=\"'../../assets/stackblitzTypescript.md'\"></markdown>\n\n<div class=\"markdown\">\n  <markdown mermaid [src]=\"'../assets/myfile.md'\"></markdown>\n</div>\n\n<markdown mermaid >\n  <pre class=\"mermaid\">\n  sequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n</pre>\n</markdown>\n  `,\n  styles: [`\n  \n  `]\n})\nexport class StackblitzStartPageComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `\\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  <h5>\n    angular@{{ angularVersion }} | ngx-markdown@{{ ngxMarkdownVersion }}\n  </h5>\n  <br>\n  \n  <div markdown ngPreserveWhitespaces>{{ markdown }}</div>\n  <!-- <div markdown [data]=\"markdown\"></div> -->\n  \\`\\`\\`\n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n    - Unordered list\n    - Another unordered bullet point\n  \n  ### Blockquote\n  > Blockquote to the max!!!`;\n\n}\n\n\n@Component({\n  selector: 'app-stackblitz-testpage',\n  template: `\n<!--markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\n[lineOffset]=\"5\" [src]=\"'../../assets/stackblitzTypescript.md'\"></markdown-->\n\n\n\n<div markdown ngPreserveWhitespaces>{{ markdowncode }}</div>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\nDown here\n<ng-template #greet let-person><span>Hello {{person}} </span></ng-template>\n<ng-template #eng let-name><span>Hello {{name}}!</span></ng-template>\n<ng-template #svk let-person=\"localSk\" ><span>Ahoj {{person}}!</span></ng-template>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\n<ng-container \n  [ngTemplateOutlet]=\"tems\"\n  [ngTemplateOutletContext]=\"myContext\"> </ng-container>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\nHere\n  `,\n  styles: [`\n  \n  `]\n})\nexport class StackblitzStartTestComponent implements OnInit, AfterContentInit {\n\n  constructor() { }\n\n  @ViewChild('greet', { static: true })\n  greet!: TemplateRef<any>;\n  @ViewChild('svk', { static: true })\n  svk!: TemplateRef<any>;\n  @ViewChild('eng', { static: true })\n  eng!: TemplateRef<any>;\n\n  tems: TemplateRef<any> = this.greet;\n  myContext = { $implicit: 'World', localSk: 'Svet' };\n\n\n  @Input()\n  myselectedtemp: string = 'first';\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`powershell\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n  ngOnInit(): void { }\n  ngAfterContentInit() {\n\n    switch (this.myselectedtemp) {\n      case 'greet':\n        this.tems = this.greet;\n        break;\n      case 'svk':\n        this.tems = this.svk;\n        break;\n      case 'eng':\n        this.tems = this.eng;\n        break;\n    }\n  }\n\n}\n\n\n@Component({\n  selector: 'app-stackblitz-mermaidinline',\n  template: `\n\n<markdown mermaid >\n  <pre class=\"mermaid\">\n  sequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n</pre>\n</markdown>\n  `,\n  styles: [`\n  \n  `]\n})\nexport class StackblitzMermaidInlineComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n    .footer {\n        margin: 32px 0 8px;\n  \n        &-text {\n          display: block;\n          font-size: 13px;\n          padding-top: 4px;\n        }\n      }\n  \n      .mat-fab,\n      .mat-mini-fab {\n        img {\n          margin-bottom: 2px;\n        }\n      }\n  \n      .sticky {\n        position: sticky;\n        top: 80px;\n      }\n  \n      .scrollup-button {\n        margin:14px;\n  \n        &--fixed {\n          position: fixed;\n          bottom: 16px;\n          right: 16px;\n        }\n      }  ",
                    "styleUrl": "./stackblitz.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"markdown\" fxFlexOffset=\"25vw\" fxLayout=\"row\">\n    <markdown mermaid [src]=\"'../../assets/stackblitzMermaid.md'\"></markdown>\n </div>\n"
        },
        {
            "name": "StackblitzMermaidInlineComponent",
            "id": "component-StackblitzMermaidInlineComponent-57def78b975da74300e2338d13f49df0fa8e00dba4def79e16e3f296486357e5ba55ed20a4363cc7faf2658abf80067f61f8af061a51cdcf55d26091b06a4e65",
            "file": "src/app/youtube/2022sept02/stackblitz.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-stackblitz-mermaidinline",
            "styleUrls": [],
            "styles": [
                "\n  \n  "
            ],
            "template": "\n<markdown mermaid >\n  <pre class=\"mermaid\">\n  sequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n</pre>\n</markdown>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bufferValue",
                    "defaultValue": "60",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n",
                    "description": "<p>ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode</p>\n",
                    "line": 738,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Color - primary (Theme color) | accent | warn\n",
                    "description": "<p>ProgressBar Color - primary (Theme color) | accent | warn</p>\n",
                    "line": 744,
                    "type": "ThemePalette",
                    "decorators": []
                },
                {
                    "name": "markdowncode",
                    "defaultValue": "`## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 747,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'indeterminate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 726,
                    "type": "ProgressBarMode",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "40",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n",
                    "description": "<p>ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes</p>\n",
                    "line": 732,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 724,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, AfterContentInit, ViewChild, TemplateRef, } from '@angular/core';\nimport { ThemePalette } from '@angular/material/core';\nimport { ProgressBarMode } from '@angular/material/progress-bar';\n@Component({\n  selector: 'app-stackblitz',\n  templateUrl: './stackblitz.component.html',\n  styleUrls: ['./stackblitz.component.scss']\n})\nexport class StackblitzComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n}\n\n@Component({\n  selector: 'app-stackblitz-title',\n  template: `\n\n<ng-template #pagedesign>\n<markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n        <pre class=\"mermaid\">\n          flowchart TD\n          id1([1.Setup Windows Env]) -->  id2([2.Run Local Hello World Angular])\n\n          id2([2.Run Local Hello World Angular]) -->  id3([3.Add Shared Module])\n\n          id3([3.Add Shared Module])  --> id4([4.Add Material Design])\n      \n          id4([4.Add Material Design]) -->  id5([5.Add FlexLayout])\n\n          id5([5.Add FlexLayout]) -->  id6([6.Add Lazy Loaded Module/ Service])\n\n          id6([6.Add Lazy Loaded Module/ Service]) -->  id7([7.Add Reactive Forms])\n        </pre>\n      </markdown>\n</ng-template>\n    <ng-template #angularComp>\n      <markdown  ngPreserveWhitespaces clipboard>\n        ---\n      </markdown>\n      <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n        <pre class=\"mermaid\">\n          flowchart TD\n          id1([1.Setup Windows Env]) -->  id2([2.Run Local Hello World Angular])\n\n          id2([2.Run Local Hello World Angular]) -->  id3([3.Add Shared Module])\n\n          id3([3.Add Shared Module])  --> id4([4.Add Material Design])\n      \n          id4([4.Add Material Design]) -->  id5([5.Add FlexLayout])\n\n          id5([5.Add FlexLayout]) -->  id6([6.Add Lazy Loaded Module/ Service])\n\n          id6([6.Add Lazy Loaded Module/ Service]) -->  id7([7.Add Reactive Forms])\n        </pre>\n      </markdown>\n      <markdown  [src]=\"'../../assets/angularcomp.md'\" ngPreserveWhitespaces clipboard\n      commandLine\n      [prompt]=\"'PS C:\\Manoj>'\"\n      [filterOutput]=\"'(out)'\">\n    </markdown>\n    </ng-template>\n    <ng-template #storybookdesign >\n      <markdown  ngPreserveWhitespaces clipboard>\n            ---\n      </markdown>\n      <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n        <pre class=\"mermaid\">\n          flowchart TD\n          id1([Create a MDX file]) -->  id2([Give the correct component])\n\n          id2([Give the correct component]) -->  id3([Prepare the Meta data])\n\n          id3([Prepare the Meta data]) -->  id4([Create a Story from the component])\n\n          id4([Create a Story from the component]) -->  id5([Change the Order of the displayed stories])\n        </pre>\n      </markdown>\n      <markdown mermaid [src]=\"'../../assets/storydesign.md'\" ngPreserveWhitespaces clipboard ></markdown>\n  </ng-template>\n\n  <ng-template #angularsetup >\n    <markdown  ngPreserveWhitespaces clipboard>\n        ---\n    </markdown>\n    <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n      <pre class=\"mermaid\">\n        flowchart TD\n          id4([1.Prepare Git Environment]) -->  id5([2.Add repo and push in github])\n          id5([2.Add repo and push in github]) -->  id6([3.Host static pages in gh-pages])\n          id6([3.Host static pages in gh-pages]) -->  id7([4.Prepare Stackblitz Environment])\n          id7([4.Prepare Stackblitz Environment]) -->  id8([5.Prepare for Storybook branch])\n          id8([5.Prepare for Storybook branch]) -->  id9([6.Run in stackblitz Environment])\n      </pre>\n    </markdown>\n    <markdown  [src]=\"'../../assets/angularsetup.md'\" ngPreserveWhitespaces clipboard\n      commandLine\n      [prompt]=\"'PS C:\\Manoj>'\"\n      [filterOutput]=\"'(out)'\">\n    </markdown>\n  </ng-template>\n\n  <ng-template #mermaidCenter >\n    <markdown  ngPreserveWhitespaces clipboard>\n        ---\n    </markdown>\n    <div class=\"markdown\" fxLayoutAlign=\"center center\">\n      <markdown mermaid [src]=\"'../../assets/stackblitzTitle.md'\"></markdown>\n    </div>\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---\n  </markdown>\n    <div class=\"footer\">\n      <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\n        Crafted with :heart: by **gmanojisaac** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/gmanoj.isaac)\n      </markdown>\n    </div>\n    <markdown mermaid [src]=\"'../../assets/angularfirstpage.md'\"  ngPreserveWhitespaces clipboard></markdown>\n  </ng-template>\n\n  <ng-template #usingmermaid >\n    <markdown  ngPreserveWhitespaces clipboard>\n    ---          \n    </markdown>\n    <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n      <pre class=\"mermaid\">\n        flowchart TD\n        id1([Mermaid works]) --> id2([In html])\n        id1([Mermaid works]) --> id3([From src])\n      </pre>\n    </markdown>\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---\n      ## Mermaid __works__! \n    </markdown>\n    <markdown mermaid [src]=\"'../../assets/angularmermaid.md'\"  ngPreserveWhitespaces clipboard></markdown>\n  </ng-template>\n\n  <ng-template #usingmarkdown >\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---          \n    </markdown>\n    <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n      <pre class=\"mermaid\">\n        flowchart TD\n          id1([Markdown used in]) --> id2([In html])\n          id1([Markdown used in]) --> id3([In template])\n          id1([Markdown used in]) --> id4([In Component])\n          id1([Markdown used in]) --> id5([Load from src])\n          id1([Markdown used in]) --> id6([Load from .md file])\n      </pre>\n    </markdown>\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---\n      ## Markdown __works__!          \n    </markdown>      \n    <markdown  [src]=\"'../../assets/angularmarkdown.md'\" ngPreserveWhitespaces clipboard \n    commandLine\n      [prompt]=\"'PS C:\\Manoj>'\"\n      [filterOutput]=\"'(out)'\">\n      ></markdown>\n  </ng-template>\n  <ng-template #usingngxs >\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---          \n    </markdown>\n    <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n      <pre class=\"mermaid\">\n        flowchart TD\n          id1([1. Ngxs setup]) --> id2([2. Create HTML Task component ])\n          id2([2. Create HTML Task component ]) --> id3([3. Define Task Component Array and States ])\n          id3([3. Define Task Component Array and States ]) --> id4([4. Display logic for Task States from Store])\n          id4([4. Display logic for Task States from Store]) --> id5([5. Load All Task States from Store])\n          id5([5. Load All Task States from Store]) --> id6([6. Logic for Error State and normal state])\n          id6([6. Logic for Error State and normal state]) --> id7([7. Update Error State from Store])\n      </pre>\n    </markdown>\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---\n      ## NgXs __works__!          \n    </markdown>      \n    <div fxLayoutAlign=\"center center\">\n\n    <markdown mermaid [src]=\"'../../assets/angularngxs.md'\" ngPreserveWhitespaces clipboard ></markdown>   \n          </div>\n  </ng-template>\n  <ng-container \n    [ngTemplateOutlet]=\"tems\"\n    [ngTemplateOutletContext]=\"myContext\"> \n  </ng-container>\n  `,\n  styles: [`\n  \n  .footer {\n        margin: 32px 0 8px;\n  \n        &-text {\n          display: block;\n          font-size: 13px;\n          padding-top: 4px;\n        }\n      }\n  \n      .mat-fab,\n      .mat-mini-fab {\n        img {\n          margin-bottom: 2px;\n        }\n      }\n  \n      .sticky {\n        position: sticky;\n        top: 80px;\n      }\n  \n      .scrollup-button {\n        margin:14px;\n  \n        &--fixed {\n          position: fixed;\n          bottom: 16px;\n          right: 16px;\n        }\n      }  \n  `]\n})\nexport class StackblitzTitleComponent implements OnInit, AfterContentInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  \n  something = `\n  @ViewChild('mermaidCenter', { static: true })\n  mermaidCenter!: TemplateRef<any>;`;\n\n  @ViewChild('mermaidCenter', { static: true })\n  mermaidCenter!: TemplateRef<any>;\n\n  @ViewChild('usingmermaid', { static: true })\n  usingmermaid!: TemplateRef<any>;\n\n  @ViewChild('usingmarkdown', { static: true })\n  usingmarkdown!: TemplateRef<any>;\n\n  @ViewChild('pagedesign', { static: true })\n  pagedesign!: TemplateRef<any>;\n\n  @ViewChild('storybookdesign', { static: true })\n  storybookdesign!: TemplateRef<any>;\n\n  @ViewChild('angularsetup', { static: true })\n  angularsetup!: TemplateRef<any>;\n\n  @ViewChild('angularComp', { static: true })\n  angularComp!: TemplateRef<any>;\n\n  @ViewChild('usingngxs', { static: true })\n  usingngxs!: TemplateRef<any>;\n\n  \n  tems: TemplateRef<any> = this.mermaidCenter;\n  myContext = { $implicit: 'World', localSk: 'Svet' };\n\n\n  @Input()\n  myselectedtemp: string = 'first';\n\n  storydesign=`\n  \\`\\`\\`typescript\n  props: {\n  myselectedtemp : 'usingmarkdown'\n  },\n  \\`\\`\\`\n  `;\n\n  usingmarkdownMarkdown = `\n`;\n\n  usingmermaidMarkdown = `   \n  `;\n\n  pagedesignvar=`\n\n  `;\n\n  ngAfterContentInit() {\n\n    switch (this.myselectedtemp) {\n      case 'mermaidCenter':\n        this.tems = this.mermaidCenter;\n        break;\n\n      case 'usingmermaid':\n        this.tems = this.usingmermaid;\n        break;\n\n      case 'usingmarkdown':\n        this.tems = this.usingmarkdown;\n        break;\n      case 'pagedesign':\n        this.tems = this.pagedesign;\n        console.log('reached');\n        break;\n      case 'storybookdesign':\n        this.tems = this.storybookdesign;\n        break;\n      case 'angularsetup':\n        this.tems = this.angularsetup;\n        break;\n      case 'angularComp':\n        this.tems = this.angularComp;\n        break;\n      case 'usingngxs':\n        this.tems = this.usingngxs;\n        break;\n        \n\n    }\n  }\n\n}\n\n@Component({\n  selector: 'app-stackblitz-runangular',\n  templateUrl: './stackblitz.component.html',\n  styleUrls: ['./stackblitz.component.scss']\n})\nexport class StackblitzRunAngularComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n}\n\n@Component({\n  selector: 'app-stackblitz-storybook',\n  templateUrl: './stackblitz.component.html',\n  styleUrls: ['./stackblitz.component.scss']\n})\nexport class StackblitzStorybookComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n}\n\n@Component({\n  selector: 'app-stackblitz-updatePR',\n  templateUrl: './stackblitz.component.html',\n  styleUrls: ['./stackblitz.component.scss']\n})\nexport class StackblitzUpdatePRComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n}\n\n\n@Component({\n  selector: 'app-stackblitz-startpage',\n  template: `\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\n  <div fxLayout=\"row\" fxLayoutAlign=\"center\" fxLayoutGap=\"10vw\">\n    <mat-slider fxFlex=\"10vw\" min=\"1\" max=\"100\" step=\"1\" value=\"50\"></mat-slider>\n    <mat-slider fxFlex=\"10vw\" min=\"1\" max=\"100\" step=\"1\" value=\"50\"></mat-slider>\n  </div>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\n\n<h1>TaskOhers</h1>\n<!--markdown class=\"variable-binding\" [data]=\"markdowncode\"></markdown-->\n\n\n<div [innerHTML]=\"markdowncode | language : 'python' | markdown\"><div>\n\n<markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\n[lineOffset]=\"5\" [src]=\"'../../assets/stackblitzTypescript.md'\"></markdown>\n\n<div class=\"markdown\">\n  <markdown mermaid [src]=\"'../assets/myfile.md'\"></markdown>\n</div>\n\n<markdown mermaid >\n  <pre class=\"mermaid\">\n  sequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n</pre>\n</markdown>\n  `,\n  styles: [`\n  \n  `]\n})\nexport class StackblitzStartPageComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `\\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  <h5>\n    angular@{{ angularVersion }} | ngx-markdown@{{ ngxMarkdownVersion }}\n  </h5>\n  <br>\n  \n  <div markdown ngPreserveWhitespaces>{{ markdown }}</div>\n  <!-- <div markdown [data]=\"markdown\"></div> -->\n  \\`\\`\\`\n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n    - Unordered list\n    - Another unordered bullet point\n  \n  ### Blockquote\n  > Blockquote to the max!!!`;\n\n}\n\n\n@Component({\n  selector: 'app-stackblitz-testpage',\n  template: `\n<!--markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\n[lineOffset]=\"5\" [src]=\"'../../assets/stackblitzTypescript.md'\"></markdown-->\n\n\n\n<div markdown ngPreserveWhitespaces>{{ markdowncode }}</div>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\nDown here\n<ng-template #greet let-person><span>Hello {{person}} </span></ng-template>\n<ng-template #eng let-name><span>Hello {{name}}!</span></ng-template>\n<ng-template #svk let-person=\"localSk\" ><span>Ahoj {{person}}!</span></ng-template>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\n<ng-container \n  [ngTemplateOutlet]=\"tems\"\n  [ngTemplateOutletContext]=\"myContext\"> </ng-container>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\nHere\n  `,\n  styles: [`\n  \n  `]\n})\nexport class StackblitzStartTestComponent implements OnInit, AfterContentInit {\n\n  constructor() { }\n\n  @ViewChild('greet', { static: true })\n  greet!: TemplateRef<any>;\n  @ViewChild('svk', { static: true })\n  svk!: TemplateRef<any>;\n  @ViewChild('eng', { static: true })\n  eng!: TemplateRef<any>;\n\n  tems: TemplateRef<any> = this.greet;\n  myContext = { $implicit: 'World', localSk: 'Svet' };\n\n\n  @Input()\n  myselectedtemp: string = 'first';\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`powershell\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n  ngOnInit(): void { }\n  ngAfterContentInit() {\n\n    switch (this.myselectedtemp) {\n      case 'greet':\n        this.tems = this.greet;\n        break;\n      case 'svk':\n        this.tems = this.svk;\n        break;\n      case 'eng':\n        this.tems = this.eng;\n        break;\n    }\n  }\n\n}\n\n\n@Component({\n  selector: 'app-stackblitz-mermaidinline',\n  template: `\n\n<markdown mermaid >\n  <pre class=\"mermaid\">\n  sequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n</pre>\n</markdown>\n  `,\n  styles: [`\n  \n  `]\n})\nexport class StackblitzMermaidInlineComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n  \n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 720
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "StackblitzRunAngularComponent",
            "id": "component-StackblitzRunAngularComponent-57def78b975da74300e2338d13f49df0fa8e00dba4def79e16e3f296486357e5ba55ed20a4363cc7faf2658abf80067f61f8af061a51cdcf55d26091b06a4e65",
            "file": "src/app/youtube/2022sept02/stackblitz.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-stackblitz-runangular",
            "styleUrls": [
                "./stackblitz.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./stackblitz.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bufferValue",
                    "defaultValue": "60",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n",
                    "description": "<p>ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode</p>\n",
                    "line": 387,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Color - primary (Theme color) | accent | warn\n",
                    "description": "<p>ProgressBar Color - primary (Theme color) | accent | warn</p>\n",
                    "line": 393,
                    "type": "ThemePalette",
                    "decorators": []
                },
                {
                    "name": "markdowncode",
                    "defaultValue": "`## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 396,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'indeterminate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 375,
                    "type": "ProgressBarMode",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "40",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n",
                    "description": "<p>ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes</p>\n",
                    "line": 381,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 373,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, AfterContentInit, ViewChild, TemplateRef, } from '@angular/core';\nimport { ThemePalette } from '@angular/material/core';\nimport { ProgressBarMode } from '@angular/material/progress-bar';\n@Component({\n  selector: 'app-stackblitz',\n  templateUrl: './stackblitz.component.html',\n  styleUrls: ['./stackblitz.component.scss']\n})\nexport class StackblitzComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n}\n\n@Component({\n  selector: 'app-stackblitz-title',\n  template: `\n\n<ng-template #pagedesign>\n<markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n        <pre class=\"mermaid\">\n          flowchart TD\n          id1([1.Setup Windows Env]) -->  id2([2.Run Local Hello World Angular])\n\n          id2([2.Run Local Hello World Angular]) -->  id3([3.Add Shared Module])\n\n          id3([3.Add Shared Module])  --> id4([4.Add Material Design])\n      \n          id4([4.Add Material Design]) -->  id5([5.Add FlexLayout])\n\n          id5([5.Add FlexLayout]) -->  id6([6.Add Lazy Loaded Module/ Service])\n\n          id6([6.Add Lazy Loaded Module/ Service]) -->  id7([7.Add Reactive Forms])\n        </pre>\n      </markdown>\n</ng-template>\n    <ng-template #angularComp>\n      <markdown  ngPreserveWhitespaces clipboard>\n        ---\n      </markdown>\n      <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n        <pre class=\"mermaid\">\n          flowchart TD\n          id1([1.Setup Windows Env]) -->  id2([2.Run Local Hello World Angular])\n\n          id2([2.Run Local Hello World Angular]) -->  id3([3.Add Shared Module])\n\n          id3([3.Add Shared Module])  --> id4([4.Add Material Design])\n      \n          id4([4.Add Material Design]) -->  id5([5.Add FlexLayout])\n\n          id5([5.Add FlexLayout]) -->  id6([6.Add Lazy Loaded Module/ Service])\n\n          id6([6.Add Lazy Loaded Module/ Service]) -->  id7([7.Add Reactive Forms])\n        </pre>\n      </markdown>\n      <markdown  [src]=\"'../../assets/angularcomp.md'\" ngPreserveWhitespaces clipboard\n      commandLine\n      [prompt]=\"'PS C:\\Manoj>'\"\n      [filterOutput]=\"'(out)'\">\n    </markdown>\n    </ng-template>\n    <ng-template #storybookdesign >\n      <markdown  ngPreserveWhitespaces clipboard>\n            ---\n      </markdown>\n      <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n        <pre class=\"mermaid\">\n          flowchart TD\n          id1([Create a MDX file]) -->  id2([Give the correct component])\n\n          id2([Give the correct component]) -->  id3([Prepare the Meta data])\n\n          id3([Prepare the Meta data]) -->  id4([Create a Story from the component])\n\n          id4([Create a Story from the component]) -->  id5([Change the Order of the displayed stories])\n        </pre>\n      </markdown>\n      <markdown mermaid [src]=\"'../../assets/storydesign.md'\" ngPreserveWhitespaces clipboard ></markdown>\n  </ng-template>\n\n  <ng-template #angularsetup >\n    <markdown  ngPreserveWhitespaces clipboard>\n        ---\n    </markdown>\n    <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n      <pre class=\"mermaid\">\n        flowchart TD\n          id4([1.Prepare Git Environment]) -->  id5([2.Add repo and push in github])\n          id5([2.Add repo and push in github]) -->  id6([3.Host static pages in gh-pages])\n          id6([3.Host static pages in gh-pages]) -->  id7([4.Prepare Stackblitz Environment])\n          id7([4.Prepare Stackblitz Environment]) -->  id8([5.Prepare for Storybook branch])\n          id8([5.Prepare for Storybook branch]) -->  id9([6.Run in stackblitz Environment])\n      </pre>\n    </markdown>\n    <markdown  [src]=\"'../../assets/angularsetup.md'\" ngPreserveWhitespaces clipboard\n      commandLine\n      [prompt]=\"'PS C:\\Manoj>'\"\n      [filterOutput]=\"'(out)'\">\n    </markdown>\n  </ng-template>\n\n  <ng-template #mermaidCenter >\n    <markdown  ngPreserveWhitespaces clipboard>\n        ---\n    </markdown>\n    <div class=\"markdown\" fxLayoutAlign=\"center center\">\n      <markdown mermaid [src]=\"'../../assets/stackblitzTitle.md'\"></markdown>\n    </div>\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---\n  </markdown>\n    <div class=\"footer\">\n      <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\n        Crafted with :heart: by **gmanojisaac** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/gmanoj.isaac)\n      </markdown>\n    </div>\n    <markdown mermaid [src]=\"'../../assets/angularfirstpage.md'\"  ngPreserveWhitespaces clipboard></markdown>\n  </ng-template>\n\n  <ng-template #usingmermaid >\n    <markdown  ngPreserveWhitespaces clipboard>\n    ---          \n    </markdown>\n    <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n      <pre class=\"mermaid\">\n        flowchart TD\n        id1([Mermaid works]) --> id2([In html])\n        id1([Mermaid works]) --> id3([From src])\n      </pre>\n    </markdown>\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---\n      ## Mermaid __works__! \n    </markdown>\n    <markdown mermaid [src]=\"'../../assets/angularmermaid.md'\"  ngPreserveWhitespaces clipboard></markdown>\n  </ng-template>\n\n  <ng-template #usingmarkdown >\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---          \n    </markdown>\n    <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n      <pre class=\"mermaid\">\n        flowchart TD\n          id1([Markdown used in]) --> id2([In html])\n          id1([Markdown used in]) --> id3([In template])\n          id1([Markdown used in]) --> id4([In Component])\n          id1([Markdown used in]) --> id5([Load from src])\n          id1([Markdown used in]) --> id6([Load from .md file])\n      </pre>\n    </markdown>\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---\n      ## Markdown __works__!          \n    </markdown>      \n    <markdown  [src]=\"'../../assets/angularmarkdown.md'\" ngPreserveWhitespaces clipboard \n    commandLine\n      [prompt]=\"'PS C:\\Manoj>'\"\n      [filterOutput]=\"'(out)'\">\n      ></markdown>\n  </ng-template>\n  <ng-template #usingngxs >\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---          \n    </markdown>\n    <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n      <pre class=\"mermaid\">\n        flowchart TD\n          id1([1. Ngxs setup]) --> id2([2. Create HTML Task component ])\n          id2([2. Create HTML Task component ]) --> id3([3. Define Task Component Array and States ])\n          id3([3. Define Task Component Array and States ]) --> id4([4. Display logic for Task States from Store])\n          id4([4. Display logic for Task States from Store]) --> id5([5. Load All Task States from Store])\n          id5([5. Load All Task States from Store]) --> id6([6. Logic for Error State and normal state])\n          id6([6. Logic for Error State and normal state]) --> id7([7. Update Error State from Store])\n      </pre>\n    </markdown>\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---\n      ## NgXs __works__!          \n    </markdown>      \n    <div fxLayoutAlign=\"center center\">\n\n    <markdown mermaid [src]=\"'../../assets/angularngxs.md'\" ngPreserveWhitespaces clipboard ></markdown>   \n          </div>\n  </ng-template>\n  <ng-container \n    [ngTemplateOutlet]=\"tems\"\n    [ngTemplateOutletContext]=\"myContext\"> \n  </ng-container>\n  `,\n  styles: [`\n  \n  .footer {\n        margin: 32px 0 8px;\n  \n        &-text {\n          display: block;\n          font-size: 13px;\n          padding-top: 4px;\n        }\n      }\n  \n      .mat-fab,\n      .mat-mini-fab {\n        img {\n          margin-bottom: 2px;\n        }\n      }\n  \n      .sticky {\n        position: sticky;\n        top: 80px;\n      }\n  \n      .scrollup-button {\n        margin:14px;\n  \n        &--fixed {\n          position: fixed;\n          bottom: 16px;\n          right: 16px;\n        }\n      }  \n  `]\n})\nexport class StackblitzTitleComponent implements OnInit, AfterContentInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  \n  something = `\n  @ViewChild('mermaidCenter', { static: true })\n  mermaidCenter!: TemplateRef<any>;`;\n\n  @ViewChild('mermaidCenter', { static: true })\n  mermaidCenter!: TemplateRef<any>;\n\n  @ViewChild('usingmermaid', { static: true })\n  usingmermaid!: TemplateRef<any>;\n\n  @ViewChild('usingmarkdown', { static: true })\n  usingmarkdown!: TemplateRef<any>;\n\n  @ViewChild('pagedesign', { static: true })\n  pagedesign!: TemplateRef<any>;\n\n  @ViewChild('storybookdesign', { static: true })\n  storybookdesign!: TemplateRef<any>;\n\n  @ViewChild('angularsetup', { static: true })\n  angularsetup!: TemplateRef<any>;\n\n  @ViewChild('angularComp', { static: true })\n  angularComp!: TemplateRef<any>;\n\n  @ViewChild('usingngxs', { static: true })\n  usingngxs!: TemplateRef<any>;\n\n  \n  tems: TemplateRef<any> = this.mermaidCenter;\n  myContext = { $implicit: 'World', localSk: 'Svet' };\n\n\n  @Input()\n  myselectedtemp: string = 'first';\n\n  storydesign=`\n  \\`\\`\\`typescript\n  props: {\n  myselectedtemp : 'usingmarkdown'\n  },\n  \\`\\`\\`\n  `;\n\n  usingmarkdownMarkdown = `\n`;\n\n  usingmermaidMarkdown = `   \n  `;\n\n  pagedesignvar=`\n\n  `;\n\n  ngAfterContentInit() {\n\n    switch (this.myselectedtemp) {\n      case 'mermaidCenter':\n        this.tems = this.mermaidCenter;\n        break;\n\n      case 'usingmermaid':\n        this.tems = this.usingmermaid;\n        break;\n\n      case 'usingmarkdown':\n        this.tems = this.usingmarkdown;\n        break;\n      case 'pagedesign':\n        this.tems = this.pagedesign;\n        console.log('reached');\n        break;\n      case 'storybookdesign':\n        this.tems = this.storybookdesign;\n        break;\n      case 'angularsetup':\n        this.tems = this.angularsetup;\n        break;\n      case 'angularComp':\n        this.tems = this.angularComp;\n        break;\n      case 'usingngxs':\n        this.tems = this.usingngxs;\n        break;\n        \n\n    }\n  }\n\n}\n\n@Component({\n  selector: 'app-stackblitz-runangular',\n  templateUrl: './stackblitz.component.html',\n  styleUrls: ['./stackblitz.component.scss']\n})\nexport class StackblitzRunAngularComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n}\n\n@Component({\n  selector: 'app-stackblitz-storybook',\n  templateUrl: './stackblitz.component.html',\n  styleUrls: ['./stackblitz.component.scss']\n})\nexport class StackblitzStorybookComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n}\n\n@Component({\n  selector: 'app-stackblitz-updatePR',\n  templateUrl: './stackblitz.component.html',\n  styleUrls: ['./stackblitz.component.scss']\n})\nexport class StackblitzUpdatePRComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n}\n\n\n@Component({\n  selector: 'app-stackblitz-startpage',\n  template: `\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\n  <div fxLayout=\"row\" fxLayoutAlign=\"center\" fxLayoutGap=\"10vw\">\n    <mat-slider fxFlex=\"10vw\" min=\"1\" max=\"100\" step=\"1\" value=\"50\"></mat-slider>\n    <mat-slider fxFlex=\"10vw\" min=\"1\" max=\"100\" step=\"1\" value=\"50\"></mat-slider>\n  </div>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\n\n<h1>TaskOhers</h1>\n<!--markdown class=\"variable-binding\" [data]=\"markdowncode\"></markdown-->\n\n\n<div [innerHTML]=\"markdowncode | language : 'python' | markdown\"><div>\n\n<markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\n[lineOffset]=\"5\" [src]=\"'../../assets/stackblitzTypescript.md'\"></markdown>\n\n<div class=\"markdown\">\n  <markdown mermaid [src]=\"'../assets/myfile.md'\"></markdown>\n</div>\n\n<markdown mermaid >\n  <pre class=\"mermaid\">\n  sequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n</pre>\n</markdown>\n  `,\n  styles: [`\n  \n  `]\n})\nexport class StackblitzStartPageComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `\\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  <h5>\n    angular@{{ angularVersion }} | ngx-markdown@{{ ngxMarkdownVersion }}\n  </h5>\n  <br>\n  \n  <div markdown ngPreserveWhitespaces>{{ markdown }}</div>\n  <!-- <div markdown [data]=\"markdown\"></div> -->\n  \\`\\`\\`\n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n    - Unordered list\n    - Another unordered bullet point\n  \n  ### Blockquote\n  > Blockquote to the max!!!`;\n\n}\n\n\n@Component({\n  selector: 'app-stackblitz-testpage',\n  template: `\n<!--markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\n[lineOffset]=\"5\" [src]=\"'../../assets/stackblitzTypescript.md'\"></markdown-->\n\n\n\n<div markdown ngPreserveWhitespaces>{{ markdowncode }}</div>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\nDown here\n<ng-template #greet let-person><span>Hello {{person}} </span></ng-template>\n<ng-template #eng let-name><span>Hello {{name}}!</span></ng-template>\n<ng-template #svk let-person=\"localSk\" ><span>Ahoj {{person}}!</span></ng-template>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\n<ng-container \n  [ngTemplateOutlet]=\"tems\"\n  [ngTemplateOutletContext]=\"myContext\"> </ng-container>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\nHere\n  `,\n  styles: [`\n  \n  `]\n})\nexport class StackblitzStartTestComponent implements OnInit, AfterContentInit {\n\n  constructor() { }\n\n  @ViewChild('greet', { static: true })\n  greet!: TemplateRef<any>;\n  @ViewChild('svk', { static: true })\n  svk!: TemplateRef<any>;\n  @ViewChild('eng', { static: true })\n  eng!: TemplateRef<any>;\n\n  tems: TemplateRef<any> = this.greet;\n  myContext = { $implicit: 'World', localSk: 'Svet' };\n\n\n  @Input()\n  myselectedtemp: string = 'first';\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`powershell\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n  ngOnInit(): void { }\n  ngAfterContentInit() {\n\n    switch (this.myselectedtemp) {\n      case 'greet':\n        this.tems = this.greet;\n        break;\n      case 'svk':\n        this.tems = this.svk;\n        break;\n      case 'eng':\n        this.tems = this.eng;\n        break;\n    }\n  }\n\n}\n\n\n@Component({\n  selector: 'app-stackblitz-mermaidinline',\n  template: `\n\n<markdown mermaid >\n  <pre class=\"mermaid\">\n  sequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n</pre>\n</markdown>\n  `,\n  styles: [`\n  \n  `]\n})\nexport class StackblitzMermaidInlineComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n    .footer {\n        margin: 32px 0 8px;\n  \n        &-text {\n          display: block;\n          font-size: 13px;\n          padding-top: 4px;\n        }\n      }\n  \n      .mat-fab,\n      .mat-mini-fab {\n        img {\n          margin-bottom: 2px;\n        }\n      }\n  \n      .sticky {\n        position: sticky;\n        top: 80px;\n      }\n  \n      .scrollup-button {\n        margin:14px;\n  \n        &--fixed {\n          position: fixed;\n          bottom: 16px;\n          right: 16px;\n        }\n      }  ",
                    "styleUrl": "./stackblitz.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 369
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"markdown\" fxFlexOffset=\"25vw\" fxLayout=\"row\">\n    <markdown mermaid [src]=\"'../../assets/stackblitzMermaid.md'\"></markdown>\n </div>\n"
        },
        {
            "name": "StackblitzStartPageComponent",
            "id": "component-StackblitzStartPageComponent-57def78b975da74300e2338d13f49df0fa8e00dba4def79e16e3f296486357e5ba55ed20a4363cc7faf2658abf80067f61f8af061a51cdcf55d26091b06a4e65",
            "file": "src/app/youtube/2022sept02/stackblitz.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-stackblitz-startpage",
            "styleUrls": [],
            "styles": [
                "\n  \n  "
            ],
            "template": "<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\n  <div fxLayout=\"row\" fxLayoutAlign=\"center\" fxLayoutGap=\"10vw\">\n    <mat-slider fxFlex=\"10vw\" min=\"1\" max=\"100\" step=\"1\" value=\"50\"></mat-slider>\n    <mat-slider fxFlex=\"10vw\" min=\"1\" max=\"100\" step=\"1\" value=\"50\"></mat-slider>\n  </div>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\n\n<h1>TaskOhers</h1>\n<!--markdown class=\"variable-binding\" [data]=\"markdowncode\"></markdown-->\n\n\n<div [innerHTML]=\"markdowncode | language : 'python' | markdown\"><div>\n\n<markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\n[lineOffset]=\"5\" [src]=\"'../../assets/stackblitzTypescript.md'\"></markdown>\n\n<div class=\"markdown\">\n  <markdown mermaid [src]=\"'../assets/myfile.md'\"></markdown>\n</div>\n\n<markdown mermaid >\n  <pre class=\"mermaid\">\n  sequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n</pre>\n</markdown>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bufferValue",
                    "defaultValue": "60",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n",
                    "description": "<p>ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode</p>\n",
                    "line": 571,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Color - primary (Theme color) | accent | warn\n",
                    "description": "<p>ProgressBar Color - primary (Theme color) | accent | warn</p>\n",
                    "line": 577,
                    "type": "ThemePalette",
                    "decorators": []
                },
                {
                    "name": "markdowncode",
                    "defaultValue": "`\\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  <h5>\n    angular@{{ angularVersion }} | ngx-markdown@{{ ngxMarkdownVersion }}\n  </h5>\n  <br>\n  \n  <div markdown ngPreserveWhitespaces>{{ markdown }}</div>\n  <!-- <div markdown [data]=\"markdown\"></div> -->\n  \\`\\`\\`\n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n    - Unordered list\n    - Another unordered bullet point\n  \n  ### Blockquote\n  > Blockquote to the max!!!`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 580,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'indeterminate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 559,
                    "type": "ProgressBarMode",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "40",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n",
                    "description": "<p>ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes</p>\n",
                    "line": 565,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 557,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, AfterContentInit, ViewChild, TemplateRef, } from '@angular/core';\nimport { ThemePalette } from '@angular/material/core';\nimport { ProgressBarMode } from '@angular/material/progress-bar';\n@Component({\n  selector: 'app-stackblitz',\n  templateUrl: './stackblitz.component.html',\n  styleUrls: ['./stackblitz.component.scss']\n})\nexport class StackblitzComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n}\n\n@Component({\n  selector: 'app-stackblitz-title',\n  template: `\n\n<ng-template #pagedesign>\n<markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n        <pre class=\"mermaid\">\n          flowchart TD\n          id1([1.Setup Windows Env]) -->  id2([2.Run Local Hello World Angular])\n\n          id2([2.Run Local Hello World Angular]) -->  id3([3.Add Shared Module])\n\n          id3([3.Add Shared Module])  --> id4([4.Add Material Design])\n      \n          id4([4.Add Material Design]) -->  id5([5.Add FlexLayout])\n\n          id5([5.Add FlexLayout]) -->  id6([6.Add Lazy Loaded Module/ Service])\n\n          id6([6.Add Lazy Loaded Module/ Service]) -->  id7([7.Add Reactive Forms])\n        </pre>\n      </markdown>\n</ng-template>\n    <ng-template #angularComp>\n      <markdown  ngPreserveWhitespaces clipboard>\n        ---\n      </markdown>\n      <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n        <pre class=\"mermaid\">\n          flowchart TD\n          id1([1.Setup Windows Env]) -->  id2([2.Run Local Hello World Angular])\n\n          id2([2.Run Local Hello World Angular]) -->  id3([3.Add Shared Module])\n\n          id3([3.Add Shared Module])  --> id4([4.Add Material Design])\n      \n          id4([4.Add Material Design]) -->  id5([5.Add FlexLayout])\n\n          id5([5.Add FlexLayout]) -->  id6([6.Add Lazy Loaded Module/ Service])\n\n          id6([6.Add Lazy Loaded Module/ Service]) -->  id7([7.Add Reactive Forms])\n        </pre>\n      </markdown>\n      <markdown  [src]=\"'../../assets/angularcomp.md'\" ngPreserveWhitespaces clipboard\n      commandLine\n      [prompt]=\"'PS C:\\Manoj>'\"\n      [filterOutput]=\"'(out)'\">\n    </markdown>\n    </ng-template>\n    <ng-template #storybookdesign >\n      <markdown  ngPreserveWhitespaces clipboard>\n            ---\n      </markdown>\n      <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n        <pre class=\"mermaid\">\n          flowchart TD\n          id1([Create a MDX file]) -->  id2([Give the correct component])\n\n          id2([Give the correct component]) -->  id3([Prepare the Meta data])\n\n          id3([Prepare the Meta data]) -->  id4([Create a Story from the component])\n\n          id4([Create a Story from the component]) -->  id5([Change the Order of the displayed stories])\n        </pre>\n      </markdown>\n      <markdown mermaid [src]=\"'../../assets/storydesign.md'\" ngPreserveWhitespaces clipboard ></markdown>\n  </ng-template>\n\n  <ng-template #angularsetup >\n    <markdown  ngPreserveWhitespaces clipboard>\n        ---\n    </markdown>\n    <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n      <pre class=\"mermaid\">\n        flowchart TD\n          id4([1.Prepare Git Environment]) -->  id5([2.Add repo and push in github])\n          id5([2.Add repo and push in github]) -->  id6([3.Host static pages in gh-pages])\n          id6([3.Host static pages in gh-pages]) -->  id7([4.Prepare Stackblitz Environment])\n          id7([4.Prepare Stackblitz Environment]) -->  id8([5.Prepare for Storybook branch])\n          id8([5.Prepare for Storybook branch]) -->  id9([6.Run in stackblitz Environment])\n      </pre>\n    </markdown>\n    <markdown  [src]=\"'../../assets/angularsetup.md'\" ngPreserveWhitespaces clipboard\n      commandLine\n      [prompt]=\"'PS C:\\Manoj>'\"\n      [filterOutput]=\"'(out)'\">\n    </markdown>\n  </ng-template>\n\n  <ng-template #mermaidCenter >\n    <markdown  ngPreserveWhitespaces clipboard>\n        ---\n    </markdown>\n    <div class=\"markdown\" fxLayoutAlign=\"center center\">\n      <markdown mermaid [src]=\"'../../assets/stackblitzTitle.md'\"></markdown>\n    </div>\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---\n  </markdown>\n    <div class=\"footer\">\n      <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\n        Crafted with :heart: by **gmanojisaac** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/gmanoj.isaac)\n      </markdown>\n    </div>\n    <markdown mermaid [src]=\"'../../assets/angularfirstpage.md'\"  ngPreserveWhitespaces clipboard></markdown>\n  </ng-template>\n\n  <ng-template #usingmermaid >\n    <markdown  ngPreserveWhitespaces clipboard>\n    ---          \n    </markdown>\n    <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n      <pre class=\"mermaid\">\n        flowchart TD\n        id1([Mermaid works]) --> id2([In html])\n        id1([Mermaid works]) --> id3([From src])\n      </pre>\n    </markdown>\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---\n      ## Mermaid __works__! \n    </markdown>\n    <markdown mermaid [src]=\"'../../assets/angularmermaid.md'\"  ngPreserveWhitespaces clipboard></markdown>\n  </ng-template>\n\n  <ng-template #usingmarkdown >\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---          \n    </markdown>\n    <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n      <pre class=\"mermaid\">\n        flowchart TD\n          id1([Markdown used in]) --> id2([In html])\n          id1([Markdown used in]) --> id3([In template])\n          id1([Markdown used in]) --> id4([In Component])\n          id1([Markdown used in]) --> id5([Load from src])\n          id1([Markdown used in]) --> id6([Load from .md file])\n      </pre>\n    </markdown>\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---\n      ## Markdown __works__!          \n    </markdown>      \n    <markdown  [src]=\"'../../assets/angularmarkdown.md'\" ngPreserveWhitespaces clipboard \n    commandLine\n      [prompt]=\"'PS C:\\Manoj>'\"\n      [filterOutput]=\"'(out)'\">\n      ></markdown>\n  </ng-template>\n  <ng-template #usingngxs >\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---          \n    </markdown>\n    <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n      <pre class=\"mermaid\">\n        flowchart TD\n          id1([1. Ngxs setup]) --> id2([2. Create HTML Task component ])\n          id2([2. Create HTML Task component ]) --> id3([3. Define Task Component Array and States ])\n          id3([3. Define Task Component Array and States ]) --> id4([4. Display logic for Task States from Store])\n          id4([4. Display logic for Task States from Store]) --> id5([5. Load All Task States from Store])\n          id5([5. Load All Task States from Store]) --> id6([6. Logic for Error State and normal state])\n          id6([6. Logic for Error State and normal state]) --> id7([7. Update Error State from Store])\n      </pre>\n    </markdown>\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---\n      ## NgXs __works__!          \n    </markdown>      \n    <div fxLayoutAlign=\"center center\">\n\n    <markdown mermaid [src]=\"'../../assets/angularngxs.md'\" ngPreserveWhitespaces clipboard ></markdown>   \n          </div>\n  </ng-template>\n  <ng-container \n    [ngTemplateOutlet]=\"tems\"\n    [ngTemplateOutletContext]=\"myContext\"> \n  </ng-container>\n  `,\n  styles: [`\n  \n  .footer {\n        margin: 32px 0 8px;\n  \n        &-text {\n          display: block;\n          font-size: 13px;\n          padding-top: 4px;\n        }\n      }\n  \n      .mat-fab,\n      .mat-mini-fab {\n        img {\n          margin-bottom: 2px;\n        }\n      }\n  \n      .sticky {\n        position: sticky;\n        top: 80px;\n      }\n  \n      .scrollup-button {\n        margin:14px;\n  \n        &--fixed {\n          position: fixed;\n          bottom: 16px;\n          right: 16px;\n        }\n      }  \n  `]\n})\nexport class StackblitzTitleComponent implements OnInit, AfterContentInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  \n  something = `\n  @ViewChild('mermaidCenter', { static: true })\n  mermaidCenter!: TemplateRef<any>;`;\n\n  @ViewChild('mermaidCenter', { static: true })\n  mermaidCenter!: TemplateRef<any>;\n\n  @ViewChild('usingmermaid', { static: true })\n  usingmermaid!: TemplateRef<any>;\n\n  @ViewChild('usingmarkdown', { static: true })\n  usingmarkdown!: TemplateRef<any>;\n\n  @ViewChild('pagedesign', { static: true })\n  pagedesign!: TemplateRef<any>;\n\n  @ViewChild('storybookdesign', { static: true })\n  storybookdesign!: TemplateRef<any>;\n\n  @ViewChild('angularsetup', { static: true })\n  angularsetup!: TemplateRef<any>;\n\n  @ViewChild('angularComp', { static: true })\n  angularComp!: TemplateRef<any>;\n\n  @ViewChild('usingngxs', { static: true })\n  usingngxs!: TemplateRef<any>;\n\n  \n  tems: TemplateRef<any> = this.mermaidCenter;\n  myContext = { $implicit: 'World', localSk: 'Svet' };\n\n\n  @Input()\n  myselectedtemp: string = 'first';\n\n  storydesign=`\n  \\`\\`\\`typescript\n  props: {\n  myselectedtemp : 'usingmarkdown'\n  },\n  \\`\\`\\`\n  `;\n\n  usingmarkdownMarkdown = `\n`;\n\n  usingmermaidMarkdown = `   \n  `;\n\n  pagedesignvar=`\n\n  `;\n\n  ngAfterContentInit() {\n\n    switch (this.myselectedtemp) {\n      case 'mermaidCenter':\n        this.tems = this.mermaidCenter;\n        break;\n\n      case 'usingmermaid':\n        this.tems = this.usingmermaid;\n        break;\n\n      case 'usingmarkdown':\n        this.tems = this.usingmarkdown;\n        break;\n      case 'pagedesign':\n        this.tems = this.pagedesign;\n        console.log('reached');\n        break;\n      case 'storybookdesign':\n        this.tems = this.storybookdesign;\n        break;\n      case 'angularsetup':\n        this.tems = this.angularsetup;\n        break;\n      case 'angularComp':\n        this.tems = this.angularComp;\n        break;\n      case 'usingngxs':\n        this.tems = this.usingngxs;\n        break;\n        \n\n    }\n  }\n\n}\n\n@Component({\n  selector: 'app-stackblitz-runangular',\n  templateUrl: './stackblitz.component.html',\n  styleUrls: ['./stackblitz.component.scss']\n})\nexport class StackblitzRunAngularComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n}\n\n@Component({\n  selector: 'app-stackblitz-storybook',\n  templateUrl: './stackblitz.component.html',\n  styleUrls: ['./stackblitz.component.scss']\n})\nexport class StackblitzStorybookComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n}\n\n@Component({\n  selector: 'app-stackblitz-updatePR',\n  templateUrl: './stackblitz.component.html',\n  styleUrls: ['./stackblitz.component.scss']\n})\nexport class StackblitzUpdatePRComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n}\n\n\n@Component({\n  selector: 'app-stackblitz-startpage',\n  template: `\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\n  <div fxLayout=\"row\" fxLayoutAlign=\"center\" fxLayoutGap=\"10vw\">\n    <mat-slider fxFlex=\"10vw\" min=\"1\" max=\"100\" step=\"1\" value=\"50\"></mat-slider>\n    <mat-slider fxFlex=\"10vw\" min=\"1\" max=\"100\" step=\"1\" value=\"50\"></mat-slider>\n  </div>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\n\n<h1>TaskOhers</h1>\n<!--markdown class=\"variable-binding\" [data]=\"markdowncode\"></markdown-->\n\n\n<div [innerHTML]=\"markdowncode | language : 'python' | markdown\"><div>\n\n<markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\n[lineOffset]=\"5\" [src]=\"'../../assets/stackblitzTypescript.md'\"></markdown>\n\n<div class=\"markdown\">\n  <markdown mermaid [src]=\"'../assets/myfile.md'\"></markdown>\n</div>\n\n<markdown mermaid >\n  <pre class=\"mermaid\">\n  sequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n</pre>\n</markdown>\n  `,\n  styles: [`\n  \n  `]\n})\nexport class StackblitzStartPageComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `\\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  <h5>\n    angular@{{ angularVersion }} | ngx-markdown@{{ ngxMarkdownVersion }}\n  </h5>\n  <br>\n  \n  <div markdown ngPreserveWhitespaces>{{ markdown }}</div>\n  <!-- <div markdown [data]=\"markdown\"></div> -->\n  \\`\\`\\`\n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n    - Unordered list\n    - Another unordered bullet point\n  \n  ### Blockquote\n  > Blockquote to the max!!!`;\n\n}\n\n\n@Component({\n  selector: 'app-stackblitz-testpage',\n  template: `\n<!--markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\n[lineOffset]=\"5\" [src]=\"'../../assets/stackblitzTypescript.md'\"></markdown-->\n\n\n\n<div markdown ngPreserveWhitespaces>{{ markdowncode }}</div>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\nDown here\n<ng-template #greet let-person><span>Hello {{person}} </span></ng-template>\n<ng-template #eng let-name><span>Hello {{name}}!</span></ng-template>\n<ng-template #svk let-person=\"localSk\" ><span>Ahoj {{person}}!</span></ng-template>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\n<ng-container \n  [ngTemplateOutlet]=\"tems\"\n  [ngTemplateOutletContext]=\"myContext\"> </ng-container>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\nHere\n  `,\n  styles: [`\n  \n  `]\n})\nexport class StackblitzStartTestComponent implements OnInit, AfterContentInit {\n\n  constructor() { }\n\n  @ViewChild('greet', { static: true })\n  greet!: TemplateRef<any>;\n  @ViewChild('svk', { static: true })\n  svk!: TemplateRef<any>;\n  @ViewChild('eng', { static: true })\n  eng!: TemplateRef<any>;\n\n  tems: TemplateRef<any> = this.greet;\n  myContext = { $implicit: 'World', localSk: 'Svet' };\n\n\n  @Input()\n  myselectedtemp: string = 'first';\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`powershell\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n  ngOnInit(): void { }\n  ngAfterContentInit() {\n\n    switch (this.myselectedtemp) {\n      case 'greet':\n        this.tems = this.greet;\n        break;\n      case 'svk':\n        this.tems = this.svk;\n        break;\n      case 'eng':\n        this.tems = this.eng;\n        break;\n    }\n  }\n\n}\n\n\n@Component({\n  selector: 'app-stackblitz-mermaidinline',\n  template: `\n\n<markdown mermaid >\n  <pre class=\"mermaid\">\n  sequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n</pre>\n</markdown>\n  `,\n  styles: [`\n  \n  `]\n})\nexport class StackblitzMermaidInlineComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n  \n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 553
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "StackblitzStartTestComponent",
            "id": "component-StackblitzStartTestComponent-57def78b975da74300e2338d13f49df0fa8e00dba4def79e16e3f296486357e5ba55ed20a4363cc7faf2658abf80067f61f8af061a51cdcf55d26091b06a4e65",
            "file": "src/app/youtube/2022sept02/stackblitz.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-stackblitz-testpage",
            "styleUrls": [],
            "styles": [
                "\n  \n  "
            ],
            "template": "<!--markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\n[lineOffset]=\"5\" [src]=\"'../../assets/stackblitzTypescript.md'\"></markdown-->\n\n\n\n<div markdown ngPreserveWhitespaces>{{ markdowncode }}</div>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\nDown here\n<ng-template #greet let-person><span>Hello {{person}} </span></ng-template>\n<ng-template #eng let-name><span>Hello {{name}}!</span></ng-template>\n<ng-template #svk let-person=\"localSk\" ><span>Ahoj {{person}}!</span></ng-template>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\n<ng-container\n  [ngTemplateOutlet]=\"tems\"\n  [ngTemplateOutletContext]=\"myContext\"> </ng-container>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\nHere\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bufferValue",
                    "defaultValue": "60",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n",
                    "description": "<p>ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode</p>\n",
                    "line": 659,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Color - primary (Theme color) | accent | warn\n",
                    "description": "<p>ProgressBar Color - primary (Theme color) | accent | warn</p>\n",
                    "line": 665,
                    "type": "ThemePalette",
                    "decorators": []
                },
                {
                    "name": "markdowncode",
                    "defaultValue": "`## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`powershell\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 668,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'indeterminate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 647,
                    "type": "ProgressBarMode",
                    "decorators": []
                },
                {
                    "name": "myselectedtemp",
                    "defaultValue": "'first'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 645,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "40",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n",
                    "description": "<p>ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes</p>\n",
                    "line": 653,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "eng",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 638,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'eng', {static: true}"
                        }
                    ]
                },
                {
                    "name": "greet",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 634,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'greet', {static: true}"
                        }
                    ]
                },
                {
                    "name": "myContext",
                    "defaultValue": "{ $implicit: 'World', localSk: 'Svet' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 641
                },
                {
                    "name": "svk",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 636,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'svk', {static: true}"
                        }
                    ]
                },
                {
                    "name": "tems",
                    "defaultValue": "this.greet",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 640
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 686,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 685,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, AfterContentInit, ViewChild, TemplateRef, } from '@angular/core';\nimport { ThemePalette } from '@angular/material/core';\nimport { ProgressBarMode } from '@angular/material/progress-bar';\n@Component({\n  selector: 'app-stackblitz',\n  templateUrl: './stackblitz.component.html',\n  styleUrls: ['./stackblitz.component.scss']\n})\nexport class StackblitzComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n}\n\n@Component({\n  selector: 'app-stackblitz-title',\n  template: `\n\n<ng-template #pagedesign>\n<markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n        <pre class=\"mermaid\">\n          flowchart TD\n          id1([1.Setup Windows Env]) -->  id2([2.Run Local Hello World Angular])\n\n          id2([2.Run Local Hello World Angular]) -->  id3([3.Add Shared Module])\n\n          id3([3.Add Shared Module])  --> id4([4.Add Material Design])\n      \n          id4([4.Add Material Design]) -->  id5([5.Add FlexLayout])\n\n          id5([5.Add FlexLayout]) -->  id6([6.Add Lazy Loaded Module/ Service])\n\n          id6([6.Add Lazy Loaded Module/ Service]) -->  id7([7.Add Reactive Forms])\n        </pre>\n      </markdown>\n</ng-template>\n    <ng-template #angularComp>\n      <markdown  ngPreserveWhitespaces clipboard>\n        ---\n      </markdown>\n      <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n        <pre class=\"mermaid\">\n          flowchart TD\n          id1([1.Setup Windows Env]) -->  id2([2.Run Local Hello World Angular])\n\n          id2([2.Run Local Hello World Angular]) -->  id3([3.Add Shared Module])\n\n          id3([3.Add Shared Module])  --> id4([4.Add Material Design])\n      \n          id4([4.Add Material Design]) -->  id5([5.Add FlexLayout])\n\n          id5([5.Add FlexLayout]) -->  id6([6.Add Lazy Loaded Module/ Service])\n\n          id6([6.Add Lazy Loaded Module/ Service]) -->  id7([7.Add Reactive Forms])\n        </pre>\n      </markdown>\n      <markdown  [src]=\"'../../assets/angularcomp.md'\" ngPreserveWhitespaces clipboard\n      commandLine\n      [prompt]=\"'PS C:\\Manoj>'\"\n      [filterOutput]=\"'(out)'\">\n    </markdown>\n    </ng-template>\n    <ng-template #storybookdesign >\n      <markdown  ngPreserveWhitespaces clipboard>\n            ---\n      </markdown>\n      <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n        <pre class=\"mermaid\">\n          flowchart TD\n          id1([Create a MDX file]) -->  id2([Give the correct component])\n\n          id2([Give the correct component]) -->  id3([Prepare the Meta data])\n\n          id3([Prepare the Meta data]) -->  id4([Create a Story from the component])\n\n          id4([Create a Story from the component]) -->  id5([Change the Order of the displayed stories])\n        </pre>\n      </markdown>\n      <markdown mermaid [src]=\"'../../assets/storydesign.md'\" ngPreserveWhitespaces clipboard ></markdown>\n  </ng-template>\n\n  <ng-template #angularsetup >\n    <markdown  ngPreserveWhitespaces clipboard>\n        ---\n    </markdown>\n    <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n      <pre class=\"mermaid\">\n        flowchart TD\n          id4([1.Prepare Git Environment]) -->  id5([2.Add repo and push in github])\n          id5([2.Add repo and push in github]) -->  id6([3.Host static pages in gh-pages])\n          id6([3.Host static pages in gh-pages]) -->  id7([4.Prepare Stackblitz Environment])\n          id7([4.Prepare Stackblitz Environment]) -->  id8([5.Prepare for Storybook branch])\n          id8([5.Prepare for Storybook branch]) -->  id9([6.Run in stackblitz Environment])\n      </pre>\n    </markdown>\n    <markdown  [src]=\"'../../assets/angularsetup.md'\" ngPreserveWhitespaces clipboard\n      commandLine\n      [prompt]=\"'PS C:\\Manoj>'\"\n      [filterOutput]=\"'(out)'\">\n    </markdown>\n  </ng-template>\n\n  <ng-template #mermaidCenter >\n    <markdown  ngPreserveWhitespaces clipboard>\n        ---\n    </markdown>\n    <div class=\"markdown\" fxLayoutAlign=\"center center\">\n      <markdown mermaid [src]=\"'../../assets/stackblitzTitle.md'\"></markdown>\n    </div>\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---\n  </markdown>\n    <div class=\"footer\">\n      <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\n        Crafted with :heart: by **gmanojisaac** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/gmanoj.isaac)\n      </markdown>\n    </div>\n    <markdown mermaid [src]=\"'../../assets/angularfirstpage.md'\"  ngPreserveWhitespaces clipboard></markdown>\n  </ng-template>\n\n  <ng-template #usingmermaid >\n    <markdown  ngPreserveWhitespaces clipboard>\n    ---          \n    </markdown>\n    <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n      <pre class=\"mermaid\">\n        flowchart TD\n        id1([Mermaid works]) --> id2([In html])\n        id1([Mermaid works]) --> id3([From src])\n      </pre>\n    </markdown>\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---\n      ## Mermaid __works__! \n    </markdown>\n    <markdown mermaid [src]=\"'../../assets/angularmermaid.md'\"  ngPreserveWhitespaces clipboard></markdown>\n  </ng-template>\n\n  <ng-template #usingmarkdown >\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---          \n    </markdown>\n    <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n      <pre class=\"mermaid\">\n        flowchart TD\n          id1([Markdown used in]) --> id2([In html])\n          id1([Markdown used in]) --> id3([In template])\n          id1([Markdown used in]) --> id4([In Component])\n          id1([Markdown used in]) --> id5([Load from src])\n          id1([Markdown used in]) --> id6([Load from .md file])\n      </pre>\n    </markdown>\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---\n      ## Markdown __works__!          \n    </markdown>      \n    <markdown  [src]=\"'../../assets/angularmarkdown.md'\" ngPreserveWhitespaces clipboard \n    commandLine\n      [prompt]=\"'PS C:\\Manoj>'\"\n      [filterOutput]=\"'(out)'\">\n      ></markdown>\n  </ng-template>\n  <ng-template #usingngxs >\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---          \n    </markdown>\n    <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n      <pre class=\"mermaid\">\n        flowchart TD\n          id1([1. Ngxs setup]) --> id2([2. Create HTML Task component ])\n          id2([2. Create HTML Task component ]) --> id3([3. Define Task Component Array and States ])\n          id3([3. Define Task Component Array and States ]) --> id4([4. Display logic for Task States from Store])\n          id4([4. Display logic for Task States from Store]) --> id5([5. Load All Task States from Store])\n          id5([5. Load All Task States from Store]) --> id6([6. Logic for Error State and normal state])\n          id6([6. Logic for Error State and normal state]) --> id7([7. Update Error State from Store])\n      </pre>\n    </markdown>\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---\n      ## NgXs __works__!          \n    </markdown>      \n    <div fxLayoutAlign=\"center center\">\n\n    <markdown mermaid [src]=\"'../../assets/angularngxs.md'\" ngPreserveWhitespaces clipboard ></markdown>   \n          </div>\n  </ng-template>\n  <ng-container \n    [ngTemplateOutlet]=\"tems\"\n    [ngTemplateOutletContext]=\"myContext\"> \n  </ng-container>\n  `,\n  styles: [`\n  \n  .footer {\n        margin: 32px 0 8px;\n  \n        &-text {\n          display: block;\n          font-size: 13px;\n          padding-top: 4px;\n        }\n      }\n  \n      .mat-fab,\n      .mat-mini-fab {\n        img {\n          margin-bottom: 2px;\n        }\n      }\n  \n      .sticky {\n        position: sticky;\n        top: 80px;\n      }\n  \n      .scrollup-button {\n        margin:14px;\n  \n        &--fixed {\n          position: fixed;\n          bottom: 16px;\n          right: 16px;\n        }\n      }  \n  `]\n})\nexport class StackblitzTitleComponent implements OnInit, AfterContentInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  \n  something = `\n  @ViewChild('mermaidCenter', { static: true })\n  mermaidCenter!: TemplateRef<any>;`;\n\n  @ViewChild('mermaidCenter', { static: true })\n  mermaidCenter!: TemplateRef<any>;\n\n  @ViewChild('usingmermaid', { static: true })\n  usingmermaid!: TemplateRef<any>;\n\n  @ViewChild('usingmarkdown', { static: true })\n  usingmarkdown!: TemplateRef<any>;\n\n  @ViewChild('pagedesign', { static: true })\n  pagedesign!: TemplateRef<any>;\n\n  @ViewChild('storybookdesign', { static: true })\n  storybookdesign!: TemplateRef<any>;\n\n  @ViewChild('angularsetup', { static: true })\n  angularsetup!: TemplateRef<any>;\n\n  @ViewChild('angularComp', { static: true })\n  angularComp!: TemplateRef<any>;\n\n  @ViewChild('usingngxs', { static: true })\n  usingngxs!: TemplateRef<any>;\n\n  \n  tems: TemplateRef<any> = this.mermaidCenter;\n  myContext = { $implicit: 'World', localSk: 'Svet' };\n\n\n  @Input()\n  myselectedtemp: string = 'first';\n\n  storydesign=`\n  \\`\\`\\`typescript\n  props: {\n  myselectedtemp : 'usingmarkdown'\n  },\n  \\`\\`\\`\n  `;\n\n  usingmarkdownMarkdown = `\n`;\n\n  usingmermaidMarkdown = `   \n  `;\n\n  pagedesignvar=`\n\n  `;\n\n  ngAfterContentInit() {\n\n    switch (this.myselectedtemp) {\n      case 'mermaidCenter':\n        this.tems = this.mermaidCenter;\n        break;\n\n      case 'usingmermaid':\n        this.tems = this.usingmermaid;\n        break;\n\n      case 'usingmarkdown':\n        this.tems = this.usingmarkdown;\n        break;\n      case 'pagedesign':\n        this.tems = this.pagedesign;\n        console.log('reached');\n        break;\n      case 'storybookdesign':\n        this.tems = this.storybookdesign;\n        break;\n      case 'angularsetup':\n        this.tems = this.angularsetup;\n        break;\n      case 'angularComp':\n        this.tems = this.angularComp;\n        break;\n      case 'usingngxs':\n        this.tems = this.usingngxs;\n        break;\n        \n\n    }\n  }\n\n}\n\n@Component({\n  selector: 'app-stackblitz-runangular',\n  templateUrl: './stackblitz.component.html',\n  styleUrls: ['./stackblitz.component.scss']\n})\nexport class StackblitzRunAngularComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n}\n\n@Component({\n  selector: 'app-stackblitz-storybook',\n  templateUrl: './stackblitz.component.html',\n  styleUrls: ['./stackblitz.component.scss']\n})\nexport class StackblitzStorybookComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n}\n\n@Component({\n  selector: 'app-stackblitz-updatePR',\n  templateUrl: './stackblitz.component.html',\n  styleUrls: ['./stackblitz.component.scss']\n})\nexport class StackblitzUpdatePRComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n}\n\n\n@Component({\n  selector: 'app-stackblitz-startpage',\n  template: `\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\n  <div fxLayout=\"row\" fxLayoutAlign=\"center\" fxLayoutGap=\"10vw\">\n    <mat-slider fxFlex=\"10vw\" min=\"1\" max=\"100\" step=\"1\" value=\"50\"></mat-slider>\n    <mat-slider fxFlex=\"10vw\" min=\"1\" max=\"100\" step=\"1\" value=\"50\"></mat-slider>\n  </div>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\n\n<h1>TaskOhers</h1>\n<!--markdown class=\"variable-binding\" [data]=\"markdowncode\"></markdown-->\n\n\n<div [innerHTML]=\"markdowncode | language : 'python' | markdown\"><div>\n\n<markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\n[lineOffset]=\"5\" [src]=\"'../../assets/stackblitzTypescript.md'\"></markdown>\n\n<div class=\"markdown\">\n  <markdown mermaid [src]=\"'../assets/myfile.md'\"></markdown>\n</div>\n\n<markdown mermaid >\n  <pre class=\"mermaid\">\n  sequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n</pre>\n</markdown>\n  `,\n  styles: [`\n  \n  `]\n})\nexport class StackblitzStartPageComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `\\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  <h5>\n    angular@{{ angularVersion }} | ngx-markdown@{{ ngxMarkdownVersion }}\n  </h5>\n  <br>\n  \n  <div markdown ngPreserveWhitespaces>{{ markdown }}</div>\n  <!-- <div markdown [data]=\"markdown\"></div> -->\n  \\`\\`\\`\n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n    - Unordered list\n    - Another unordered bullet point\n  \n  ### Blockquote\n  > Blockquote to the max!!!`;\n\n}\n\n\n@Component({\n  selector: 'app-stackblitz-testpage',\n  template: `\n<!--markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\n[lineOffset]=\"5\" [src]=\"'../../assets/stackblitzTypescript.md'\"></markdown-->\n\n\n\n<div markdown ngPreserveWhitespaces>{{ markdowncode }}</div>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\nDown here\n<ng-template #greet let-person><span>Hello {{person}} </span></ng-template>\n<ng-template #eng let-name><span>Hello {{name}}!</span></ng-template>\n<ng-template #svk let-person=\"localSk\" ><span>Ahoj {{person}}!</span></ng-template>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\n<ng-container \n  [ngTemplateOutlet]=\"tems\"\n  [ngTemplateOutletContext]=\"myContext\"> </ng-container>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\nHere\n  `,\n  styles: [`\n  \n  `]\n})\nexport class StackblitzStartTestComponent implements OnInit, AfterContentInit {\n\n  constructor() { }\n\n  @ViewChild('greet', { static: true })\n  greet!: TemplateRef<any>;\n  @ViewChild('svk', { static: true })\n  svk!: TemplateRef<any>;\n  @ViewChild('eng', { static: true })\n  eng!: TemplateRef<any>;\n\n  tems: TemplateRef<any> = this.greet;\n  myContext = { $implicit: 'World', localSk: 'Svet' };\n\n\n  @Input()\n  myselectedtemp: string = 'first';\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`powershell\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n  ngOnInit(): void { }\n  ngAfterContentInit() {\n\n    switch (this.myselectedtemp) {\n      case 'greet':\n        this.tems = this.greet;\n        break;\n      case 'svk':\n        this.tems = this.svk;\n        break;\n      case 'eng':\n        this.tems = this.eng;\n        break;\n    }\n  }\n\n}\n\n\n@Component({\n  selector: 'app-stackblitz-mermaidinline',\n  template: `\n\n<markdown mermaid >\n  <pre class=\"mermaid\">\n  sequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n</pre>\n</markdown>\n  `,\n  styles: [`\n  \n  `]\n})\nexport class StackblitzMermaidInlineComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n  \n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 629
            },
            "implements": [
                "OnInit",
                "AfterContentInit"
            ]
        },
        {
            "name": "StackblitzStorybookComponent",
            "id": "component-StackblitzStorybookComponent-57def78b975da74300e2338d13f49df0fa8e00dba4def79e16e3f296486357e5ba55ed20a4363cc7faf2658abf80067f61f8af061a51cdcf55d26091b06a4e65",
            "file": "src/app/youtube/2022sept02/stackblitz.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-stackblitz-storybook",
            "styleUrls": [
                "./stackblitz.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./stackblitz.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bufferValue",
                    "defaultValue": "60",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n",
                    "description": "<p>ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode</p>\n",
                    "line": 438,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Color - primary (Theme color) | accent | warn\n",
                    "description": "<p>ProgressBar Color - primary (Theme color) | accent | warn</p>\n",
                    "line": 444,
                    "type": "ThemePalette",
                    "decorators": []
                },
                {
                    "name": "markdowncode",
                    "defaultValue": "`## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 447,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'indeterminate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 426,
                    "type": "ProgressBarMode",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "40",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n",
                    "description": "<p>ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes</p>\n",
                    "line": 432,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 424,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, AfterContentInit, ViewChild, TemplateRef, } from '@angular/core';\nimport { ThemePalette } from '@angular/material/core';\nimport { ProgressBarMode } from '@angular/material/progress-bar';\n@Component({\n  selector: 'app-stackblitz',\n  templateUrl: './stackblitz.component.html',\n  styleUrls: ['./stackblitz.component.scss']\n})\nexport class StackblitzComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n}\n\n@Component({\n  selector: 'app-stackblitz-title',\n  template: `\n\n<ng-template #pagedesign>\n<markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n        <pre class=\"mermaid\">\n          flowchart TD\n          id1([1.Setup Windows Env]) -->  id2([2.Run Local Hello World Angular])\n\n          id2([2.Run Local Hello World Angular]) -->  id3([3.Add Shared Module])\n\n          id3([3.Add Shared Module])  --> id4([4.Add Material Design])\n      \n          id4([4.Add Material Design]) -->  id5([5.Add FlexLayout])\n\n          id5([5.Add FlexLayout]) -->  id6([6.Add Lazy Loaded Module/ Service])\n\n          id6([6.Add Lazy Loaded Module/ Service]) -->  id7([7.Add Reactive Forms])\n        </pre>\n      </markdown>\n</ng-template>\n    <ng-template #angularComp>\n      <markdown  ngPreserveWhitespaces clipboard>\n        ---\n      </markdown>\n      <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n        <pre class=\"mermaid\">\n          flowchart TD\n          id1([1.Setup Windows Env]) -->  id2([2.Run Local Hello World Angular])\n\n          id2([2.Run Local Hello World Angular]) -->  id3([3.Add Shared Module])\n\n          id3([3.Add Shared Module])  --> id4([4.Add Material Design])\n      \n          id4([4.Add Material Design]) -->  id5([5.Add FlexLayout])\n\n          id5([5.Add FlexLayout]) -->  id6([6.Add Lazy Loaded Module/ Service])\n\n          id6([6.Add Lazy Loaded Module/ Service]) -->  id7([7.Add Reactive Forms])\n        </pre>\n      </markdown>\n      <markdown  [src]=\"'../../assets/angularcomp.md'\" ngPreserveWhitespaces clipboard\n      commandLine\n      [prompt]=\"'PS C:\\Manoj>'\"\n      [filterOutput]=\"'(out)'\">\n    </markdown>\n    </ng-template>\n    <ng-template #storybookdesign >\n      <markdown  ngPreserveWhitespaces clipboard>\n            ---\n      </markdown>\n      <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n        <pre class=\"mermaid\">\n          flowchart TD\n          id1([Create a MDX file]) -->  id2([Give the correct component])\n\n          id2([Give the correct component]) -->  id3([Prepare the Meta data])\n\n          id3([Prepare the Meta data]) -->  id4([Create a Story from the component])\n\n          id4([Create a Story from the component]) -->  id5([Change the Order of the displayed stories])\n        </pre>\n      </markdown>\n      <markdown mermaid [src]=\"'../../assets/storydesign.md'\" ngPreserveWhitespaces clipboard ></markdown>\n  </ng-template>\n\n  <ng-template #angularsetup >\n    <markdown  ngPreserveWhitespaces clipboard>\n        ---\n    </markdown>\n    <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n      <pre class=\"mermaid\">\n        flowchart TD\n          id4([1.Prepare Git Environment]) -->  id5([2.Add repo and push in github])\n          id5([2.Add repo and push in github]) -->  id6([3.Host static pages in gh-pages])\n          id6([3.Host static pages in gh-pages]) -->  id7([4.Prepare Stackblitz Environment])\n          id7([4.Prepare Stackblitz Environment]) -->  id8([5.Prepare for Storybook branch])\n          id8([5.Prepare for Storybook branch]) -->  id9([6.Run in stackblitz Environment])\n      </pre>\n    </markdown>\n    <markdown  [src]=\"'../../assets/angularsetup.md'\" ngPreserveWhitespaces clipboard\n      commandLine\n      [prompt]=\"'PS C:\\Manoj>'\"\n      [filterOutput]=\"'(out)'\">\n    </markdown>\n  </ng-template>\n\n  <ng-template #mermaidCenter >\n    <markdown  ngPreserveWhitespaces clipboard>\n        ---\n    </markdown>\n    <div class=\"markdown\" fxLayoutAlign=\"center center\">\n      <markdown mermaid [src]=\"'../../assets/stackblitzTitle.md'\"></markdown>\n    </div>\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---\n  </markdown>\n    <div class=\"footer\">\n      <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\n        Crafted with :heart: by **gmanojisaac** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/gmanoj.isaac)\n      </markdown>\n    </div>\n    <markdown mermaid [src]=\"'../../assets/angularfirstpage.md'\"  ngPreserveWhitespaces clipboard></markdown>\n  </ng-template>\n\n  <ng-template #usingmermaid >\n    <markdown  ngPreserveWhitespaces clipboard>\n    ---          \n    </markdown>\n    <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n      <pre class=\"mermaid\">\n        flowchart TD\n        id1([Mermaid works]) --> id2([In html])\n        id1([Mermaid works]) --> id3([From src])\n      </pre>\n    </markdown>\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---\n      ## Mermaid __works__! \n    </markdown>\n    <markdown mermaid [src]=\"'../../assets/angularmermaid.md'\"  ngPreserveWhitespaces clipboard></markdown>\n  </ng-template>\n\n  <ng-template #usingmarkdown >\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---          \n    </markdown>\n    <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n      <pre class=\"mermaid\">\n        flowchart TD\n          id1([Markdown used in]) --> id2([In html])\n          id1([Markdown used in]) --> id3([In template])\n          id1([Markdown used in]) --> id4([In Component])\n          id1([Markdown used in]) --> id5([Load from src])\n          id1([Markdown used in]) --> id6([Load from .md file])\n      </pre>\n    </markdown>\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---\n      ## Markdown __works__!          \n    </markdown>      \n    <markdown  [src]=\"'../../assets/angularmarkdown.md'\" ngPreserveWhitespaces clipboard \n    commandLine\n      [prompt]=\"'PS C:\\Manoj>'\"\n      [filterOutput]=\"'(out)'\">\n      ></markdown>\n  </ng-template>\n  <ng-template #usingngxs >\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---          \n    </markdown>\n    <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n      <pre class=\"mermaid\">\n        flowchart TD\n          id1([1. Ngxs setup]) --> id2([2. Create HTML Task component ])\n          id2([2. Create HTML Task component ]) --> id3([3. Define Task Component Array and States ])\n          id3([3. Define Task Component Array and States ]) --> id4([4. Display logic for Task States from Store])\n          id4([4. Display logic for Task States from Store]) --> id5([5. Load All Task States from Store])\n          id5([5. Load All Task States from Store]) --> id6([6. Logic for Error State and normal state])\n          id6([6. Logic for Error State and normal state]) --> id7([7. Update Error State from Store])\n      </pre>\n    </markdown>\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---\n      ## NgXs __works__!          \n    </markdown>      \n    <div fxLayoutAlign=\"center center\">\n\n    <markdown mermaid [src]=\"'../../assets/angularngxs.md'\" ngPreserveWhitespaces clipboard ></markdown>   \n          </div>\n  </ng-template>\n  <ng-container \n    [ngTemplateOutlet]=\"tems\"\n    [ngTemplateOutletContext]=\"myContext\"> \n  </ng-container>\n  `,\n  styles: [`\n  \n  .footer {\n        margin: 32px 0 8px;\n  \n        &-text {\n          display: block;\n          font-size: 13px;\n          padding-top: 4px;\n        }\n      }\n  \n      .mat-fab,\n      .mat-mini-fab {\n        img {\n          margin-bottom: 2px;\n        }\n      }\n  \n      .sticky {\n        position: sticky;\n        top: 80px;\n      }\n  \n      .scrollup-button {\n        margin:14px;\n  \n        &--fixed {\n          position: fixed;\n          bottom: 16px;\n          right: 16px;\n        }\n      }  \n  `]\n})\nexport class StackblitzTitleComponent implements OnInit, AfterContentInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  \n  something = `\n  @ViewChild('mermaidCenter', { static: true })\n  mermaidCenter!: TemplateRef<any>;`;\n\n  @ViewChild('mermaidCenter', { static: true })\n  mermaidCenter!: TemplateRef<any>;\n\n  @ViewChild('usingmermaid', { static: true })\n  usingmermaid!: TemplateRef<any>;\n\n  @ViewChild('usingmarkdown', { static: true })\n  usingmarkdown!: TemplateRef<any>;\n\n  @ViewChild('pagedesign', { static: true })\n  pagedesign!: TemplateRef<any>;\n\n  @ViewChild('storybookdesign', { static: true })\n  storybookdesign!: TemplateRef<any>;\n\n  @ViewChild('angularsetup', { static: true })\n  angularsetup!: TemplateRef<any>;\n\n  @ViewChild('angularComp', { static: true })\n  angularComp!: TemplateRef<any>;\n\n  @ViewChild('usingngxs', { static: true })\n  usingngxs!: TemplateRef<any>;\n\n  \n  tems: TemplateRef<any> = this.mermaidCenter;\n  myContext = { $implicit: 'World', localSk: 'Svet' };\n\n\n  @Input()\n  myselectedtemp: string = 'first';\n\n  storydesign=`\n  \\`\\`\\`typescript\n  props: {\n  myselectedtemp : 'usingmarkdown'\n  },\n  \\`\\`\\`\n  `;\n\n  usingmarkdownMarkdown = `\n`;\n\n  usingmermaidMarkdown = `   \n  `;\n\n  pagedesignvar=`\n\n  `;\n\n  ngAfterContentInit() {\n\n    switch (this.myselectedtemp) {\n      case 'mermaidCenter':\n        this.tems = this.mermaidCenter;\n        break;\n\n      case 'usingmermaid':\n        this.tems = this.usingmermaid;\n        break;\n\n      case 'usingmarkdown':\n        this.tems = this.usingmarkdown;\n        break;\n      case 'pagedesign':\n        this.tems = this.pagedesign;\n        console.log('reached');\n        break;\n      case 'storybookdesign':\n        this.tems = this.storybookdesign;\n        break;\n      case 'angularsetup':\n        this.tems = this.angularsetup;\n        break;\n      case 'angularComp':\n        this.tems = this.angularComp;\n        break;\n      case 'usingngxs':\n        this.tems = this.usingngxs;\n        break;\n        \n\n    }\n  }\n\n}\n\n@Component({\n  selector: 'app-stackblitz-runangular',\n  templateUrl: './stackblitz.component.html',\n  styleUrls: ['./stackblitz.component.scss']\n})\nexport class StackblitzRunAngularComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n}\n\n@Component({\n  selector: 'app-stackblitz-storybook',\n  templateUrl: './stackblitz.component.html',\n  styleUrls: ['./stackblitz.component.scss']\n})\nexport class StackblitzStorybookComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n}\n\n@Component({\n  selector: 'app-stackblitz-updatePR',\n  templateUrl: './stackblitz.component.html',\n  styleUrls: ['./stackblitz.component.scss']\n})\nexport class StackblitzUpdatePRComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n}\n\n\n@Component({\n  selector: 'app-stackblitz-startpage',\n  template: `\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\n  <div fxLayout=\"row\" fxLayoutAlign=\"center\" fxLayoutGap=\"10vw\">\n    <mat-slider fxFlex=\"10vw\" min=\"1\" max=\"100\" step=\"1\" value=\"50\"></mat-slider>\n    <mat-slider fxFlex=\"10vw\" min=\"1\" max=\"100\" step=\"1\" value=\"50\"></mat-slider>\n  </div>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\n\n<h1>TaskOhers</h1>\n<!--markdown class=\"variable-binding\" [data]=\"markdowncode\"></markdown-->\n\n\n<div [innerHTML]=\"markdowncode | language : 'python' | markdown\"><div>\n\n<markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\n[lineOffset]=\"5\" [src]=\"'../../assets/stackblitzTypescript.md'\"></markdown>\n\n<div class=\"markdown\">\n  <markdown mermaid [src]=\"'../assets/myfile.md'\"></markdown>\n</div>\n\n<markdown mermaid >\n  <pre class=\"mermaid\">\n  sequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n</pre>\n</markdown>\n  `,\n  styles: [`\n  \n  `]\n})\nexport class StackblitzStartPageComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `\\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  <h5>\n    angular@{{ angularVersion }} | ngx-markdown@{{ ngxMarkdownVersion }}\n  </h5>\n  <br>\n  \n  <div markdown ngPreserveWhitespaces>{{ markdown }}</div>\n  <!-- <div markdown [data]=\"markdown\"></div> -->\n  \\`\\`\\`\n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n    - Unordered list\n    - Another unordered bullet point\n  \n  ### Blockquote\n  > Blockquote to the max!!!`;\n\n}\n\n\n@Component({\n  selector: 'app-stackblitz-testpage',\n  template: `\n<!--markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\n[lineOffset]=\"5\" [src]=\"'../../assets/stackblitzTypescript.md'\"></markdown-->\n\n\n\n<div markdown ngPreserveWhitespaces>{{ markdowncode }}</div>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\nDown here\n<ng-template #greet let-person><span>Hello {{person}} </span></ng-template>\n<ng-template #eng let-name><span>Hello {{name}}!</span></ng-template>\n<ng-template #svk let-person=\"localSk\" ><span>Ahoj {{person}}!</span></ng-template>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\n<ng-container \n  [ngTemplateOutlet]=\"tems\"\n  [ngTemplateOutletContext]=\"myContext\"> </ng-container>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\nHere\n  `,\n  styles: [`\n  \n  `]\n})\nexport class StackblitzStartTestComponent implements OnInit, AfterContentInit {\n\n  constructor() { }\n\n  @ViewChild('greet', { static: true })\n  greet!: TemplateRef<any>;\n  @ViewChild('svk', { static: true })\n  svk!: TemplateRef<any>;\n  @ViewChild('eng', { static: true })\n  eng!: TemplateRef<any>;\n\n  tems: TemplateRef<any> = this.greet;\n  myContext = { $implicit: 'World', localSk: 'Svet' };\n\n\n  @Input()\n  myselectedtemp: string = 'first';\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`powershell\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n  ngOnInit(): void { }\n  ngAfterContentInit() {\n\n    switch (this.myselectedtemp) {\n      case 'greet':\n        this.tems = this.greet;\n        break;\n      case 'svk':\n        this.tems = this.svk;\n        break;\n      case 'eng':\n        this.tems = this.eng;\n        break;\n    }\n  }\n\n}\n\n\n@Component({\n  selector: 'app-stackblitz-mermaidinline',\n  template: `\n\n<markdown mermaid >\n  <pre class=\"mermaid\">\n  sequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n</pre>\n</markdown>\n  `,\n  styles: [`\n  \n  `]\n})\nexport class StackblitzMermaidInlineComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n    .footer {\n        margin: 32px 0 8px;\n  \n        &-text {\n          display: block;\n          font-size: 13px;\n          padding-top: 4px;\n        }\n      }\n  \n      .mat-fab,\n      .mat-mini-fab {\n        img {\n          margin-bottom: 2px;\n        }\n      }\n  \n      .sticky {\n        position: sticky;\n        top: 80px;\n      }\n  \n      .scrollup-button {\n        margin:14px;\n  \n        &--fixed {\n          position: fixed;\n          bottom: 16px;\n          right: 16px;\n        }\n      }  ",
                    "styleUrl": "./stackblitz.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 420
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"markdown\" fxFlexOffset=\"25vw\" fxLayout=\"row\">\n    <markdown mermaid [src]=\"'../../assets/stackblitzMermaid.md'\"></markdown>\n </div>\n"
        },
        {
            "name": "StackblitzTitleComponent",
            "id": "component-StackblitzTitleComponent-57def78b975da74300e2338d13f49df0fa8e00dba4def79e16e3f296486357e5ba55ed20a4363cc7faf2658abf80067f61f8af061a51cdcf55d26091b06a4e65",
            "file": "src/app/youtube/2022sept02/stackblitz.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-stackblitz-title",
            "styleUrls": [],
            "styles": [
                "\n  \n  .footer {\n        margin: 32px 0 8px;\n  \n        &-text {\n          display: block;\n          font-size: 13px;\n          padding-top: 4px;\n        }\n      }\n  \n      .mat-fab,\n      .mat-mini-fab {\n        img {\n          margin-bottom: 2px;\n        }\n      }\n  \n      .sticky {\n        position: sticky;\n        top: 80px;\n      }\n  \n      .scrollup-button {\n        margin:14px;\n  \n        &--fixed {\n          position: fixed;\n          bottom: 16px;\n          right: 16px;\n        }\n      }  \n  "
            ],
            "template": "\n<ng-template #pagedesign>\n<markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n        <pre class=\"mermaid\">\n          flowchart TD\n          id1([1.Setup Windows Env]) -->  id2([2.Run Local Hello World Angular])\n\n          id2([2.Run Local Hello World Angular]) -->  id3([3.Add Shared Module])\n\n          id3([3.Add Shared Module])  --> id4([4.Add Material Design])\n\n          id4([4.Add Material Design]) -->  id5([5.Add FlexLayout])\n\n          id5([5.Add FlexLayout]) -->  id6([6.Add Lazy Loaded Module/ Service])\n\n          id6([6.Add Lazy Loaded Module/ Service]) -->  id7([7.Add Reactive Forms])\n        </pre>\n      </markdown>\n</ng-template>\n    <ng-template #angularComp>\n      <markdown  ngPreserveWhitespaces clipboard>\n        ---\n      </markdown>\n      <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n        <pre class=\"mermaid\">\n          flowchart TD\n          id1([1.Setup Windows Env]) -->  id2([2.Run Local Hello World Angular])\n\n          id2([2.Run Local Hello World Angular]) -->  id3([3.Add Shared Module])\n\n          id3([3.Add Shared Module])  --> id4([4.Add Material Design])\n\n          id4([4.Add Material Design]) -->  id5([5.Add FlexLayout])\n\n          id5([5.Add FlexLayout]) -->  id6([6.Add Lazy Loaded Module/ Service])\n\n          id6([6.Add Lazy Loaded Module/ Service]) -->  id7([7.Add Reactive Forms])\n        </pre>\n      </markdown>\n      <markdown  [src]=\"'../../assets/angularcomp.md'\" ngPreserveWhitespaces clipboard\n      commandLine\n      [prompt]=\"'PS C:Manoj>'\"\n      [filterOutput]=\"'(out)'\">\n    </markdown>\n    </ng-template>\n    <ng-template #storybookdesign >\n      <markdown  ngPreserveWhitespaces clipboard>\n            ---\n      </markdown>\n      <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n        <pre class=\"mermaid\">\n          flowchart TD\n          id1([Create a MDX file]) -->  id2([Give the correct component])\n\n          id2([Give the correct component]) -->  id3([Prepare the Meta data])\n\n          id3([Prepare the Meta data]) -->  id4([Create a Story from the component])\n\n          id4([Create a Story from the component]) -->  id5([Change the Order of the displayed stories])\n        </pre>\n      </markdown>\n      <markdown mermaid [src]=\"'../../assets/storydesign.md'\" ngPreserveWhitespaces clipboard ></markdown>\n  </ng-template>\n\n  <ng-template #angularsetup >\n    <markdown  ngPreserveWhitespaces clipboard>\n        ---\n    </markdown>\n    <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n      <pre class=\"mermaid\">\n        flowchart TD\n          id4([1.Prepare Git Environment]) -->  id5([2.Add repo and push in github])\n          id5([2.Add repo and push in github]) -->  id6([3.Host static pages in gh-pages])\n          id6([3.Host static pages in gh-pages]) -->  id7([4.Prepare Stackblitz Environment])\n          id7([4.Prepare Stackblitz Environment]) -->  id8([5.Prepare for Storybook branch])\n          id8([5.Prepare for Storybook branch]) -->  id9([6.Run in stackblitz Environment])\n      </pre>\n    </markdown>\n    <markdown  [src]=\"'../../assets/angularsetup.md'\" ngPreserveWhitespaces clipboard\n      commandLine\n      [prompt]=\"'PS C:Manoj>'\"\n      [filterOutput]=\"'(out)'\">\n    </markdown>\n  </ng-template>\n\n  <ng-template #mermaidCenter >\n    <markdown  ngPreserveWhitespaces clipboard>\n        ---\n    </markdown>\n    <div class=\"markdown\" fxLayoutAlign=\"center center\">\n      <markdown mermaid [src]=\"'../../assets/stackblitzTitle.md'\"></markdown>\n    </div>\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---\n  </markdown>\n    <div class=\"footer\">\n      <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\n        Crafted with :heart: by **gmanojisaac** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/gmanoj.isaac)\n      </markdown>\n    </div>\n    <markdown mermaid [src]=\"'../../assets/angularfirstpage.md'\"  ngPreserveWhitespaces clipboard></markdown>\n  </ng-template>\n\n  <ng-template #usingmermaid >\n    <markdown  ngPreserveWhitespaces clipboard>\n    ---\n    </markdown>\n    <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n      <pre class=\"mermaid\">\n        flowchart TD\n        id1([Mermaid works]) --> id2([In html])\n        id1([Mermaid works]) --> id3([From src])\n      </pre>\n    </markdown>\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---\n      ## Mermaid __works__!\n    </markdown>\n    <markdown mermaid [src]=\"'../../assets/angularmermaid.md'\"  ngPreserveWhitespaces clipboard></markdown>\n  </ng-template>\n\n  <ng-template #usingmarkdown >\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---\n    </markdown>\n    <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n      <pre class=\"mermaid\">\n        flowchart TD\n          id1([Markdown used in]) --> id2([In html])\n          id1([Markdown used in]) --> id3([In template])\n          id1([Markdown used in]) --> id4([In Component])\n          id1([Markdown used in]) --> id5([Load from src])\n          id1([Markdown used in]) --> id6([Load from .md file])\n      </pre>\n    </markdown>\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---\n      ## Markdown __works__!\n    </markdown>\n    <markdown  [src]=\"'../../assets/angularmarkdown.md'\" ngPreserveWhitespaces clipboard\n    commandLine\n      [prompt]=\"'PS C:Manoj>'\"\n      [filterOutput]=\"'(out)'\">\n      ></markdown>\n  </ng-template>\n  <ng-template #usingngxs >\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---\n    </markdown>\n    <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n      <pre class=\"mermaid\">\n        flowchart TD\n          id1([1. Ngxs setup]) --> id2([2. Create HTML Task component ])\n          id2([2. Create HTML Task component ]) --> id3([3. Define Task Component Array and States ])\n          id3([3. Define Task Component Array and States ]) --> id4([4. Display logic for Task States from Store])\n          id4([4. Display logic for Task States from Store]) --> id5([5. Load All Task States from Store])\n          id5([5. Load All Task States from Store]) --> id6([6. Logic for Error State and normal state])\n          id6([6. Logic for Error State and normal state]) --> id7([7. Update Error State from Store])\n      </pre>\n    </markdown>\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---\n      ## NgXs __works__!\n    </markdown>\n    <div fxLayoutAlign=\"center center\">\n\n    <markdown mermaid [src]=\"'../../assets/angularngxs.md'\" ngPreserveWhitespaces clipboard ></markdown>\n          </div>\n  </ng-template>\n  <ng-container\n    [ngTemplateOutlet]=\"tems\"\n    [ngTemplateOutletContext]=\"myContext\">\n  </ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "myselectedtemp",
                    "defaultValue": "'first'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 307,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "angularComp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 296,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'angularComp', {static: true}"
                        }
                    ]
                },
                {
                    "name": "angularsetup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 293,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'angularsetup', {static: true}"
                        }
                    ]
                },
                {
                    "name": "mermaidCenter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 278,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'mermaidCenter', {static: true}"
                        }
                    ]
                },
                {
                    "name": "myContext",
                    "defaultValue": "{ $implicit: 'World', localSk: 'Svet' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 303
                },
                {
                    "name": "pagedesign",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 287,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'pagedesign', {static: true}"
                        }
                    ]
                },
                {
                    "name": "pagedesignvar",
                    "defaultValue": "`\n\n  `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 323
                },
                {
                    "name": "something",
                    "defaultValue": "`\n  @ViewChild('mermaidCenter', { static: true })\n  mermaidCenter!: TemplateRef<any>;`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 273
                },
                {
                    "name": "storybookdesign",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 290,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'storybookdesign', {static: true}"
                        }
                    ]
                },
                {
                    "name": "storydesign",
                    "defaultValue": "`\n  \\`\\`\\`typescript\n  props: {\n  myselectedtemp : 'usingmarkdown'\n  },\n  \\`\\`\\`\n  `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 309
                },
                {
                    "name": "tems",
                    "defaultValue": "this.mermaidCenter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 302
                },
                {
                    "name": "usingmarkdown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 284,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'usingmarkdown', {static: true}"
                        }
                    ]
                },
                {
                    "name": "usingmarkdownMarkdown",
                    "defaultValue": "`\n`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 317
                },
                {
                    "name": "usingmermaid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 281,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'usingmermaid', {static: true}"
                        }
                    ]
                },
                {
                    "name": "usingmermaidMarkdown",
                    "defaultValue": "`   \n  `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 320
                },
                {
                    "name": "usingngxs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 299,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'usingngxs', {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 327,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 271,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, AfterContentInit, ViewChild, TemplateRef, } from '@angular/core';\nimport { ThemePalette } from '@angular/material/core';\nimport { ProgressBarMode } from '@angular/material/progress-bar';\n@Component({\n  selector: 'app-stackblitz',\n  templateUrl: './stackblitz.component.html',\n  styleUrls: ['./stackblitz.component.scss']\n})\nexport class StackblitzComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n}\n\n@Component({\n  selector: 'app-stackblitz-title',\n  template: `\n\n<ng-template #pagedesign>\n<markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n        <pre class=\"mermaid\">\n          flowchart TD\n          id1([1.Setup Windows Env]) -->  id2([2.Run Local Hello World Angular])\n\n          id2([2.Run Local Hello World Angular]) -->  id3([3.Add Shared Module])\n\n          id3([3.Add Shared Module])  --> id4([4.Add Material Design])\n      \n          id4([4.Add Material Design]) -->  id5([5.Add FlexLayout])\n\n          id5([5.Add FlexLayout]) -->  id6([6.Add Lazy Loaded Module/ Service])\n\n          id6([6.Add Lazy Loaded Module/ Service]) -->  id7([7.Add Reactive Forms])\n        </pre>\n      </markdown>\n</ng-template>\n    <ng-template #angularComp>\n      <markdown  ngPreserveWhitespaces clipboard>\n        ---\n      </markdown>\n      <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n        <pre class=\"mermaid\">\n          flowchart TD\n          id1([1.Setup Windows Env]) -->  id2([2.Run Local Hello World Angular])\n\n          id2([2.Run Local Hello World Angular]) -->  id3([3.Add Shared Module])\n\n          id3([3.Add Shared Module])  --> id4([4.Add Material Design])\n      \n          id4([4.Add Material Design]) -->  id5([5.Add FlexLayout])\n\n          id5([5.Add FlexLayout]) -->  id6([6.Add Lazy Loaded Module/ Service])\n\n          id6([6.Add Lazy Loaded Module/ Service]) -->  id7([7.Add Reactive Forms])\n        </pre>\n      </markdown>\n      <markdown  [src]=\"'../../assets/angularcomp.md'\" ngPreserveWhitespaces clipboard\n      commandLine\n      [prompt]=\"'PS C:\\Manoj>'\"\n      [filterOutput]=\"'(out)'\">\n    </markdown>\n    </ng-template>\n    <ng-template #storybookdesign >\n      <markdown  ngPreserveWhitespaces clipboard>\n            ---\n      </markdown>\n      <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n        <pre class=\"mermaid\">\n          flowchart TD\n          id1([Create a MDX file]) -->  id2([Give the correct component])\n\n          id2([Give the correct component]) -->  id3([Prepare the Meta data])\n\n          id3([Prepare the Meta data]) -->  id4([Create a Story from the component])\n\n          id4([Create a Story from the component]) -->  id5([Change the Order of the displayed stories])\n        </pre>\n      </markdown>\n      <markdown mermaid [src]=\"'../../assets/storydesign.md'\" ngPreserveWhitespaces clipboard ></markdown>\n  </ng-template>\n\n  <ng-template #angularsetup >\n    <markdown  ngPreserveWhitespaces clipboard>\n        ---\n    </markdown>\n    <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n      <pre class=\"mermaid\">\n        flowchart TD\n          id4([1.Prepare Git Environment]) -->  id5([2.Add repo and push in github])\n          id5([2.Add repo and push in github]) -->  id6([3.Host static pages in gh-pages])\n          id6([3.Host static pages in gh-pages]) -->  id7([4.Prepare Stackblitz Environment])\n          id7([4.Prepare Stackblitz Environment]) -->  id8([5.Prepare for Storybook branch])\n          id8([5.Prepare for Storybook branch]) -->  id9([6.Run in stackblitz Environment])\n      </pre>\n    </markdown>\n    <markdown  [src]=\"'../../assets/angularsetup.md'\" ngPreserveWhitespaces clipboard\n      commandLine\n      [prompt]=\"'PS C:\\Manoj>'\"\n      [filterOutput]=\"'(out)'\">\n    </markdown>\n  </ng-template>\n\n  <ng-template #mermaidCenter >\n    <markdown  ngPreserveWhitespaces clipboard>\n        ---\n    </markdown>\n    <div class=\"markdown\" fxLayoutAlign=\"center center\">\n      <markdown mermaid [src]=\"'../../assets/stackblitzTitle.md'\"></markdown>\n    </div>\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---\n  </markdown>\n    <div class=\"footer\">\n      <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\n        Crafted with :heart: by **gmanojisaac** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/gmanoj.isaac)\n      </markdown>\n    </div>\n    <markdown mermaid [src]=\"'../../assets/angularfirstpage.md'\"  ngPreserveWhitespaces clipboard></markdown>\n  </ng-template>\n\n  <ng-template #usingmermaid >\n    <markdown  ngPreserveWhitespaces clipboard>\n    ---          \n    </markdown>\n    <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n      <pre class=\"mermaid\">\n        flowchart TD\n        id1([Mermaid works]) --> id2([In html])\n        id1([Mermaid works]) --> id3([From src])\n      </pre>\n    </markdown>\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---\n      ## Mermaid __works__! \n    </markdown>\n    <markdown mermaid [src]=\"'../../assets/angularmermaid.md'\"  ngPreserveWhitespaces clipboard></markdown>\n  </ng-template>\n\n  <ng-template #usingmarkdown >\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---          \n    </markdown>\n    <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n      <pre class=\"mermaid\">\n        flowchart TD\n          id1([Markdown used in]) --> id2([In html])\n          id1([Markdown used in]) --> id3([In template])\n          id1([Markdown used in]) --> id4([In Component])\n          id1([Markdown used in]) --> id5([Load from src])\n          id1([Markdown used in]) --> id6([Load from .md file])\n      </pre>\n    </markdown>\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---\n      ## Markdown __works__!          \n    </markdown>      \n    <markdown  [src]=\"'../../assets/angularmarkdown.md'\" ngPreserveWhitespaces clipboard \n    commandLine\n      [prompt]=\"'PS C:\\Manoj>'\"\n      [filterOutput]=\"'(out)'\">\n      ></markdown>\n  </ng-template>\n  <ng-template #usingngxs >\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---          \n    </markdown>\n    <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n      <pre class=\"mermaid\">\n        flowchart TD\n          id1([1. Ngxs setup]) --> id2([2. Create HTML Task component ])\n          id2([2. Create HTML Task component ]) --> id3([3. Define Task Component Array and States ])\n          id3([3. Define Task Component Array and States ]) --> id4([4. Display logic for Task States from Store])\n          id4([4. Display logic for Task States from Store]) --> id5([5. Load All Task States from Store])\n          id5([5. Load All Task States from Store]) --> id6([6. Logic for Error State and normal state])\n          id6([6. Logic for Error State and normal state]) --> id7([7. Update Error State from Store])\n      </pre>\n    </markdown>\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---\n      ## NgXs __works__!          \n    </markdown>      \n    <div fxLayoutAlign=\"center center\">\n\n    <markdown mermaid [src]=\"'../../assets/angularngxs.md'\" ngPreserveWhitespaces clipboard ></markdown>   \n          </div>\n  </ng-template>\n  <ng-container \n    [ngTemplateOutlet]=\"tems\"\n    [ngTemplateOutletContext]=\"myContext\"> \n  </ng-container>\n  `,\n  styles: [`\n  \n  .footer {\n        margin: 32px 0 8px;\n  \n        &-text {\n          display: block;\n          font-size: 13px;\n          padding-top: 4px;\n        }\n      }\n  \n      .mat-fab,\n      .mat-mini-fab {\n        img {\n          margin-bottom: 2px;\n        }\n      }\n  \n      .sticky {\n        position: sticky;\n        top: 80px;\n      }\n  \n      .scrollup-button {\n        margin:14px;\n  \n        &--fixed {\n          position: fixed;\n          bottom: 16px;\n          right: 16px;\n        }\n      }  \n  `]\n})\nexport class StackblitzTitleComponent implements OnInit, AfterContentInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  \n  something = `\n  @ViewChild('mermaidCenter', { static: true })\n  mermaidCenter!: TemplateRef<any>;`;\n\n  @ViewChild('mermaidCenter', { static: true })\n  mermaidCenter!: TemplateRef<any>;\n\n  @ViewChild('usingmermaid', { static: true })\n  usingmermaid!: TemplateRef<any>;\n\n  @ViewChild('usingmarkdown', { static: true })\n  usingmarkdown!: TemplateRef<any>;\n\n  @ViewChild('pagedesign', { static: true })\n  pagedesign!: TemplateRef<any>;\n\n  @ViewChild('storybookdesign', { static: true })\n  storybookdesign!: TemplateRef<any>;\n\n  @ViewChild('angularsetup', { static: true })\n  angularsetup!: TemplateRef<any>;\n\n  @ViewChild('angularComp', { static: true })\n  angularComp!: TemplateRef<any>;\n\n  @ViewChild('usingngxs', { static: true })\n  usingngxs!: TemplateRef<any>;\n\n  \n  tems: TemplateRef<any> = this.mermaidCenter;\n  myContext = { $implicit: 'World', localSk: 'Svet' };\n\n\n  @Input()\n  myselectedtemp: string = 'first';\n\n  storydesign=`\n  \\`\\`\\`typescript\n  props: {\n  myselectedtemp : 'usingmarkdown'\n  },\n  \\`\\`\\`\n  `;\n\n  usingmarkdownMarkdown = `\n`;\n\n  usingmermaidMarkdown = `   \n  `;\n\n  pagedesignvar=`\n\n  `;\n\n  ngAfterContentInit() {\n\n    switch (this.myselectedtemp) {\n      case 'mermaidCenter':\n        this.tems = this.mermaidCenter;\n        break;\n\n      case 'usingmermaid':\n        this.tems = this.usingmermaid;\n        break;\n\n      case 'usingmarkdown':\n        this.tems = this.usingmarkdown;\n        break;\n      case 'pagedesign':\n        this.tems = this.pagedesign;\n        console.log('reached');\n        break;\n      case 'storybookdesign':\n        this.tems = this.storybookdesign;\n        break;\n      case 'angularsetup':\n        this.tems = this.angularsetup;\n        break;\n      case 'angularComp':\n        this.tems = this.angularComp;\n        break;\n      case 'usingngxs':\n        this.tems = this.usingngxs;\n        break;\n        \n\n    }\n  }\n\n}\n\n@Component({\n  selector: 'app-stackblitz-runangular',\n  templateUrl: './stackblitz.component.html',\n  styleUrls: ['./stackblitz.component.scss']\n})\nexport class StackblitzRunAngularComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n}\n\n@Component({\n  selector: 'app-stackblitz-storybook',\n  templateUrl: './stackblitz.component.html',\n  styleUrls: ['./stackblitz.component.scss']\n})\nexport class StackblitzStorybookComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n}\n\n@Component({\n  selector: 'app-stackblitz-updatePR',\n  templateUrl: './stackblitz.component.html',\n  styleUrls: ['./stackblitz.component.scss']\n})\nexport class StackblitzUpdatePRComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n}\n\n\n@Component({\n  selector: 'app-stackblitz-startpage',\n  template: `\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\n  <div fxLayout=\"row\" fxLayoutAlign=\"center\" fxLayoutGap=\"10vw\">\n    <mat-slider fxFlex=\"10vw\" min=\"1\" max=\"100\" step=\"1\" value=\"50\"></mat-slider>\n    <mat-slider fxFlex=\"10vw\" min=\"1\" max=\"100\" step=\"1\" value=\"50\"></mat-slider>\n  </div>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\n\n<h1>TaskOhers</h1>\n<!--markdown class=\"variable-binding\" [data]=\"markdowncode\"></markdown-->\n\n\n<div [innerHTML]=\"markdowncode | language : 'python' | markdown\"><div>\n\n<markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\n[lineOffset]=\"5\" [src]=\"'../../assets/stackblitzTypescript.md'\"></markdown>\n\n<div class=\"markdown\">\n  <markdown mermaid [src]=\"'../assets/myfile.md'\"></markdown>\n</div>\n\n<markdown mermaid >\n  <pre class=\"mermaid\">\n  sequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n</pre>\n</markdown>\n  `,\n  styles: [`\n  \n  `]\n})\nexport class StackblitzStartPageComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `\\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  <h5>\n    angular@{{ angularVersion }} | ngx-markdown@{{ ngxMarkdownVersion }}\n  </h5>\n  <br>\n  \n  <div markdown ngPreserveWhitespaces>{{ markdown }}</div>\n  <!-- <div markdown [data]=\"markdown\"></div> -->\n  \\`\\`\\`\n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n    - Unordered list\n    - Another unordered bullet point\n  \n  ### Blockquote\n  > Blockquote to the max!!!`;\n\n}\n\n\n@Component({\n  selector: 'app-stackblitz-testpage',\n  template: `\n<!--markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\n[lineOffset]=\"5\" [src]=\"'../../assets/stackblitzTypescript.md'\"></markdown-->\n\n\n\n<div markdown ngPreserveWhitespaces>{{ markdowncode }}</div>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\nDown here\n<ng-template #greet let-person><span>Hello {{person}} </span></ng-template>\n<ng-template #eng let-name><span>Hello {{name}}!</span></ng-template>\n<ng-template #svk let-person=\"localSk\" ><span>Ahoj {{person}}!</span></ng-template>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\n<ng-container \n  [ngTemplateOutlet]=\"tems\"\n  [ngTemplateOutletContext]=\"myContext\"> </ng-container>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\nHere\n  `,\n  styles: [`\n  \n  `]\n})\nexport class StackblitzStartTestComponent implements OnInit, AfterContentInit {\n\n  constructor() { }\n\n  @ViewChild('greet', { static: true })\n  greet!: TemplateRef<any>;\n  @ViewChild('svk', { static: true })\n  svk!: TemplateRef<any>;\n  @ViewChild('eng', { static: true })\n  eng!: TemplateRef<any>;\n\n  tems: TemplateRef<any> = this.greet;\n  myContext = { $implicit: 'World', localSk: 'Svet' };\n\n\n  @Input()\n  myselectedtemp: string = 'first';\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`powershell\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n  ngOnInit(): void { }\n  ngAfterContentInit() {\n\n    switch (this.myselectedtemp) {\n      case 'greet':\n        this.tems = this.greet;\n        break;\n      case 'svk':\n        this.tems = this.svk;\n        break;\n      case 'eng':\n        this.tems = this.eng;\n        break;\n    }\n  }\n\n}\n\n\n@Component({\n  selector: 'app-stackblitz-mermaidinline',\n  template: `\n\n<markdown mermaid >\n  <pre class=\"mermaid\">\n  sequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n</pre>\n</markdown>\n  `,\n  styles: [`\n  \n  `]\n})\nexport class StackblitzMermaidInlineComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n  \n  .footer {\n        margin: 32px 0 8px;\n  \n        &-text {\n          display: block;\n          font-size: 13px;\n          padding-top: 4px;\n        }\n      }\n  \n      .mat-fab,\n      .mat-mini-fab {\n        img {\n          margin-bottom: 2px;\n        }\n      }\n  \n      .sticky {\n        position: sticky;\n        top: 80px;\n      }\n  \n      .scrollup-button {\n        margin:14px;\n  \n        &--fixed {\n          position: fixed;\n          bottom: 16px;\n          right: 16px;\n        }\n      }  \n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 267
            },
            "implements": [
                "OnInit",
                "AfterContentInit"
            ]
        },
        {
            "name": "StackblitzUpdatePRComponent",
            "id": "component-StackblitzUpdatePRComponent-57def78b975da74300e2338d13f49df0fa8e00dba4def79e16e3f296486357e5ba55ed20a4363cc7faf2658abf80067f61f8af061a51cdcf55d26091b06a4e65",
            "file": "src/app/youtube/2022sept02/stackblitz.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-stackblitz-updatePR",
            "styleUrls": [
                "./stackblitz.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./stackblitz.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bufferValue",
                    "defaultValue": "60",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n",
                    "description": "<p>ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode</p>\n",
                    "line": 489,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Color - primary (Theme color) | accent | warn\n",
                    "description": "<p>ProgressBar Color - primary (Theme color) | accent | warn</p>\n",
                    "line": 495,
                    "type": "ThemePalette",
                    "decorators": []
                },
                {
                    "name": "markdowncode",
                    "defaultValue": "`## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 498,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'indeterminate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 477,
                    "type": "ProgressBarMode",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "40",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n",
                    "description": "<p>ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes</p>\n",
                    "line": 483,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 475,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, AfterContentInit, ViewChild, TemplateRef, } from '@angular/core';\nimport { ThemePalette } from '@angular/material/core';\nimport { ProgressBarMode } from '@angular/material/progress-bar';\n@Component({\n  selector: 'app-stackblitz',\n  templateUrl: './stackblitz.component.html',\n  styleUrls: ['./stackblitz.component.scss']\n})\nexport class StackblitzComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n}\n\n@Component({\n  selector: 'app-stackblitz-title',\n  template: `\n\n<ng-template #pagedesign>\n<markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n        <pre class=\"mermaid\">\n          flowchart TD\n          id1([1.Setup Windows Env]) -->  id2([2.Run Local Hello World Angular])\n\n          id2([2.Run Local Hello World Angular]) -->  id3([3.Add Shared Module])\n\n          id3([3.Add Shared Module])  --> id4([4.Add Material Design])\n      \n          id4([4.Add Material Design]) -->  id5([5.Add FlexLayout])\n\n          id5([5.Add FlexLayout]) -->  id6([6.Add Lazy Loaded Module/ Service])\n\n          id6([6.Add Lazy Loaded Module/ Service]) -->  id7([7.Add Reactive Forms])\n        </pre>\n      </markdown>\n</ng-template>\n    <ng-template #angularComp>\n      <markdown  ngPreserveWhitespaces clipboard>\n        ---\n      </markdown>\n      <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n        <pre class=\"mermaid\">\n          flowchart TD\n          id1([1.Setup Windows Env]) -->  id2([2.Run Local Hello World Angular])\n\n          id2([2.Run Local Hello World Angular]) -->  id3([3.Add Shared Module])\n\n          id3([3.Add Shared Module])  --> id4([4.Add Material Design])\n      \n          id4([4.Add Material Design]) -->  id5([5.Add FlexLayout])\n\n          id5([5.Add FlexLayout]) -->  id6([6.Add Lazy Loaded Module/ Service])\n\n          id6([6.Add Lazy Loaded Module/ Service]) -->  id7([7.Add Reactive Forms])\n        </pre>\n      </markdown>\n      <markdown  [src]=\"'../../assets/angularcomp.md'\" ngPreserveWhitespaces clipboard\n      commandLine\n      [prompt]=\"'PS C:\\Manoj>'\"\n      [filterOutput]=\"'(out)'\">\n    </markdown>\n    </ng-template>\n    <ng-template #storybookdesign >\n      <markdown  ngPreserveWhitespaces clipboard>\n            ---\n      </markdown>\n      <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n        <pre class=\"mermaid\">\n          flowchart TD\n          id1([Create a MDX file]) -->  id2([Give the correct component])\n\n          id2([Give the correct component]) -->  id3([Prepare the Meta data])\n\n          id3([Prepare the Meta data]) -->  id4([Create a Story from the component])\n\n          id4([Create a Story from the component]) -->  id5([Change the Order of the displayed stories])\n        </pre>\n      </markdown>\n      <markdown mermaid [src]=\"'../../assets/storydesign.md'\" ngPreserveWhitespaces clipboard ></markdown>\n  </ng-template>\n\n  <ng-template #angularsetup >\n    <markdown  ngPreserveWhitespaces clipboard>\n        ---\n    </markdown>\n    <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n      <pre class=\"mermaid\">\n        flowchart TD\n          id4([1.Prepare Git Environment]) -->  id5([2.Add repo and push in github])\n          id5([2.Add repo and push in github]) -->  id6([3.Host static pages in gh-pages])\n          id6([3.Host static pages in gh-pages]) -->  id7([4.Prepare Stackblitz Environment])\n          id7([4.Prepare Stackblitz Environment]) -->  id8([5.Prepare for Storybook branch])\n          id8([5.Prepare for Storybook branch]) -->  id9([6.Run in stackblitz Environment])\n      </pre>\n    </markdown>\n    <markdown  [src]=\"'../../assets/angularsetup.md'\" ngPreserveWhitespaces clipboard\n      commandLine\n      [prompt]=\"'PS C:\\Manoj>'\"\n      [filterOutput]=\"'(out)'\">\n    </markdown>\n  </ng-template>\n\n  <ng-template #mermaidCenter >\n    <markdown  ngPreserveWhitespaces clipboard>\n        ---\n    </markdown>\n    <div class=\"markdown\" fxLayoutAlign=\"center center\">\n      <markdown mermaid [src]=\"'../../assets/stackblitzTitle.md'\"></markdown>\n    </div>\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---\n  </markdown>\n    <div class=\"footer\">\n      <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\n        Crafted with :heart: by **gmanojisaac** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/gmanoj.isaac)\n      </markdown>\n    </div>\n    <markdown mermaid [src]=\"'../../assets/angularfirstpage.md'\"  ngPreserveWhitespaces clipboard></markdown>\n  </ng-template>\n\n  <ng-template #usingmermaid >\n    <markdown  ngPreserveWhitespaces clipboard>\n    ---          \n    </markdown>\n    <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n      <pre class=\"mermaid\">\n        flowchart TD\n        id1([Mermaid works]) --> id2([In html])\n        id1([Mermaid works]) --> id3([From src])\n      </pre>\n    </markdown>\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---\n      ## Mermaid __works__! \n    </markdown>\n    <markdown mermaid [src]=\"'../../assets/angularmermaid.md'\"  ngPreserveWhitespaces clipboard></markdown>\n  </ng-template>\n\n  <ng-template #usingmarkdown >\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---          \n    </markdown>\n    <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n      <pre class=\"mermaid\">\n        flowchart TD\n          id1([Markdown used in]) --> id2([In html])\n          id1([Markdown used in]) --> id3([In template])\n          id1([Markdown used in]) --> id4([In Component])\n          id1([Markdown used in]) --> id5([Load from src])\n          id1([Markdown used in]) --> id6([Load from .md file])\n      </pre>\n    </markdown>\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---\n      ## Markdown __works__!          \n    </markdown>      \n    <markdown  [src]=\"'../../assets/angularmarkdown.md'\" ngPreserveWhitespaces clipboard \n    commandLine\n      [prompt]=\"'PS C:\\Manoj>'\"\n      [filterOutput]=\"'(out)'\">\n      ></markdown>\n  </ng-template>\n  <ng-template #usingngxs >\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---          \n    </markdown>\n    <markdown mermaid  ngPreserveWhitespaces clipboard fxLayoutAlign=\"center center\">\n      <pre class=\"mermaid\">\n        flowchart TD\n          id1([1. Ngxs setup]) --> id2([2. Create HTML Task component ])\n          id2([2. Create HTML Task component ]) --> id3([3. Define Task Component Array and States ])\n          id3([3. Define Task Component Array and States ]) --> id4([4. Display logic for Task States from Store])\n          id4([4. Display logic for Task States from Store]) --> id5([5. Load All Task States from Store])\n          id5([5. Load All Task States from Store]) --> id6([6. Logic for Error State and normal state])\n          id6([6. Logic for Error State and normal state]) --> id7([7. Update Error State from Store])\n      </pre>\n    </markdown>\n    <markdown  ngPreserveWhitespaces clipboard>\n      ---\n      ## NgXs __works__!          \n    </markdown>      \n    <div fxLayoutAlign=\"center center\">\n\n    <markdown mermaid [src]=\"'../../assets/angularngxs.md'\" ngPreserveWhitespaces clipboard ></markdown>   \n          </div>\n  </ng-template>\n  <ng-container \n    [ngTemplateOutlet]=\"tems\"\n    [ngTemplateOutletContext]=\"myContext\"> \n  </ng-container>\n  `,\n  styles: [`\n  \n  .footer {\n        margin: 32px 0 8px;\n  \n        &-text {\n          display: block;\n          font-size: 13px;\n          padding-top: 4px;\n        }\n      }\n  \n      .mat-fab,\n      .mat-mini-fab {\n        img {\n          margin-bottom: 2px;\n        }\n      }\n  \n      .sticky {\n        position: sticky;\n        top: 80px;\n      }\n  \n      .scrollup-button {\n        margin:14px;\n  \n        &--fixed {\n          position: fixed;\n          bottom: 16px;\n          right: 16px;\n        }\n      }  \n  `]\n})\nexport class StackblitzTitleComponent implements OnInit, AfterContentInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  \n  something = `\n  @ViewChild('mermaidCenter', { static: true })\n  mermaidCenter!: TemplateRef<any>;`;\n\n  @ViewChild('mermaidCenter', { static: true })\n  mermaidCenter!: TemplateRef<any>;\n\n  @ViewChild('usingmermaid', { static: true })\n  usingmermaid!: TemplateRef<any>;\n\n  @ViewChild('usingmarkdown', { static: true })\n  usingmarkdown!: TemplateRef<any>;\n\n  @ViewChild('pagedesign', { static: true })\n  pagedesign!: TemplateRef<any>;\n\n  @ViewChild('storybookdesign', { static: true })\n  storybookdesign!: TemplateRef<any>;\n\n  @ViewChild('angularsetup', { static: true })\n  angularsetup!: TemplateRef<any>;\n\n  @ViewChild('angularComp', { static: true })\n  angularComp!: TemplateRef<any>;\n\n  @ViewChild('usingngxs', { static: true })\n  usingngxs!: TemplateRef<any>;\n\n  \n  tems: TemplateRef<any> = this.mermaidCenter;\n  myContext = { $implicit: 'World', localSk: 'Svet' };\n\n\n  @Input()\n  myselectedtemp: string = 'first';\n\n  storydesign=`\n  \\`\\`\\`typescript\n  props: {\n  myselectedtemp : 'usingmarkdown'\n  },\n  \\`\\`\\`\n  `;\n\n  usingmarkdownMarkdown = `\n`;\n\n  usingmermaidMarkdown = `   \n  `;\n\n  pagedesignvar=`\n\n  `;\n\n  ngAfterContentInit() {\n\n    switch (this.myselectedtemp) {\n      case 'mermaidCenter':\n        this.tems = this.mermaidCenter;\n        break;\n\n      case 'usingmermaid':\n        this.tems = this.usingmermaid;\n        break;\n\n      case 'usingmarkdown':\n        this.tems = this.usingmarkdown;\n        break;\n      case 'pagedesign':\n        this.tems = this.pagedesign;\n        console.log('reached');\n        break;\n      case 'storybookdesign':\n        this.tems = this.storybookdesign;\n        break;\n      case 'angularsetup':\n        this.tems = this.angularsetup;\n        break;\n      case 'angularComp':\n        this.tems = this.angularComp;\n        break;\n      case 'usingngxs':\n        this.tems = this.usingngxs;\n        break;\n        \n\n    }\n  }\n\n}\n\n@Component({\n  selector: 'app-stackblitz-runangular',\n  templateUrl: './stackblitz.component.html',\n  styleUrls: ['./stackblitz.component.scss']\n})\nexport class StackblitzRunAngularComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n}\n\n@Component({\n  selector: 'app-stackblitz-storybook',\n  templateUrl: './stackblitz.component.html',\n  styleUrls: ['./stackblitz.component.scss']\n})\nexport class StackblitzStorybookComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n}\n\n@Component({\n  selector: 'app-stackblitz-updatePR',\n  templateUrl: './stackblitz.component.html',\n  styleUrls: ['./stackblitz.component.scss']\n})\nexport class StackblitzUpdatePRComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n}\n\n\n@Component({\n  selector: 'app-stackblitz-startpage',\n  template: `\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\n  <div fxLayout=\"row\" fxLayoutAlign=\"center\" fxLayoutGap=\"10vw\">\n    <mat-slider fxFlex=\"10vw\" min=\"1\" max=\"100\" step=\"1\" value=\"50\"></mat-slider>\n    <mat-slider fxFlex=\"10vw\" min=\"1\" max=\"100\" step=\"1\" value=\"50\"></mat-slider>\n  </div>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\n\n<h1>TaskOhers</h1>\n<!--markdown class=\"variable-binding\" [data]=\"markdowncode\"></markdown-->\n\n\n<div [innerHTML]=\"markdowncode | language : 'python' | markdown\"><div>\n\n<markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\n[lineOffset]=\"5\" [src]=\"'../../assets/stackblitzTypescript.md'\"></markdown>\n\n<div class=\"markdown\">\n  <markdown mermaid [src]=\"'../assets/myfile.md'\"></markdown>\n</div>\n\n<markdown mermaid >\n  <pre class=\"mermaid\">\n  sequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n</pre>\n</markdown>\n  `,\n  styles: [`\n  \n  `]\n})\nexport class StackblitzStartPageComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `\\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  <h5>\n    angular@{{ angularVersion }} | ngx-markdown@{{ ngxMarkdownVersion }}\n  </h5>\n  <br>\n  \n  <div markdown ngPreserveWhitespaces>{{ markdown }}</div>\n  <!-- <div markdown [data]=\"markdown\"></div> -->\n  \\`\\`\\`\n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n    - Unordered list\n    - Another unordered bullet point\n  \n  ### Blockquote\n  > Blockquote to the max!!!`;\n\n}\n\n\n@Component({\n  selector: 'app-stackblitz-testpage',\n  template: `\n<!--markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\n[lineOffset]=\"5\" [src]=\"'../../assets/stackblitzTypescript.md'\"></markdown-->\n\n\n\n<div markdown ngPreserveWhitespaces>{{ markdowncode }}</div>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\nDown here\n<ng-template #greet let-person><span>Hello {{person}} </span></ng-template>\n<ng-template #eng let-name><span>Hello {{name}}!</span></ng-template>\n<ng-template #svk let-person=\"localSk\" ><span>Ahoj {{person}}!</span></ng-template>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\n<ng-container \n  [ngTemplateOutlet]=\"tems\"\n  [ngTemplateOutletContext]=\"myContext\"> </ng-container>\n<mat-progress-bar mode=\"buffer\"></mat-progress-bar>\nHere\n  `,\n  styles: [`\n  \n  `]\n})\nexport class StackblitzStartTestComponent implements OnInit, AfterContentInit {\n\n  constructor() { }\n\n  @ViewChild('greet', { static: true })\n  greet!: TemplateRef<any>;\n  @ViewChild('svk', { static: true })\n  svk!: TemplateRef<any>;\n  @ViewChild('eng', { static: true })\n  eng!: TemplateRef<any>;\n\n  tems: TemplateRef<any> = this.greet;\n  myContext = { $implicit: 'World', localSk: 'Svet' };\n\n\n  @Input()\n  myselectedtemp: string = 'first';\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`powershell\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n  ngOnInit(): void { }\n  ngAfterContentInit() {\n\n    switch (this.myselectedtemp) {\n      case 'greet':\n        this.tems = this.greet;\n        break;\n      case 'svk':\n        this.tems = this.svk;\n        break;\n      case 'eng':\n        this.tems = this.eng;\n        break;\n    }\n  }\n\n}\n\n\n@Component({\n  selector: 'app-stackblitz-mermaidinline',\n  template: `\n\n<markdown mermaid >\n  <pre class=\"mermaid\">\n  sequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n</pre>\n</markdown>\n  `,\n  styles: [`\n  \n  `]\n})\nexport class StackblitzMermaidInlineComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void { }\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n    .footer {\n        margin: 32px 0 8px;\n  \n        &-text {\n          display: block;\n          font-size: 13px;\n          padding-top: 4px;\n        }\n      }\n  \n      .mat-fab,\n      .mat-mini-fab {\n        img {\n          margin-bottom: 2px;\n        }\n      }\n  \n      .sticky {\n        position: sticky;\n        top: 80px;\n      }\n  \n      .scrollup-button {\n        margin:14px;\n  \n        &--fixed {\n          position: fixed;\n          bottom: 16px;\n          right: 16px;\n        }\n      }  ",
                    "styleUrl": "./stackblitz.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 471
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"markdown\" fxFlexOffset=\"25vw\" fxLayout=\"row\">\n    <markdown mermaid [src]=\"'../../assets/stackblitzMermaid.md'\"></markdown>\n </div>\n"
        },
        {
            "name": "StartScreenComponent",
            "id": "component-StartScreenComponent-455129c4cb751174f906e298d9f0f3b545f5a98ce75841ab6bb9c241053e5a5cfb1714cb9ec055385193f282e50ceb12b4358d48c1103158f3e2e215ddeb9516",
            "file": "src/app/progress-bar/progress-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-startscreen",
            "styleUrls": [],
            "styles": [
                "\n    .footer {\n      margin: 32px 0 8px;\n\n      &-text {\n        display: block;\n        font-size: 13px;\n        padding-top: 4px;\n      }\n    }\n\n    .mat-fab,\n    .mat-mini-fab {\n      img {\n        margin-bottom: 2px;\n      }\n    }\n\n    .sticky {\n      position: sticky;\n      top: 80px;\n    }\n\n    .scrollup-button {\n      margin:14px;\n\n      &--fixed {\n        position: fixed;\n        bottom: 16px;\n        right: 16px;\n      }\n    }    \n    "
            ],
            "template": "  <mat-progress-bar\n      [mode]=\"mode\"\n      [value]=\"value\"\n      [bufferValue]=\"bufferValue\"\n      [color]=\"color\">\n  </mat-progress-bar>\n\n<div class=\"markdown\">\n  <markdown mermaid [src]=\"'../../assets/Testing.md'\"></markdown>\n</div>\n\n<div class=\"markdown\">\n    <markdown\n      [src]=\"'../../assets/Introduction.md'\"\n    ></markdown>\n  </div>\n\n<div class=\"footer\">\n  <mat-divider></mat-divider>\n  <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\n    Crafted with :heart: by **jfcere** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/jfcere)\n  </markdown>\n</div>\n\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bufferValue",
                    "defaultValue": "60",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n",
                    "description": "<p>ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode</p>\n",
                    "line": 519,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Color - primary (Theme color) | accent | warn\n",
                    "description": "<p>ProgressBar Color - primary (Theme color) | accent | warn</p>\n",
                    "line": 525,
                    "type": "ThemePalette",
                    "decorators": []
                },
                {
                    "name": "markdowncode",
                    "defaultValue": "`## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 528,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'indeterminate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 507,
                    "type": "ProgressBarMode",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "40",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n",
                    "description": "<p>ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes</p>\n",
                    "line": 513,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 505,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { ThemePalette } from '@angular/material/core';\nimport { ProgressBarMode } from '@angular/material/progress-bar';\n\n@Component({\n  selector: 'app-progress-bar',\n  templateUrl: './progress-bar.component.html',\n  styleUrls: ['./progress-bar.component.scss'],\n})\nexport class ProgressBarComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  /**\n   * ProgressBar mode - determinate | indeterminate | Buffer | Query\n   */\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-aboutme-Introduction',\n  template: `\n\n      \n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n\n    <div class=\"markdown\">\n      <markdown\n        class=\"variable-binding\"\n        [src]=\"'../../assets/Introduction.md'\"\n      ></markdown>\n    </div>\n  `,\n})\nexport class AboutmeIntroductionComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-aboutme-Lecturer',\n  template: `\n\n      \n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n    <div class=\"markdown\">\n    <markdown mermaid [src]=\"'../../assets/Lecturer.md'\"></markdown>\n  </div>\n\n  `,\n})\nexport class AboutmeLecturerComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-aboutme-Telecom',\n  template: `\n\n      \n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n\n    <div class=\"markdown\">\n    <markdown mermaid [src]=\"'../../assets/Telecom.md'\"></markdown>\n  </div>\n\n  `,\n})\nexport class AboutmeTelecomComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-aboutme-Development',\n  template: `\n\n      \n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n\n    <div class=\"markdown\">\n      <markdown\n        class=\"variable-binding\"\n        [src]=\"'../../assets/Development.md'\"\n      ></markdown>\n    </div>\n\n  `,\n})\nexport class AboutmeDevelopmentComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-aboutme-Testing',\n  template: `\n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n  <div class=\"markdown\">\n    <markdown mermaid [src]=\"'../../assets/Testing.md'\"></markdown>\n  </div>\n\n  <markdown ngPreserveWhitespaces lineNumbers lineHighlight  [line]=\"'6, 10-16'\"\n  [lineOffset]=\"5\">\n    \\`\\`\\`typescript\n    export function greetings(name: string): string &#123;\n      return 'Hello ' + name;\n    }\n    \\`\\`\\`\n  </markdown>\n\n\n  <markdown ngPreserveWhitespaces clipboard \n    commandLine\n    [prompt]=\"'PS C:\\Users\\Chris>'\"\n    [filterOutput]=\"'(out)'\">\n    \\`\\`\\` powershell\n    Get-Date\n    (out)\n    (ut)Sunday, November 7, 2021 8:19:21 PM\n    (out)\n    \\`\\`\\`\n  </markdown>\n\n  <div class=\"footer\">\n    <mat-divider></mat-divider>\n    <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\n      Crafted with :heart: by **jfcere** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/jfcere)\n    </markdown>\n  </div>\n\n  `,\n  styles: [\n    `\n    .footer {\n      margin: 32px 0 8px;\n\n      &-text {\n        display: block;\n        font-size: 13px;\n        padding-top: 4px;\n      }\n    }\n\n    .mat-fab,\n    .mat-mini-fab {\n      img {\n        margin-bottom: 2px;\n      }\n    }\n\n    .sticky {\n      position: sticky;\n      top: 80px;\n    }\n\n    .scrollup-button {\n      margin:14px;\n\n      &--fixed {\n        position: fixed;\n        bottom: 16px;\n        right: 16px;\n      }\n    }    \n    `,\n  ],\n})\nexport class AboutmeTestingComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}\n\n@Component({\n  selector: 'app-startscreen',\n  template: `\n    <mat-progress-bar \n        [mode]=\"mode\"\n        [value]=\"value\"\n        [bufferValue]=\"bufferValue\"\n        [color]=\"color\">\n    </mat-progress-bar>\n\n  <div class=\"markdown\">\n    <markdown mermaid [src]=\"'../../assets/Testing.md'\"></markdown>\n  </div>\n\n  <div class=\"markdown\">\n      <markdown\n        [src]=\"'../../assets/Introduction.md'\"\n      ></markdown>\n    </div>\n\n  <div class=\"footer\">\n    <mat-divider></mat-divider>\n    <markdown emoji class=\"footer-text\" fxLayout=\"row\" fxLayoutAlign.gt-xs=\"center\">\n      Crafted with :heart: by **jfcere** <span style=\"margin:0 .15em;\">•</span> Follow on [GitHub](https://github.com/jfcere)\n    </markdown>\n  </div>\n\n  `,\n  styles: [\n    `\n    .footer {\n      margin: 32px 0 8px;\n\n      &-text {\n        display: block;\n        font-size: 13px;\n        padding-top: 4px;\n      }\n    }\n\n    .mat-fab,\n    .mat-mini-fab {\n      img {\n        margin-bottom: 2px;\n      }\n    }\n\n    .sticky {\n      position: sticky;\n      top: 80px;\n    }\n\n    .scrollup-button {\n      margin:14px;\n\n      &--fixed {\n        position: fixed;\n        bottom: 16px;\n        right: 16px;\n      }\n    }    \n    `,\n  ],\n})\nexport class StartScreenComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Input()\n  mode: ProgressBarMode = 'indeterminate';\n\n  /**\n   * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n   */\n  @Input()\n  value: number = 40;\n\n  /**\n   * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n   */\n  @Input()\n  bufferValue: number = 60;\n\n  /**\n   * ProgressBar Color - primary (Theme color) | accent | warn\n   */\n  @Input()\n  color: ThemePalette = 'primary';\n\n  @Input()\n  markdowncode: string = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .footer {\n      margin: 32px 0 8px;\n\n      &-text {\n        display: block;\n        font-size: 13px;\n        padding-top: 4px;\n      }\n    }\n\n    .mat-fab,\n    .mat-mini-fab {\n      img {\n        margin-bottom: 2px;\n      }\n    }\n\n    .sticky {\n      position: sticky;\n      top: 80px;\n    }\n\n    .scrollup-button {\n      margin:14px;\n\n      &--fixed {\n        position: fixed;\n        bottom: 16px;\n        right: 16px;\n      }\n    }    \n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 502
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "TaskCheckComponent",
            "id": "component-TaskCheckComponent-7f9c98b382e369d949b869d43150c7e0c00a1b5c76adc6889fedc30fd16a4b41728f2dacdaa25f6c3f5cb07db2f83367c2a47edb4d79c85872d5589168405715",
            "file": "src/app/components/checkComponent.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-check-task",
            "styleUrls": [],
            "styles": [],
            "template": "   <h1>\n    love\n</h1>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component} from '@angular/core';\n\n\n@Component({\n  selector: 'app-check-task',\n  template: `\n   <h1>\n    love\n</h1>\n  `\n})\nexport class TaskCheckComponent {\n  \n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "TaskComponent",
            "id": "component-TaskComponent-25967bfb0d48f885360f04ee8d46d40dafdcb914c0f449e01d35168223efb5bebd6bb649da5c2b85b0c6c5cfe8373ac88c17a213a04773a4403d6fcb7a34b375",
            "file": "src/app/components/task.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"list-item {{ task.state }}\">\n  <label\n    [attr.aria-label]=\"'archiveTask-' + task.id\"\n    for=\"checked-{{ task.id }}\"\n    class=\"checkbox\"\n  >\n    <input\n      type=\"checkbox\"\n      disabled=\"true\"\n      [defaultChecked]=\"task.state === 'TASK_ARCHIVED'\"\n      name=\"checked-{{ task.id }}\"\n      id=\"checked-{{ task.id }}\"\n    />\n    <span class=\"checkbox-custom\" (click)=\"onArchive(task.id)\"></span>\n  </label>\n  <label\n    [attr.aria-label]=\"task.title + ''\"\n    for=\"title-{{ task.id }}\"\n    class=\"title\"\n  >\n    <input\n      type=\"text\"\n      [value]=\"task.title\"\n      readonly=\"true\"\n      id=\"title-{{ task.id }}\"\n      name=\"title-{{ task.id }}\"\n      style=\"text-overflow: ellipsis;\"\n    />\n  </label>\n  <button\n    *ngIf=\"task?.state !== 'TASK_ARCHIVED'\"\n    class=\"pin-button\"\n    [attr.aria-label]=\"'pinTask-' + task.id\"\n    (click)=\"onPin(task.id)\"\n  >\n    <span class=\"icon-star\"></span>\n  </button>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "task",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "Task",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onArchiveTask",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "EventEmitter"
                },
                {
                    "name": "onPinTask",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onArchive",
                    "args": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nComponent method to trigger the onArchive event\n",
                    "description": "<p>Component method to trigger the onArchive event</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1746,
                                "end": 1748,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1740,
                                "end": 1745,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>string</p>\n"
                        }
                    ]
                },
                {
                    "name": "onPin",
                    "args": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nComponent method to trigger the onPin event\n",
                    "description": "<p>Component method to trigger the onPin event</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1607,
                                "end": 1609,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1601,
                                "end": 1606,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>string</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\nimport { Task } from '../models/task.model';\n\n@Component({\n  selector: 'app-task',\n  template: `\n    <div class=\"list-item {{ task.state }}\">\n      <label\n        [attr.aria-label]=\"'archiveTask-' + task.id\"\n        for=\"checked-{{ task.id }}\"\n        class=\"checkbox\"\n      >\n        <input\n          type=\"checkbox\"\n          disabled=\"true\"\n          [defaultChecked]=\"task.state === 'TASK_ARCHIVED'\"\n          name=\"checked-{{ task.id }}\"\n          id=\"checked-{{ task.id }}\"\n        />\n        <span class=\"checkbox-custom\" (click)=\"onArchive(task.id)\"></span>\n      </label>\n      <label\n        [attr.aria-label]=\"task.title + ''\"\n        for=\"title-{{ task.id }}\"\n        class=\"title\"\n      >\n        <input\n          type=\"text\"\n          [value]=\"task.title\"\n          readonly=\"true\"\n          id=\"title-{{ task.id }}\"\n          name=\"title-{{ task.id }}\"\n          style=\"text-overflow: ellipsis;\"\n        />\n      </label>\n      <button\n        *ngIf=\"task?.state !== 'TASK_ARCHIVED'\"\n        class=\"pin-button\"\n        [attr.aria-label]=\"'pinTask-' + task.id\"\n        (click)=\"onPin(task.id)\"\n      >\n        <span class=\"icon-star\"></span>\n      </button>\n    </div>\n  `\n})\nexport class TaskComponent {\n  @Input()\n  task!: Task;\n\n  // tslint:disable-next-line: no-output-on-prefix\n  @Output()\n  onPinTask = new EventEmitter<Event>();\n\n  // tslint:disable-next-line: no-output-on-prefix\n  @Output()\n  onArchiveTask = new EventEmitter<Event>();\n\n  /**\n   * Component method to trigger the onPin event\n   * @param id string\n   */\n  onPin(id: any) {\n    this.onPinTask.emit(id);\n  }\n  /**\n   * Component method to trigger the onArchive event\n   * @param id string\n   */\n  onArchive(id: any) {\n    this.onArchiveTask.emit(id);\n  }\n\n  \n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "TaskListComponent",
            "id": "component-TaskListComponent-d1a13fb44ac1f38103d38a99ab9bde7226f805b89014d551e3950f6a513bc15a0599c01416c1926f14c43aca7b55508577a16c702a530e7812c8fb4b0a037706",
            "file": "src/app/components/task-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task-list",
            "styleUrls": [],
            "styles": [],
            "template": "<app-pure-task-list\n  [tasks]=\"tasks$ | async\"\n  (onArchiveTask)=\"archiveTask($event)\"\n  (onPinTask)=\"pinTask($event)\"\n></app-pure-task-list>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "tasks$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": true,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "archiveTask",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nComponent method to trigger the archiveTask event\n",
                    "description": "<p>Component method to trigger the archiveTask event</p>\n",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pinTask",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nComponent method to trigger the pinTask event\n",
                    "description": "<p>Component method to trigger the pinTask event</p>\n",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngxs/store';\nimport { ArchiveTask, PinTask } from '../state/task.state';\nimport { Observable } from 'rxjs';\n\n\n@Component({\n  selector: 'app-task-list',\n  template: `\n    <app-pure-task-list\n      [tasks]=\"tasks$ | async\"\n      (onArchiveTask)=\"archiveTask($event)\"\n      (onPinTask)=\"pinTask($event)\"\n    ></app-pure-task-list>  \n  `,\n})\nexport class TaskListComponent{\n  tasks$?: Observable<any>;\n\n  constructor(private store: Store) {\n    this.tasks$ = store.select((state) => {\n      console.log(state.taskbox.tasks);\n      return state.taskbox.tasks;      \n    } );\n    \n  }\n\n  /**\n   * Component method to trigger the archiveTask event\n   */\n  archiveTask(id: string) {\n    this.store.dispatch(new ArchiveTask(id));\n  }\n\n  /**\n   * Component method to trigger the pinTask event\n   */\n  pinTask(id: string) {\n    this.store.dispatch(new PinTask(id));\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "TaskMarkedComponent",
            "id": "component-TaskMarkedComponent-0ed265a61d3f0a575369698e7d8d788c1527a09c643e2674b149a81aa1d3e88a860ecf91791642fa2bafffcf1321da9dfed410e3053250768623613c1cf89578",
            "file": "src/app/components/taskMarked.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task-marked",
            "styleUrls": [],
            "styles": [],
            "template": "   <markdown class=\"variable-binding\" [data]=\"markdowncode\"></markdown>\n<div class=\"markdown\">\n  <markdown mermaid [src]=\"'../../assets/myfile.md'\"></markdown>\n</div>\n<pre class=\"mermaid\">\n  sequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n</pre>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "task",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "Task",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onArchiveTask",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter"
                },
                {
                    "name": "onPinTask",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "markdowncode",
                    "defaultValue": "`## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onArchive",
                    "args": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nComponent method to trigger the onArchive event\n",
                    "description": "<p>Component method to trigger the onArchive event</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1005,
                                "end": 1007,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 999,
                                "end": 1004,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>string</p>\n"
                        }
                    ]
                },
                {
                    "name": "onPin",
                    "args": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nComponent method to trigger the onPin event\n",
                    "description": "<p>Component method to trigger the onPin event</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 866,
                                "end": 868,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 860,
                                "end": 865,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>string</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\nimport { Task } from '../models/task.model';\nimport mermaid from 'mermaid';\n\n@Component({\n  selector: 'app-task-marked',\n  template: `\n   <markdown class=\"variable-binding\" [data]=\"markdowncode\"></markdown>\n<div class=\"markdown\">\n  <markdown mermaid [src]=\"'../../assets/myfile.md'\"></markdown>\n</div>\n<pre class=\"mermaid\">\n  sequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n</pre>\n  `\n})\nexport class TaskMarkedComponent implements OnInit {\n  @Input()\n  task!: Task;\n\n  // tslint:disable-next-line: no-output-on-prefix\n  @Output()\n  onPinTask = new EventEmitter<Event>();\n\n  // tslint:disable-next-line: no-output-on-prefix\n  @Output()\n  onArchiveTask = new EventEmitter<Event>();\n\n  /**\n   * Component method to trigger the onPin event\n   * @param id string\n   */\n  onPin(id: any) {\n    this.onPinTask.emit(id);\n  }\n  /**\n   * Component method to trigger the onArchive event\n   * @param id string\n   */\n  onArchive(id: any) {\n    this.onArchiveTask.emit(id);\n  }\n\n  markdowncode = `## Markdown __rulez__!\n  ---\n  \n  ### Syntax highlight\n  \\`\\`\\`typescript\n  const language = 'typescript';\n  \\`\\`\\`\n  \n  ### Lists\n  1. Ordered list\n  2. Another bullet point\n     - Unordered list\n     - Another unordered bullet\n  \n  ### Blockquote\n  > Blockquote to the max`;\n\n  ngOnInit(): void {\n    mermaid.initialize({\n      startOnLoad: true\n    });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "YoutubeMakingComponent",
            "id": "component-YoutubeMakingComponent-51f89a54b82c32f9bb67df4cccee2bb3d5f7424ac0cea7e521fa3da560a417b6d7b9b93fafd0f723af86b25a15003d7bf086c9b5961466d84fe3e77d03650b10",
            "file": "src/app/youtube-making/youtube-making.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-youtube-making",
            "styleUrls": [
                "./youtube-making.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./youtube-making.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-youtube-making',\n  templateUrl: './youtube-making.component.html',\n  styleUrls: ['./youtube-making.component.scss']\n})\nexport class YoutubeMakingComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./youtube-making.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>youtube-making works!</p>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-147b6069bc9c18c57de3ced2e30d635178a18627195c789d5cb57ecb4a771c9aa038b716d9d5d07aaea38501c5aa4c34763758ff7f81c6d942897a98b3fd8081",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { BrowserModule } from '@angular/platform-browser';\nimport { NgxsModule } from '@ngxs/store';\nimport { NgxsReduxDevtoolsPluginModule } from '@ngxs/devtools-plugin';\nimport { NgxsLoggerPluginModule } from '@ngxs/logger-plugin';\n\nimport { environment } from '../environments/environment';\nimport { AppComponent } from './app.component';\nimport { NgModule } from '@angular/core';\nimport { AppRoutingModule } from './app-routing.module';\nimport { TaskModule } from './components/task.module';\nimport { PureInboxScreenComponent } from './components/pure-inbox-screen.component';\nimport { MarkdownModule, MarkdownService } from 'ngx-markdown';\nimport { HttpClient } from '@angular/common/http';\nimport { HttpClientModule } from '@angular/common/http';\n//import { InboxScreenComponent } from './components/inbox-screen.component';\nimport { TaskCheckComponent } from './components/checkComponent.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {\n  ProgressBarComponent,\n  AboutmeIntroductionComponent,\n  AboutmeLecturerComponent,\n  AboutmeTelecomComponent,\n  AboutmeDevelopmentComponent,\n  AboutmeTestingComponent, StartScreenComponent\n} from './progress-bar/progress-bar.component';\nimport { AppSharedModule } from './app-shared/app-shared.module';\nimport { StackblitzComponent,\n  StackblitzTitleComponent,\n  StackblitzRunAngularComponent,\n  StackblitzStorybookComponent,\n  StackblitzUpdatePRComponent,\n  StackblitzStartPageComponent,\n  StackblitzStartTestComponent,\n  StackblitzMermaidInlineComponent\n } from './youtube/2022sept02/stackblitz.component';\n import {SeptfifteenComponent} from './youtube/Sep2022/septfifteen/septfifteen.component';\nimport { AboutMeComponent } from './about-me/about-me.component';\nimport { YoutubeMakingComponent } from './youtube-making/youtube-making.component';\n@NgModule({\n  declarations: [\n    AppComponent,\n    PureInboxScreenComponent,\n    TaskCheckComponent,\n    ProgressBarComponent,\n    AboutmeIntroductionComponent,\n    AboutmeLecturerComponent,\n    AboutmeTelecomComponent,\n    AboutmeDevelopmentComponent,\n    AboutmeTestingComponent,StartScreenComponent,\n    StackblitzComponent, StackblitzTitleComponent,\n    StackblitzRunAngularComponent,\n    StackblitzStorybookComponent,\n    StackblitzUpdatePRComponent,\n    StackblitzStartPageComponent,\n    StackblitzStartTestComponent,\n    StackblitzMermaidInlineComponent,\n    SeptfifteenComponent,\n    AboutMeComponent,\n    YoutubeMakingComponent\n  ], //],\n  imports: [\n    AppSharedModule,\n    HttpClientModule,\n    AppRoutingModule,\n    BrowserModule,\n    TaskModule,\n    NgxsModule.forRoot([], {\n      developmentMode: !environment.production,\n    }),\n    NgxsReduxDevtoolsPluginModule.forRoot(),\n    NgxsLoggerPluginModule.forRoot({\n      disabled: environment.production,\n    }),\n    MarkdownModule.forRoot({ loader: HttpClient }),\n    BrowserAnimationsModule,\n  ],\n  providers: [MarkdownService],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AboutMeComponent"
                        },
                        {
                            "name": "AboutmeDevelopmentComponent"
                        },
                        {
                            "name": "AboutmeIntroductionComponent"
                        },
                        {
                            "name": "AboutmeLecturerComponent"
                        },
                        {
                            "name": "AboutmeTelecomComponent"
                        },
                        {
                            "name": "AboutmeTestingComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ProgressBarComponent"
                        },
                        {
                            "name": "PureInboxScreenComponent"
                        },
                        {
                            "name": "SeptfifteenComponent"
                        },
                        {
                            "name": "StackblitzComponent"
                        },
                        {
                            "name": "StackblitzMermaidInlineComponent"
                        },
                        {
                            "name": "StackblitzRunAngularComponent"
                        },
                        {
                            "name": "StackblitzStartPageComponent"
                        },
                        {
                            "name": "StackblitzStartTestComponent"
                        },
                        {
                            "name": "StackblitzStorybookComponent"
                        },
                        {
                            "name": "StackblitzTitleComponent"
                        },
                        {
                            "name": "StackblitzUpdatePRComponent"
                        },
                        {
                            "name": "StartScreenComponent"
                        },
                        {
                            "name": "TaskCheckComponent"
                        },
                        {
                            "name": "YoutubeMakingComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "AppSharedModule"
                        },
                        {
                            "name": "TaskModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-78922b3ae99d2c5249b333980bd5afde1b120b2cc6fedfd41b8b2cc90f279797cb4b22e183bf7e1d1dfab8c6100e77e7812c110234d81f866f544f28a3e18b15",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppSharedModule",
            "id": "module-AppSharedModule-95867a8b27f23a922a0f20035b08b1db4b83fdaec4346705f43414b039d9dcd8baf23f9fd74fca07d3bd34359dc8987cf970dae3262ff84b4c50196892b3436d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-shared/app-shared.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MaterialModule } from '../material/material.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule],\n  exports: [MaterialModule, FormsModule, ReactiveFormsModule, FlexLayoutModule],\n})\nexport class AppSharedModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MaterialModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MaterialModule",
            "id": "module-MaterialModule-1ad804fd29031e9688450dc2e587fa9e5808bbd00cdbe0fd5c18ecaf0f65bfa5761436cdcb1c8aefb846531209ab6a6fe2ae6fe5e3d402b014e05210c578046a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/material/material.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { CdkStepperModule } from '@angular/cdk/stepper';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CdkTreeModule } from '@angular/cdk/tree';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule, MatRippleModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatTreeModule } from '@angular/material/tree';\nimport { OverlayModule } from '@angular/cdk/overlay';\n \n@NgModule({\n  exports: [\n    A11yModule,\n    ClipboardModule,\n    CdkStepperModule,\n    CdkTableModule,\n    CdkTreeModule,\n    DragDropModule,\n    MatAutocompleteModule,\n    MatBadgeModule,\n    MatBottomSheetModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatStepperModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatTreeModule,\n    OverlayModule,\n    PortalModule,\n    ScrollingModule,\n  ]\n})\nexport class MaterialModule { }",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TaskMarkedModule",
            "id": "module-TaskMarkedModule-0217d0e859ffa700f30426a74509ca691b2b118dfcc68d9c6f430fa41c21a43f882e56e3948998e691e01852fee9ac96e1c15f13df1a02a8b6f9131179743e48",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/taskMarked.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { MarkdownModule } from 'ngx-markdown';\n\nimport { InboxScreenComponent } from './inbox-screen.component';\n\n@NgModule({\n  imports: [CommonModule, MarkdownModule.forChild()],\n  exports: [InboxScreenComponent],\n  declarations: [InboxScreenComponent],\n  providers: [],\n})\nexport class TaskMarkedModule {}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "InboxScreenComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "InboxScreenComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TaskModule",
            "id": "module-TaskModule-a318a963004d33b85986afed7dedead813635b8562c5f3a763cec12512c8fa7d4a945df67041a710270fb1d7e729a58430c92f8bcd2448650d98a42780c3238e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/task.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgxsModule } from '@ngxs/store';\n\nimport { TaskComponent } from './task.component';\nimport { TaskListComponent } from './task-list.component';\nimport { TasksState } from '../state/task.state';\nimport { PureTaskListComponent } from './pure-task-list.component';\nimport { MarkdownModule } from 'ngx-markdown';\n\nimport {TaskMarkedComponent}from './taskMarked.component';\n\n@NgModule({\n  imports: [CommonModule, NgxsModule.forFeature([TasksState]), MarkdownModule.forChild()],\n  exports: [TaskComponent, TaskListComponent,TaskMarkedComponent],\n  declarations: [TaskComponent, TaskListComponent, PureTaskListComponent, TaskMarkedComponent],\n  providers: [],\n})\nexport class TaskModule {}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PureTaskListComponent"
                        },
                        {
                            "name": "TaskComponent"
                        },
                        {
                            "name": "TaskListComponent"
                        },
                        {
                            "name": "TaskMarkedComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TaskComponent"
                        },
                        {
                            "name": "TaskListComponent"
                        },
                        {
                            "name": "TaskMarkedComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "actions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/task.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK',\n  ERROR: 'APP_ERROR',\n}"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "defaultTasks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/task.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\n]"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/state/task.state.ts": [
                {
                    "name": "actions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/task.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\n  PIN_TASK: 'PIN_TASK',\n  ERROR: 'APP_ERROR',\n}"
                },
                {
                    "name": "defaultTasks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/task.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\n]"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 16,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/about-me/about-me.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AboutMeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/checkComponent.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskCheckComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/inbox-screen.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InboxScreenComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pure-inbox-screen.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PureInboxScreenComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pure-task-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PureTaskListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskListComponent",
                "coveragePercent": 40,
                "coverageCount": "2/5",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/task.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskComponent",
                "coveragePercent": 33,
                "coverageCount": "2/6",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/taskMarked.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskMarkedComponent",
                "coveragePercent": 25,
                "coverageCount": "2/8",
                "status": "low"
            },
            {
                "filePath": "src/app/models/task.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Task",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/progress-bar/progress-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AboutmeDevelopmentComponent",
                "coveragePercent": 37,
                "coverageCount": "3/8",
                "status": "medium"
            },
            {
                "filePath": "src/app/progress-bar/progress-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AboutmeIntroductionComponent",
                "coveragePercent": 37,
                "coverageCount": "3/8",
                "status": "medium"
            },
            {
                "filePath": "src/app/progress-bar/progress-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AboutmeLecturerComponent",
                "coveragePercent": 37,
                "coverageCount": "3/8",
                "status": "medium"
            },
            {
                "filePath": "src/app/progress-bar/progress-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AboutmeTelecomComponent",
                "coveragePercent": 37,
                "coverageCount": "3/8",
                "status": "medium"
            },
            {
                "filePath": "src/app/progress-bar/progress-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AboutmeTestingComponent",
                "coveragePercent": 37,
                "coverageCount": "3/8",
                "status": "medium"
            },
            {
                "filePath": "src/app/progress-bar/progress-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProgressBarComponent",
                "coveragePercent": 50,
                "coverageCount": "4/8",
                "status": "medium"
            },
            {
                "filePath": "src/app/progress-bar/progress-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StartScreenComponent",
                "coveragePercent": 37,
                "coverageCount": "3/8",
                "status": "medium"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppError",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ArchiveTask",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PinTask",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TasksState",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskStateModel",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultTasks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/youtube-making/youtube-making.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "YoutubeMakingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/youtube/2022sept02/stackblitz.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StackblitzComponent",
                "coveragePercent": 37,
                "coverageCount": "3/8",
                "status": "medium"
            },
            {
                "filePath": "src/app/youtube/2022sept02/stackblitz.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StackblitzMermaidInlineComponent",
                "coveragePercent": 37,
                "coverageCount": "3/8",
                "status": "medium"
            },
            {
                "filePath": "src/app/youtube/2022sept02/stackblitz.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StackblitzRunAngularComponent",
                "coveragePercent": 37,
                "coverageCount": "3/8",
                "status": "medium"
            },
            {
                "filePath": "src/app/youtube/2022sept02/stackblitz.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StackblitzStartPageComponent",
                "coveragePercent": 37,
                "coverageCount": "3/8",
                "status": "medium"
            },
            {
                "filePath": "src/app/youtube/2022sept02/stackblitz.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StackblitzStartTestComponent",
                "coveragePercent": 20,
                "coverageCount": "3/15",
                "status": "low"
            },
            {
                "filePath": "src/app/youtube/2022sept02/stackblitz.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StackblitzStorybookComponent",
                "coveragePercent": 37,
                "coverageCount": "3/8",
                "status": "medium"
            },
            {
                "filePath": "src/app/youtube/2022sept02/stackblitz.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StackblitzTitleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/youtube/2022sept02/stackblitz.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StackblitzUpdatePRComponent",
                "coveragePercent": 37,
                "coverageCount": "3/8",
                "status": "medium"
            },
            {
                "filePath": "src/app/youtube/Sep2022/septfifteen/septfifteen.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SeptfifteenComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}